<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">博客园_汤姆大叔的博客</title>
  <subtitle type="text"></subtitle>
  <id>uuid:a9715208-ba20-4b4a-98b1-a70df64202e6;id=4240</id>
  <updated>2015-09-11T03:21:47Z</updated>
  <author>
    <name>汤姆大叔</name>
    <uri>http://www.cnblogs.com/TomXu/</uri>
  </author>
  <generator>feed.cnblogs.com</generator>
  <entry>
    <id>http://www.cnblogs.com/TomXu/p/4496506.html</id>
    <title type="text">解读ASP.NET 5 &amp; MVC6系列（17）：MVC中的其他新特性 - 汤姆大叔</title>
    <summary type="text">#（GlobalImport全局导入功能）默认新建立的MVC程序中，在Views目录下，新增加了一个`_GlobalImport.cshtml`文件和`_ViewStart.cshtml`平级，该文件的功能类似于之前Views目录下的web.config文件，之前我们在该文件中经常设置全局导入的命名...</summary>
    <published>2015-06-03T01:22:00Z</published>
    <updated>2015-06-03T01:22:00Z</updated>
    <author>
      <name>汤姆大叔</name>
      <uri>http://www.cnblogs.com/TomXu/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/TomXu/p/4496506.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/TomXu/p/4496506.html" />
    <content type="html">#（GlobalImport全局导入功能）默认新建立的MVC程序中，在Views目录下，新增加了一个`_GlobalImport.cshtml`文件和`_ViewStart.cshtml`平级，该文件的功能类似于之前Views目录下的web.config文件，之前我们在该文件中经常设置全局导入的命名...&lt;img src="http://counter.cnblogs.com/blog/rss/4496506" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/TomXu/p/4496506.html" target="_blank"&gt;解读ASP.NET 5 &amp;amp; MVC6系列（17）：MVC中的其他新特性&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/TomXu/p/4496502.html</id>
    <title type="text">解读ASP.NET 5 &amp; MVC6系列（16）：自定义View视图文件查找逻辑 - 汤姆大叔</title>
    <summary type="text">之前MVC5和之前的版本中，我们要想对View文件的路径进行控制的话，则必须要对`IViewEngine`接口的`FindPartialView`或`FindView`方法进行重写，所有的视图引擎都继承于该`IViewEngine`接口，比如默认的`RazorViewEngine`。但新版本MVC6...</summary>
    <published>2015-06-02T01:07:00Z</published>
    <updated>2015-06-02T01:07:00Z</updated>
    <author>
      <name>汤姆大叔</name>
      <uri>http://www.cnblogs.com/TomXu/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/TomXu/p/4496502.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/TomXu/p/4496502.html" />
    <content type="html">之前MVC5和之前的版本中，我们要想对View文件的路径进行控制的话，则必须要对`IViewEngine`接口的`FindPartialView`或`FindView`方法进行重写，所有的视图引擎都继承于该`IViewEngine`接口，比如默认的`RazorViewEngine`。但新版本MVC6...&lt;img src="http://counter.cnblogs.com/blog/rss/4496502" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/TomXu/p/4496502.html" target="_blank"&gt;解读ASP.NET 5 &amp;amp; MVC6系列（16）：自定义View视图文件查找逻辑&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/TomXu/p/4496497.html</id>
    <title type="text">解读ASP.NET 5 &amp; MVC6系列（15）：MvcOptions配置 - 汤姆大叔</title>
    <summary type="text">#程序模型处理 IApplicationModelConvention在`MvcOptions`的实例对象上，有一个`ApplicationModelConventions`属性（类型是：`List`），该属性`IApplicationModelConvention`类型的接口集合，用于处理应用模型...</summary>
    <published>2015-06-01T00:58:00Z</published>
    <updated>2015-06-01T00:58:00Z</updated>
    <author>
      <name>汤姆大叔</name>
      <uri>http://www.cnblogs.com/TomXu/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/TomXu/p/4496497.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/TomXu/p/4496497.html" />
    <content type="html">#程序模型处理 IApplicationModelConvention在`MvcOptions`的实例对象上，有一个`ApplicationModelConventions`属性（类型是：`List`），该属性`IApplicationModelConvention`类型的接口集合，用于处理应用模型...&lt;img src="http://counter.cnblogs.com/blog/rss/4496497" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/TomXu/p/4496497.html" target="_blank"&gt;解读ASP.NET 5 &amp;amp; MVC6系列（15）：MvcOptions配置&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/TomXu/p/4496486.html</id>
    <title type="text">解读ASP.NET 5 &amp; MVC6系列（14）：View Component - 汤姆大叔</title>
    <summary type="text">在之前的MVC中，我们经常需要类似一种小部件的功能，通常我们都是使用Partial View来实现，因为MVC中没有类似Web Forms中的WebControl的功能。但在MVC6中，这一功能得到了极大的改善。新版MVC6中，提供了一种叫做View Component的功能。你可以将View Co...</summary>
    <published>2015-05-29T01:18:00Z</published>
    <updated>2015-05-29T01:18:00Z</updated>
    <author>
      <name>汤姆大叔</name>
      <uri>http://www.cnblogs.com/TomXu/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/TomXu/p/4496486.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/TomXu/p/4496486.html" />
    <content type="html">在之前的MVC中，我们经常需要类似一种小部件的功能，通常我们都是使用Partial View来实现，因为MVC中没有类似Web Forms中的WebControl的功能。但在MVC6中，这一功能得到了极大的改善。新版MVC6中，提供了一种叫做View Component的功能。你可以将View Co...&lt;img src="http://counter.cnblogs.com/blog/rss/4496486" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/TomXu/p/4496486.html" target="_blank"&gt;解读ASP.NET 5 &amp;amp; MVC6系列（14）：View Component&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/TomXu/p/4496480.html</id>
    <title type="text">解读ASP.NET 5 &amp; MVC6系列（13）：TagHelper - 汤姆大叔</title>
    <summary type="text">在新版的MVC6中，微软提供了强大的TagHelper功能，以便让我们摆脱如下的臃肿代码：```csharp@Html.LabelFor(model =&gt; model.FullName)@Html.EditFor(model =&gt; model.FullName)@Html.ValidationMes...</summary>
    <published>2015-05-28T01:22:00Z</published>
    <updated>2015-05-28T01:22:00Z</updated>
    <author>
      <name>汤姆大叔</name>
      <uri>http://www.cnblogs.com/TomXu/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/TomXu/p/4496480.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/TomXu/p/4496480.html" />
    <content type="html">在新版的MVC6中，微软提供了强大的TagHelper功能，以便让我们摆脱如下的臃肿代码：```csharp@Html.LabelFor(model =&amp;gt; model.FullName)@Html.EditFor(model =&amp;gt; model.FullName)@Html.ValidationMes...&lt;img src="http://counter.cnblogs.com/blog/rss/4496480" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/TomXu/p/4496480.html" target="_blank"&gt;解读ASP.NET 5 &amp;amp; MVC6系列（13）：TagHelper&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/TomXu/p/4496468.html</id>
    <title type="text">解读ASP.NET 5 &amp; MVC6系列（12）：基于Lamda表达式的强类型Routing实现 - 汤姆大叔</title>
    <summary type="text">前面的深入理解Routing章节，我们讲到了在MVC中，除了使用默认的ASP.NET 5的路由注册方式，还可以使用基于Attribute的特性（Route和HttpXXX系列方法）来定义。本章，我们将讲述一种基于Lambda表达式的强类型类型。这种方式的基本使用示例如下：```csharpservi...</summary>
    <published>2015-05-27T01:05:00Z</published>
    <updated>2015-05-27T01:05:00Z</updated>
    <author>
      <name>汤姆大叔</name>
      <uri>http://www.cnblogs.com/TomXu/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/TomXu/p/4496468.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/TomXu/p/4496468.html" />
    <content type="html">前面的深入理解Routing章节，我们讲到了在MVC中，除了使用默认的ASP.NET 5的路由注册方式，还可以使用基于Attribute的特性（Route和HttpXXX系列方法）来定义。本章，我们将讲述一种基于Lambda表达式的强类型类型。这种方式的基本使用示例如下：```csharpservi...&lt;img src="http://counter.cnblogs.com/blog/rss/4496468" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/TomXu/p/4496468.html" target="_blank"&gt;解读ASP.NET 5 &amp;amp; MVC6系列（12）：基于Lamda表达式的强类型Routing实现&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/TomXu/p/4496462.html</id>
    <title type="text">解读ASP.NET 5 &amp; MVC6系列（11）：Routing路由 - 汤姆大叔</title>
    <summary type="text">#新版Routing功能介绍在ASP.NET 5和MVC6中，Routing功能被全部重写了，虽然用法有些类似，但和之前的Routing原理完全不太一样了，该Routing框架不仅可以支持MVC和Web API，还支持一般的ASP.NET5程序。新版的改变有如下几个部分。首先，Routing系统是基...</summary>
    <published>2015-05-26T01:07:00Z</published>
    <updated>2015-05-26T01:07:00Z</updated>
    <author>
      <name>汤姆大叔</name>
      <uri>http://www.cnblogs.com/TomXu/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/TomXu/p/4496462.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/TomXu/p/4496462.html" />
    <content type="html">#新版Routing功能介绍在ASP.NET 5和MVC6中，Routing功能被全部重写了，虽然用法有些类似，但和之前的Routing原理完全不太一样了，该Routing框架不仅可以支持MVC和Web API，还支持一般的ASP.NET5程序。新版的改变有如下几个部分。首先，Routing系统是基...&lt;img src="http://counter.cnblogs.com/blog/rss/4496462" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/TomXu/p/4496462.html" target="_blank"&gt;解读ASP.NET 5 &amp;amp; MVC6系列（11）：Routing路由&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/TomXu/p/4496456.html</id>
    <title type="text">解读ASP.NET 5 &amp; MVC6系列（10）：Controller与Action - 汤姆大叔</title>
    <summary type="text">我们知道在MVC5和之前的版本，两个框架的生命周期是不一样的，在新版MVC6中，MVC Controller/Web API Controller已经合二为一了，本章我们主要讲解Controller和Action的定义与使用，以及在MVC框架中，如何根据路由查询相应的Controller和Actio...</summary>
    <published>2015-05-25T01:11:00Z</published>
    <updated>2015-05-25T01:11:00Z</updated>
    <author>
      <name>汤姆大叔</name>
      <uri>http://www.cnblogs.com/TomXu/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/TomXu/p/4496456.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/TomXu/p/4496456.html" />
    <content type="html">我们知道在MVC5和之前的版本，两个框架的生命周期是不一样的，在新版MVC6中，MVC Controller/Web API Controller已经合二为一了，本章我们主要讲解Controller和Action的定义与使用，以及在MVC框架中，如何根据路由查询相应的Controller和Actio...&lt;img src="http://counter.cnblogs.com/blog/rss/4496456" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/TomXu/p/4496456.html" target="_blank"&gt;解读ASP.NET 5 &amp;amp; MVC6系列（10）：Controller与Action&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/TomXu/p/4496447.html</id>
    <title type="text">解读ASP.NET 5 &amp; MVC6系列（9）：日志框架 - 汤姆大叔</title>
    <summary type="text">#框架介绍在之前的.NET中，微软还没有提供过像样的日志框架，目前能用的一些框架比如Log4Net、NLog、CommonLogging使用起来多多少少都有些费劲，和java的SLF4J根本无法相比。但在新版的ASP.NET5中，可谓是牛气冲天，微软提供的Microsoft.Framework.Lo...</summary>
    <published>2015-05-22T01:00:00Z</published>
    <updated>2015-05-22T01:00:00Z</updated>
    <author>
      <name>汤姆大叔</name>
      <uri>http://www.cnblogs.com/TomXu/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/TomXu/p/4496447.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/TomXu/p/4496447.html" />
    <content type="html">#框架介绍在之前的.NET中，微软还没有提供过像样的日志框架，目前能用的一些框架比如Log4Net、NLog、CommonLogging使用起来多多少少都有些费劲，和java的SLF4J根本无法相比。但在新版的ASP.NET5中，可谓是牛气冲天，微软提供的Microsoft.Framework.Lo...&lt;img src="http://counter.cnblogs.com/blog/rss/4496447" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/TomXu/p/4496447.html" target="_blank"&gt;解读ASP.NET 5 &amp;amp; MVC6系列（9）：日志框架&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/TomXu/p/4496445.html</id>
    <title type="text">解读ASP.NET 5 &amp; MVC6系列（8）：Session与Caching - 汤姆大叔</title>
    <summary type="text">在之前的版本中，Session存在于System.Web中，新版ASP.NET 5中由于不在依赖于System.Web.dll库了，所以相应的，Session也就成了ASP.NET 5中一个可配置的模块（middleware）了。#配置启用SessionASP.NET 5中的Session模块存在于...</summary>
    <published>2015-05-21T01:08:00Z</published>
    <updated>2015-05-21T01:08:00Z</updated>
    <author>
      <name>汤姆大叔</name>
      <uri>http://www.cnblogs.com/TomXu/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/TomXu/p/4496445.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/TomXu/p/4496445.html" />
    <content type="html">在之前的版本中，Session存在于System.Web中，新版ASP.NET 5中由于不在依赖于System.Web.dll库了，所以相应的，Session也就成了ASP.NET 5中一个可配置的模块（middleware）了。#配置启用SessionASP.NET 5中的Session模块存在于...&lt;img src="http://counter.cnblogs.com/blog/rss/4496445" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/TomXu/p/4496445.html" target="_blank"&gt;解读ASP.NET 5 &amp;amp; MVC6系列（8）：Session与Caching&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
</feed>