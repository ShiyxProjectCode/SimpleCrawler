<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet type="text/xsl" title="XSL Formatting" href="/rss.xsl" media="all" ?>
<rss version="2.0">
<channel>
    <title>Just To Be</title>
    <image>
    <link>http://blog.csdn.net</link>
    <url>http://static.blog.csdn.net/images/logo.gif</url>
    </image>
    <description>记录与分享</description>
	<link>http://blog.csdn.net/youxin2012</link>
	<language>zh-cn</language>
	<generator>http://blog.csdn.net</generator>
	<ttl>5</ttl>
	<copyright><![CDATA[Copyright &copy; youxin2012]]></copyright> 
	<pubDate>2015/9/17 14:34:02</pubDate>
    <item>
        <title><![CDATA[[转]java中三种常见内存溢出错误的处理方法]]></title>
        <link>http://blog.csdn.net/youxin2012/article/details/46658747</link>
        <guid>http://blog.csdn.net/youxin2012/article/details/46658747</guid>
        <author>youxin2012</author>
        <pubDate>2015/6/27 7:40:28</pubDate>
        <description><![CDATA[
            <p>好的基础知识要转载，原文链接<a href="http://outofmemory.cn/java/OutOfMemoryError/PermGen-space-Java-heap-space-unable-create-new-native-thread">此处</a></p>

<p>相信有一定java开发经验的人或多或少都会遇到OutOfMemoryError的问题，这个问题曾困扰了我很长时间，随着解决各类问题经验的积累以及对问题根源的探索，终于有了一个比较深入的认识。</p>

<p>在解决java内存溢出问题之前，需要对jvm（java虚拟机）的内存管理有一定的认识。jvm管理的内存大致包括三种不同类型的内存区域：Permanent Generation space（永久保存区域）、Heap space(堆区域)、Java Stacks(Java栈）。其中永久保存区域主要存放Class（类）和Meta的信息，Class第一次被Load的时候被放入PermGen space区域，Class需要存储的内容主要包括方法和静态属性。堆区域用来存放Class的实例（即对象），对象需要存储的内容主要是非静态属性。每次用new创建一个对象实例后，对象实例存储在堆区域中，这部分空间也被jvm的垃圾回收机制管理。而Java栈跟大多数编程语言包括汇编语言的栈功能相似，主要基本类型变量以及方法的输入输出参数。Java程序的每个线程中都有一个独立的堆栈。容易发生内存溢出问题的内存空间包括：Permanent Generation space和Heap space。</p>

<p>第一种OutOfMemoryError： PermGen space</p>

<p>发生这种问题的原意是程序中使用了大量的jar或class，使java虚拟机装载类的空间不够，与Permanent Generation space有关。解决这类问题有以下两种办法：</p>

<p>增加java虚拟机中的XX:PermSize和XX:MaxPermSize参数的大小，其中XX:PermSize是初始永久保存区域大小，XX:MaxPermSize是最大永久保存区域大小。如针对tomcat6.0，在catalina.sh 或catalina.bat文件中一系列环境变量名说明结束处（大约在70行左右） 增加一行： JAVA_OPTS=” -XX:PermSize=64M -XX:MaxPermSize=128m” 如果是windows服务器还可以在系统环境变量中设置。感觉用tomcat发布sprint+struts+hibernate架构的程序时很容易发生这种内存溢出错误。使用上述方法，我成功解决了部署ssh项目的tomcat服务器经常宕机的问题。 <br>
清理应用程序中web-inf/lib下的jar，如果tomcat部署了多个应用，很多应用都使用了相同的jar，可以将共同的jar移到tomcat共同的lib下，减少类的重复加载。这种方法是网上部分人推荐的，我没试过，但感觉减少不了太大的空间，最靠谱的还是第一种方法。 <br>
第二种OutOfMemoryError：  Java heap space</p>

<p>发生这种问题的原因是java虚拟机创建的对象太多，在进行垃圾回收之间，虚拟机分配的到堆内存空间已经用满了，与Heap space有关。解决这类问题有两种思路：</p>

<p>检查程序，看是否有死循环或不必要地重复创建大量对象。找到原因后，修改程序和算法。 我以前写一个使用K-Means文本聚类算法对几万条文本记录（每条记录的特征向量大约10来个）进行文本聚类时，由于程序细节上有问题，就导致了Java heap space的内存溢出问题，后来通过修改程序得到了解决。 <br>
增加Java虚拟机中Xms（初始堆大小）和Xmx（最大堆大小）参数的大小。如：set JAVA_OPTS= -Xms256m -Xmx1024m <br>
第三种OutOfMemoryError：unable to create new native thread</p>

<p>在java应用中，有时候会出现这样的错误：OutOfMemoryError: unable to create new native thread.这种怪事是因为JVM已经被系统分配了大量的内存(比如1.5G)，并且它至少要占用可用内存的一半。有人发现，在线程个数很多的情况下，你分配给JVM的内存越多，那么，上述错误发生的可能性就越大。</p>

<p>那么是什么原因造成这种问题呢？</p>

<p>每一个32位的进程最多可以使用2G的可用内存，因为另外2G被操作系统保留。这里假设使用1.5G给JVM，那么还余下500M可用内存。这500M内存中的一部分必须用于系统dll的加载，那么真正剩下的也许只有400M，现在关键的地方出现了：当你使用Java创建一个线程，在JVM的内存里也会创建一个Thread对象，但是同时也会在操作系统里创建一个真正的物理线程(参考JVM规范)，操作系统会在余下的400兆内存里创建这个物理线程，而不是在JVM的1500M的内存堆里创建。在jdk1.4里头，默认的栈大小是256KB，但是在jdk1.5里头，默认的栈大小为1M每线程，因此，在余下400M的可用内存里边我们最多也只能创建400个可用线程。</p>

<p>这样结论就出来了，要想创建更多的线程，你必须减少分配给JVM的最大内存。还有一种做法是让JVM宿主在你的JNI代码里边。</p>

<p>给出一个有关能够创建线程的最大个数的估算公式：</p>

<p>(MaxProcessMemory - JVMMemory - ReservedOsMemory) / (ThreadStackSize) = Number of threads <br>
对于jdk1.5而言，假设操作系统保留120M内存：</p>

<p>1.5GB JVM: (2GB-1.5Gb-120MB)/(1MB) = ~380 threads <br>
1.0GB JVM: (2GB-1.0Gb-120MB)/(1MB) = ~880 threads <br>
对于栈大小为256KB的jdk1.4而言，</p>

<p>1.5GB allocated to JVM: ~1520 threads <br>
1.0GB allocated to JVM: ~3520 threads  <br>
对于这个异常我们首先需要判断下，发生内存溢出时进程中到底都有什么样的线程，这些线程是否是应该存在的，是否可以通过优化来降低线程数； 另外一方面默认情况下java为每个线程分配的栈内存大小是1M，通常情况下，这1M的栈内存空间是足足够用了，因为在通常在栈上存放的只是基础类型的数据或者对象的引用，这些东西都不会占据太大的内存， 我们可以通过调整jvm参数，降低为每个线程分配的栈内存大小来解决问题，例如在jvm参数中添加-Xss128k将线程栈内存大小设置为128k。</p>
            <div>
                作者：youxin2012 发表于2015/6/27 7:40:28 <a href="http://blog.csdn.net/youxin2012/article/details/46658747">原文链接</a>
            </div>
            <div>
            阅读：336 评论：0 <a href="http://blog.csdn.net/youxin2012/article/details/46658747#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]java中单例模式singleton]]></title>
        <link>http://blog.csdn.net/youxin2012/article/details/46491005</link>
        <guid>http://blog.csdn.net/youxin2012/article/details/46491005</guid>
        <author>youxin2012</author>
        <pubDate>2015/6/14 14:16:17</pubDate>
        <description><![CDATA[
            <p>单例模式：在上下文中只有一个对象的实例。 <br>
应用场景：线程池，缓存等一个系统只需要一个的场景。</p>

<p>三种常见单例模式： <br>
1. 延迟加载</p>



<pre class="prettyprint"><code class=" hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> Singleton {
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton uniqueInstance;

    <span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span>() {}

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span>() {
        <span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-keyword">null</span>)
            uniqueInstance = <span class="hljs-keyword">new</span> Singleton();
        <span class="hljs-keyword">return</span> uniqueInstance;
    }
}</code></pre>

<p>使用时通过调用类的静态方法来获取： <br>
Singleton singleton =Singleton.getInstance();</p>

<p>存在问题：多线程同步问题 <br>
多线程在第一次生成对象时，存在同时执行   if (uniqueInstance == null)  判断的可能，从而同时多次 new实例</p>

<p>改进：</p>



<pre class="prettyprint"><code class=" hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> SynSingleton {
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SynSingleton uniqueInstance;

    <span class="hljs-keyword">private</span> <span class="hljs-title">SynSingleton</span>() {}

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> synchronized SynSingleton <span class="hljs-title">getInstance</span>() {
        <span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-keyword">null</span>)
            uniqueInstance = <span class="hljs-keyword">new</span> SynSingleton();
        <span class="hljs-keyword">return</span> uniqueInstance;
    }
}</code></pre>

<p>如此通过synchronized代码块的方式，实现同步。  <br>
2. 急切实例化 <br>
  上述方式每次在获取对象时，都要做同步synchronized操作，开销较大，而同步操作仅在第一次new时有效（随后每次调用均不做new操作，相当于只读不写），因此可以在类加载时就new对象，随后则不在做new操作，改进如下：</p>



<pre class="prettyprint"><code class=" hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> UrgSingleton {
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> UrgSingleton uniqueInstance = <span class="hljs-keyword">new</span> UrgSingleton();
    <span class="hljs-keyword">private</span> <span class="hljs-title">UrgSingleton</span>() {}

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UrgSingleton <span class="hljs-title">getInstance</span>() {
        <span class="hljs-keyword">return</span> uniqueInstance;
    }
}</code></pre>

<p>延迟实例化与急切实例化的优缺点也较明显： <br>
 如果此对象开销较大，而整个过程又没有利用，则急切实例化出来的对象，白白消耗了资源。 <br>
 而延时实例化同步问题，存在开销较大的情况，于是有了 下面的双重检查加锁方式。 <br>
3. 双重检查加锁 </p>

<pre class="prettyprint"><code class=" hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> DoubleSynSingleton {
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> DouleSynSingleton uniqueInstance;

    <span class="hljs-keyword">private</span> <span class="hljs-title">DoubleSynSingleton</span>() {}
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DoubleSynSingleton <span class="hljs-title">getInstance</span>() {
        <span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-keyword">null</span>) {
            synchronized(DoubleSynSingleton.class) {
                <span class="hljs-keyword">if</span>(uniqueInstance == <span class="hljs-keyword">null</span>)
                    uniqueInstance = <span class="hljs-keyword">new</span> DoubleSynSingleton();
            }
        }
        <span class="hljs-keyword">return</span> uniqueInstance;
    }
}</code></pre>

<p>如上所示，仅当第一次new对象时，使用synchronized方法，随后获取对象实例时都在外层的 if (uniqueInstance == null) 判断后完成退出，不要随后的同步代码块。如此，性能得到提升。</p>
            <div>
                作者：youxin2012 发表于2015/6/14 14:16:17 <a href="http://blog.csdn.net/youxin2012/article/details/46491005">原文链接</a>
            </div>
            <div>
            阅读：295 评论：0 <a href="http://blog.csdn.net/youxin2012/article/details/46491005#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]java中访问修饰符]]></title>
        <link>http://blog.csdn.net/youxin2012/article/details/46449365</link>
        <guid>http://blog.csdn.net/youxin2012/article/details/46449365</guid>
        <author>youxin2012</author>
        <pubDate>2015/6/11 0:13:34</pubDate>
        <description><![CDATA[
            <p>较之c＋＋ 中 public，proctected, private 三种访问控制， java多了默认访问控制。 <br>
java中四种访问控制权限  简单描述为一下四句： <br>
1）private 仅本类可见    （同c＋＋） <br>
2）默认          对本包可见/包内访问   （c＋＋没有） <br>
3）protected     对本包和所有子类可见       （c++中没有本包概念，较 默认访问 可以被在其他包下的子类访问） <br>
4）public     对所有类可见  （同c＋＋）</p>

<p>其中1）4）与c＋＋相同，对2）3）做简单测试</p>

<p>3）protected  对本包可见测试如下：</p>



<pre class="prettyprint"><code class=" hljs cs">package com.behavior;
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> Parent {
    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">3</span>;
}</code></pre>



<pre class="prettyprint"><code class=" hljs cs">package com.behavior;
<span class="hljs-comment">//与Parent在同一个包下，无继承关系</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> Children {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">action</span>() {
        Parent parent = <span class="hljs-keyword">new</span> Parent();
        System.<span class="hljs-keyword">out</span>.print(parent.i);
    }
}</code></pre>



<pre class="prettyprint"><code class=" hljs java"><span class="hljs-keyword">package</span> com.stratege;
<span class="hljs-keyword">import</span> com.behavior.Children;
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChildrenTest</span> {</span>
        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(String [] args) {
            Children children = <span class="hljs-keyword">new</span> Children();
            children.action();
        }
}</code></pre>

<p>验证：protected 对包内访问的权限</p>

<p>2）默认    对包内访问测试 <br>
将Parent中变量i 访问权限做如下修改，Children, ChildrenTest不变</p>

<pre class="prettyprint"><code class=" hljs cs">package com.behavior;
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> Parent {
    <span class="hljs-keyword">int</span> i = <span class="hljs-number">3</span>;
}</code></pre>

<p>验证：默认对包内访问的权限</p>
            <div>
                作者：youxin2012 发表于2015/6/11 0:13:34 <a href="http://blog.csdn.net/youxin2012/article/details/46449365">原文链接</a>
            </div>
            <div>
            阅读：387 评论：0 <a href="http://blog.csdn.net/youxin2012/article/details/46449365#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]eclipse应用技巧]]></title>
        <link>http://blog.csdn.net/youxin2012/article/details/45424489</link>
        <guid>http://blog.csdn.net/youxin2012/article/details/45424489</guid>
        <author>youxin2012</author>
        <pubDate>2015/5/1 23:39:08</pubDate>
        <description><![CDATA[
            <p>最近发现eclipse作为ide还是有很多值得探索的使用技巧的，转载一下他人整理好的资源以做分享。</p>

<p><a href="http://blog.csdn.net/skyboy11yk/article/details/9298753">快捷键</a>的使用，加速开发 <br>
<a href="http://wenku.baidu.com/link?url=54XYnYjJNH1UXBZNwEcXVDQ98sHNT9x3ANKP681_x6VxoVgU94ALlAcxH41aC-IQdVImLLBAdkgEyOIn94xhkV_Ku8xgkYBp8xCwKEFIldS">codestype</a>配置，规范代码风格</p>
            <div>
                作者：youxin2012 发表于2015/5/1 23:39:08 <a href="http://blog.csdn.net/youxin2012/article/details/45424489">原文链接</a>
            </div>
            <div>
            阅读：378 评论：0 <a href="http://blog.csdn.net/youxin2012/article/details/45424489#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]java反编译工具jad及jadclipse]]></title>
        <link>http://blog.csdn.net/youxin2012/article/details/45422241</link>
        <guid>http://blog.csdn.net/youxin2012/article/details/45422241</guid>
        <author>youxin2012</author>
        <pubDate>2015/5/1 21:36:41</pubDate>
        <description><![CDATA[
            <p>java源码学习中常用到的工具</p><p>jad</p><p>反编译.class 文件</p><p>下载地址及使用（详见压缩包中的readme）</p><p>http://varaneckas.com/jad/</p><p>如果用eclipse 可以配合 jadclipse插件&nbsp;http://sourceforge.net/projects/jadclipse/?source=typ_redirect</p><p>eclipse中 jadclipse插件配置需用到jad</p><p>配置使用见如下链接</p><p>http://download.csdn.net/detail/xlxiongliang/7974737#comment 此方法操作简单<br /></p><p>遇到问题，其他参考</p><p>http://jingyan.baidu.com/article/3f16e003c857082590c1036f.html<br /></p><p>http://blog.csdn.net/bits00/article/details/8019116 &nbsp;<br /></p><p>http://www.blogjava.net/landon/archive/2010/07/16/326294.html<br /></p>
            <div>
                作者：youxin2012 发表于2015/5/1 21:36:41 <a href="http://blog.csdn.net/youxin2012/article/details/45422241">原文链接</a>
            </div>
            <div>
            阅读：347 评论：0 <a href="http://blog.csdn.net/youxin2012/article/details/45422241#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]java 相对路径获取 -- getResource的应用]]></title>
        <link>http://blog.csdn.net/youxin2012/article/details/44018097</link>
        <guid>http://blog.csdn.net/youxin2012/article/details/44018097</guid>
        <author>youxin2012</author>
        <pubDate>2015/3/2 14:46:27</pubDate>
        <description><![CDATA[
            <div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;">（一）函数：</div><span style="font-family:Microsoft YaHei UI;font-size: 14px; line-height: 21px;">&nbsp; &nbsp;&nbsp;</span><span style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;">（1） &nbsp; Class.getResource(String path) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><br style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;" /><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><span style="font-family: 'Microsoft YaHei UI'; font-size: 10.5pt; line-height: 1.5;">&nbsp; &nbsp;&nbsp;</span><span style="font-size: 10.5pt; line-height: 1.5;">（2） &nbsp;&nbsp;</span>Class.getClassLoader.getResource(String path)<br /></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><br /></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;">其中（2）中 path不能以'/'开头</div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;">（1）中path 开头有无'/' 均可，含义不同</div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><br /></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;">（二）<span style="font-size: 10.5pt; line-height: 1.5;">测试目录结构：</span></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><p style="line-height: 28px; margin-top: 0px; margin-bottom: 10px; padding-top: 0px; padding-bottom: 0px; color: rgb(132, 132, 132); font-family: 'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53; font-size: 16px; text-indent: 2em;">|--project</p><p style="line-height: 28px; margin-top: 0px; margin-bottom: 10px; padding-top: 0px; padding-bottom: 0px; color: rgb(132, 132, 132); font-family: 'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53; font-size: 16px; text-indent: 2em;">&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;|--src</wbr></wbr></wbr></p><p style="line-height: 28px; margin-top: 0px; margin-bottom: 10px; padding-top: 0px; padding-bottom: 0px; color: rgb(132, 132, 132); font-family: 'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53; font-size: 16px; text-indent: 2em;">&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;|--mytest</wbr></wbr></wbr></wbr></wbr></wbr></wbr></p><p style="line-height: 28px; margin-top: 0px; margin-bottom: 10px; padding-top: 0px; padding-bottom: 0px; color: rgb(132, 132, 132); font-family: 'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53; font-size: 16px; text-indent: 2em;">&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;|--RePathTest.java</wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></p><p style="line-height: 28px; margin-top: 0px; margin-bottom: 10px; padding-top: 0px; padding-bottom: 0px; color: rgb(132, 132, 132); font-family: 'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53; font-size: 16px; text-indent: 2em;">&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;&nbsp;<wbr>|--file1.txt</wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></p><p style="line-height: 28px; margin-top: 0px; margin-bottom: 10px; padding-top: 0px; padding-bottom: 0px; color: rgb(132, 132, 132); font-family: 'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53; font-size: 16px; text-indent: 2em;">&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;|--file2.txt</wbr></wbr></wbr></wbr></wbr></wbr></wbr></p><p style="line-height: 28px; margin-top: 0px; margin-bottom: 10px; padding-top: 0px; padding-bottom: 0px; color: rgb(132, 132, 132); font-family: 'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53; font-size: 16px; text-indent: 2em;">&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;|--bin<wbr></wbr></wbr></wbr></wbr></p><p style="line-height: 28px; margin-top: 0px; margin-bottom: 10px; padding-top: 0px; padding-bottom: 0px; color: rgb(132, 132, 132); font-family: 'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53; font-size: 16px; text-indent: 2em;">&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;|--mytest</wbr></wbr></wbr></wbr></wbr></wbr></wbr></p><p style="line-height: 28px; margin-top: 0px; margin-bottom: 10px; padding-top: 0px; padding-bottom: 0px; color: rgb(132, 132, 132); font-family: 'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53; font-size: 16px; text-indent: 2em;">&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;&nbsp;<wbr>|--RePathTest.class</wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></p><p style="line-height: 28px; margin-top: 0px; margin-bottom: 10px; padding-top: 0px; padding-bottom: 0px; color: rgb(132, 132, 132); font-family: 'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53; font-size: 16px; text-indent: 2em;">&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;|--file3.txt</wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></p><p style="line-height: 28px; margin-top: 0px; margin-bottom: 10px; padding-top: 0px; padding-bottom: 0px; color: rgb(132, 132, 132); font-family: 'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53; font-size: 16px; text-indent: 2em;">&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;|--file4.txt</wbr></wbr></wbr></wbr></wbr></wbr></wbr></p></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;">（三）用法：</div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;">（2）中 &nbsp;默认是从ClassPath （即 bin 或 classes路径）下获取</div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><span style="font-size: 10.5pt; line-height: 1.5;">本例中：</span><br /></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><div><span style="font-size: 12pt; color: windowtext; font-family: Consolas;">File&nbsp;<span style="color: rgb(106, 62, 62);">file3</span>&nbsp;=&nbsp;<span style=" color: rgb(127, 0, 85);"><strong>new</strong></span>&nbsp;File(RePathTest.<span style=" color: rgb(127, 0, 85);"><strong>class</strong></span>.getClassLoader().getResource(<span style="color: rgb(42, 0, 255);">&quot;mytest/file3.txt&quot;</span>).getFile());</span>&nbsp;<span style="font-size: 10.5pt; line-height: 1.5;">&nbsp;</span></div><div><span style="color: windowtext; font-size: 12pt; font-family: Consolas;">File&nbsp;<span style="color: rgb(106, 62, 62);">file4</span>&nbsp;=&nbsp;<span style=" color: rgb(127, 0, 85);"><strong>new</strong></span>&nbsp;File(RePathTest.<span style=" color: rgb(127, 0, 85);"><strong>class</strong></span>.getClassLoader().getResource(<span style="color: rgb(42, 0, 255);">&quot;file4.txt&quot;</span>).getFile());</span></div></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><span style="color: windowtext; font-size: 12pt; font-family: Consolas;"><br /></span></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><span style="color: windowtext; font-size: 12pt; font-family: Consolas;">（1）中&nbsp;</span></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><span style="color: windowtext; font-size: 12pt; font-family: Consolas;">a. 以'/'开头，而表示从</span><span style="font-size: 10.5pt; line-height: 1.5;">ClassPath （即 bin 或 classes路径）下获取</span></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;">本例中：</div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><span style="color: windowtext; font-size: 12pt; font-family: Consolas;">File&nbsp;<span style="color: rgb(106, 62, 62);">file3</span>&nbsp;=&nbsp;<span style=" color: rgb(127, 0, 85);"><strong>new</strong></span>&nbsp;File(RePathTest.<span style=" color: rgb(127, 0, 85);"><strong>class</strong></span>.getResource(<span style="color: rgb(42, 0, 255);">&quot;/mytest/file3.txt&quot;</span>).getFile()); // 从classpath 即 bin下找&nbsp;</span><br /></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><span style="color: windowtext; font-size: 12pt; font-family: Consolas;"><br /></span></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><span style="color: windowtext; font-size: 12pt; font-family: Consolas;">b. 不以</span><span style="font-family: Consolas; font-size: 16px; line-height: 24px;">'/'开头，表示相对于&nbsp;</span><span style="font-size: 10.5pt; line-height: 1.5;">RePathTest.class 的路径</span></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><span style="font-size: 10.5pt; line-height: 1.5;">本例中：</span></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><span style="color: windowtext; font-size: 12pt; font-family: Consolas;">File&nbsp;<span style="color: rgb(106, 62, 62);">file3</span>&nbsp;=&nbsp;<span style=" color: rgb(127, 0, 85);"><strong>new</strong></span>&nbsp;File(RePathTest.<span style=" color: rgb(127, 0, 85);"><strong>class</strong></span>.getResource(<span style="color: rgb(42, 0, 255);">&quot;file3.txt&quot;</span>).getFile());</span><span style="font-size: 10.5pt; line-height: 1.5;">&nbsp; // 从 package mytest 包 &nbsp;找，相对于 .class（此处为 &nbsp;</span><span style="font-family: Consolas; font-size: 16px; line-height: 24px;">RePathTest.</span><span style="font-family: Consolas; font-size: 16px; line-height: 24px;  color: rgb(127, 0, 85);"><strong>class</strong></span><span style="font-size: 10.5pt; line-height: 1.5;">&nbsp;）文件</span><span style="color: windowtext; font-size: 12pt; font-family: Consolas;"><br /></span></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><span style="color: windowtext; font-size: 12pt; font-family: Consolas;"><br /></span></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><div><span style="font-family:Consolas;font-size:14px;">（四）</span><span style="font-size: 10.5pt; line-height: 1.5;">&nbsp;</span><span style="font-size: 10.5pt; line-height: 1.5;">getResourceAsStream() &nbsp; vs &nbsp;getResouce()</span></div><div>getResourceAsStream()方法，参数是与getResouce()方法是一样的，它相当于你用getResource()取得File文件后，</div><div>再new InputStream(file)一样的结果</div></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><br /></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><span style="color: windowtext; font-size: 12pt; font-family: Consolas;">（五）补充</span></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><span style="color: windowtext; font-size: 12pt; font-family: Consolas;">1. web中以 WEB-INF中classes文件为classpath目录</span></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><span style="color: windowtext; font-size: 12pt; font-family: Consolas;">2. getResource 获取路径与 .class文件夹有关，与 .java文件夹无关</span></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><span style="color: windowtext; font-size: 12pt; font-family: Consolas;"><br /></span></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><span style="color: windowtext; font-size: 12pt; font-family: Consolas;">（六）测试</span></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><div><span style=" font-size: 12pt; color: rgb(127, 0, 85); font-family: Consolas;"><strong>package<span style="font-weight: normal; color: windowtext;">&nbsp;mytest;</span></strong></span></div><div></div><div><span style=" font-size: 12pt; color: rgb(127, 0, 85); font-family: Consolas;"><strong>import<span style="font-weight: normal; color: windowtext;">&nbsp;java.io.BufferedReader;</span></strong></span></div><div><span style=" font-size: 12pt; color: rgb(127, 0, 85); font-family: Consolas;"><strong>import<span style="font-weight: normal; color: windowtext;">&nbsp;java.io.File;</span></strong></span></div><div><span style=" font-size: 12pt; color: rgb(127, 0, 85); font-family: Consolas;"><strong>import<span style="font-weight: normal; color: windowtext;">&nbsp;java.io.FileNotFoundException;</span></strong></span></div><div><span style=" font-size: 12pt; color: rgb(127, 0, 85); font-family: Consolas;"><strong>import<span style="font-weight: normal; color: windowtext;">&nbsp;java.io.FileReader;</span></strong></span></div><div><span style=" font-size: 12pt; color: rgb(127, 0, 85); font-family: Consolas;"><strong>import<span style="font-weight: normal; color: windowtext;">&nbsp;java.io.IOException;</span></strong></span></div><div></div><div><span style=" font-size: 12pt; color: rgb(127, 0, 85); font-family: Consolas;"><strong>public<span style="font-weight: normal; color: windowtext;">&nbsp;</span>class<span style="font-weight: normal; color: windowtext;">&nbsp;RePathTest&nbsp;{</span></strong></span></div><div><span style="font-size: 12pt; color: windowtext; font-family: Consolas;">&nbsp;&nbsp;&nbsp;&nbsp;RePathTest&nbsp;<span style="color: rgb(0, 0, 192);">Test</span>&nbsp;=&nbsp;<span style=" color: rgb(127, 0, 85);"><strong>new</strong></span>&nbsp;RePathTest();</span></div><div><span style="font-size: 12pt; color: windowtext; font-family: Consolas;">&nbsp;&nbsp;&nbsp;&nbsp;<span style=" color: rgb(127, 0, 85);"><strong>public</strong></span>&nbsp;<span style=" color: rgb(127, 0, 85);"><strong>static</strong></span>&nbsp;<span style=" color: rgb(127, 0, 85);"><strong>void</strong></span>&nbsp;main(String[]&nbsp;<span style="color: rgb(106, 62, 62);">args</span>)&nbsp;<span style=" color: rgb(127, 0, 85);"><strong>throws</strong></span>&nbsp;FileNotFoundException&nbsp;{</span></div><div><span style="font-size: 12pt; color: windowtext; font-family: Consolas;">&nbsp;&nbsp;&nbsp;&nbsp;File&nbsp;<span style="color: rgb(106, 62, 62);">file3</span>&nbsp;=&nbsp;<span style=" color: rgb(127, 0, 85);"><strong>new</strong></span>&nbsp;File(RePathTest.<span style=" color: rgb(127, 0, 85);"><strong>class</strong></span>.getResource(<span style="color: rgb(42, 0, 255);">&quot;file3.txt&quot;</span>).getFile());</span></div><div><span style="font-size: 12pt; color: windowtext; font-family: Consolas;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgb(63, 127, 95);">//File&nbsp;file3&nbsp;=&nbsp;new&nbsp;File(RePathTest.class.getResource(&quot;/<span style="text-decoration: underline;">mytest</span>/file3.<span style="text-decoration: underline;">txt</span>&quot;).getFile());</span></span></div><div><span style="font-size: 12pt; color: windowtext; font-family: Consolas;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgb(63, 127, 95);">//File&nbsp;file3&nbsp;=&nbsp;new&nbsp;File(RePathTest.class.getClassLoader().getResource(&quot;<span style="text-decoration: underline;">mytest</span>/file3.<span style="text-decoration: underline;">txt</span>&quot;).getFile());</span></span></div><div><span style="font-size: 12pt; color: windowtext; font-family: Consolas;">&nbsp;&nbsp;&nbsp;&nbsp;</span></div><div><span style="font-size: 12pt; color: windowtext; font-family: Consolas;">&nbsp;&nbsp;&nbsp;&nbsp;FileReader&nbsp;<span style="color: rgb(106, 62, 62);">fr</span>&nbsp;=&nbsp;<span style=" color: rgb(127, 0, 85);"><strong>new</strong></span>&nbsp;FileReader(<span style="color: rgb(106, 62, 62);">file3</span>);</span></div><div><span style="font-size: 12pt; color: windowtext; font-family: Consolas;">&nbsp;&nbsp;&nbsp;&nbsp;BufferedReader&nbsp;<span style="color: rgb(106, 62, 62);">br</span>&nbsp;=&nbsp;<span style=" color: rgb(127, 0, 85);"><strong>new</strong></span>&nbsp;BufferedReader(<span style="color: rgb(106, 62, 62);">fr</span>);</span></div><div><span style="font-size: 12pt; color: windowtext; font-family: Consolas;">&nbsp;&nbsp;&nbsp;&nbsp;<span style=" color: rgb(127, 0, 85);"><strong>try</strong></span>&nbsp;{</span></div><div><span style="font-size: 12pt; color: windowtext; font-family: Consolas;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;<span style="color: rgb(106, 62, 62);">line</span>&nbsp;=&nbsp;<span style="color: rgb(106, 62, 62);">br</span>.readLine();</span></div><div><span style="font-size: 12pt; color: windowtext; font-family: Consolas;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=" color: rgb(127, 0, 85);"><strong>while</strong></span>&nbsp;(<span style="color: rgb(106, 62, 62);">line</span>&nbsp;!=&nbsp;<span style=" color: rgb(127, 0, 85);"><strong>null</strong></span>)&nbsp;{</span></div><div><span style="font-size: 12pt; color: windowtext; font-family: Consolas;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.<span style="  color: rgb(0, 0, 192);"><strong><em>out</em></strong></span>.print(<span style="color: rgb(106, 62, 62);">line</span>);</span></div><div><span style="font-size: 12pt; color: windowtext; font-family: Consolas;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgb(106, 62, 62);">line</span>&nbsp;=&nbsp;<span style="color: rgb(106, 62, 62);">br</span>.readLine();</span></div><div><span style="font-size: 12pt; color: windowtext; font-family: Consolas;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="font-size: 12pt; color: windowtext; font-family: Consolas;">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span style=" color: rgb(127, 0, 85);"><strong>catch</strong></span>&nbsp;(IOException&nbsp;<span style="color: rgb(106, 62, 62);">e</span>)&nbsp;{</span></div><div><span style="font-size: 12pt; color: windowtext; font-family: Consolas;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgb(106, 62, 62);">e</span>.printStackTrace();</span></div><div><span style="font-size: 12pt; color: windowtext; font-family: Consolas;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="font-size: 12pt; color: windowtext; font-family: Consolas;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgb(63, 127, 95);">//File&nbsp;file4&nbsp;=&nbsp;new&nbsp;File(RePathTest.class.getResource(&quot;/file4.<span style="text-decoration: underline;">txt</span>&quot;).getFile());</span></span></div><div><span style="font-size: 12pt; color: windowtext; font-family: Consolas;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgb(63, 127, 95);">//File&nbsp;file4&nbsp;=&nbsp;new&nbsp;File(RePathTest.class.getClassLoader().getResource(&quot;file4.<span style="text-decoration: underline;">txt</span>&quot;).getFile());</span></span></div><div><span style="font-size: 12pt; color: windowtext; font-family: Consolas;">&nbsp;&nbsp;&nbsp;&nbsp;</span></div><div><span style="font-size: 12pt; color: windowtext; font-family: Consolas;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><span style="font-size: 12pt; color: windowtext; font-family: Consolas;">}</span>&nbsp;&nbsp;<span style="color: windowtext; font-size: 12pt; font-family: Consolas;"><br /></span></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><span style="color: windowtext; font-size: 12pt; font-family: Consolas;"><br /></span></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><span style="color: windowtext; font-size: 12pt; font-family: Consolas;">参考：</span></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><a target=_blank href="http://blog.163.com/ygm0104@126/blog/static/1697674882011112045456653/">http://blog.163.com/ygm0104@126/blog/static/1697674882011112045456653/</a></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><a target=_blank href="http://www.cnblogs.com/javayuer/archive/2011/01/02/1924192.html">http://www.cnblogs.com/javayuer/archive/2011/01/02/1924192.html</a></div>
            <div>
                作者：youxin2012 发表于2015/3/2 14:46:27 <a href="http://blog.csdn.net/youxin2012/article/details/44018097">原文链接</a>
            </div>
            <div>
            阅读：429 评论：0 <a href="http://blog.csdn.net/youxin2012/article/details/44018097#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]tomcat 热加载]]></title>
        <link>http://blog.csdn.net/youxin2012/article/details/43703579</link>
        <guid>http://blog.csdn.net/youxin2012/article/details/43703579</guid>
        <author>youxin2012</author>
        <pubDate>2015/2/10 15:21:15</pubDate>
        <description><![CDATA[
            <p>近期在servlet开发。由于servlet在tomcat中的生命周期问题（请查阅其他文档），导致调试过程很不方便。 <br>
修改后的文件，无法在servlet中重新加载（重启tomcat当然可以，效率是个问题），解决方法是采用 热部署 和 热加载，两者在调试过程中各有自己的优缺点。 <br>
此处以热加载，描述下tomcat中的配置。 <br>
修改文件：apache-tomcat/conf/server.xml <br>
修改内容：标签中添加 如下  标签 <br>
以下是我的配置：</p>



<pre class="prettyprint"><code class=" hljs lua">&lt;Context <span class="hljs-built_in">debug</span>=<span class="hljs-string">"0"</span> path=<span class="hljs-string">"/mytest"</span> docBase=<span class="hljs-string">"D:/apache-tomcat-8.0.15/webapps/mytest"</span> reloadable=<span class="hljs-string">"true"</span>/&gt;</code></pre>

<p>其中 <br>
debug：表示log中记录异常的控制等级，数值越大，记录越详细。 <br>
path：访问目录              此例即  127.0.0.1/mytest/ <br>
docBase：项目目录       可以为绝对路径（注意 ‘/’ 方向），也可以为相对路径（相对 webapps ，此例 docBase=”/mytest”） <br>
reloadable：字面意思可看出，是否加载新的class文件，实现热加载。</p>

<p>重启tomcat，完成配置。</p>
            <div>
                作者：youxin2012 发表于2015/2/10 15:21:15 <a href="http://blog.csdn.net/youxin2012/article/details/43703579">原文链接</a>
            </div>
            <div>
            阅读：666 评论：0 <a href="http://blog.csdn.net/youxin2012/article/details/43703579#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]java中equals与==的对比]]></title>
        <link>http://blog.csdn.net/youxin2012/article/details/42877061</link>
        <guid>http://blog.csdn.net/youxin2012/article/details/42877061</guid>
        <author>youxin2012</author>
        <pubDate>2015/1/19 18:55:57</pubDate>
        <description><![CDATA[
            <span style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;">==</span><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;">（1）用于 基本类型（int, float等）的比较时，<span style="font-size: 10.5pt; line-height: 1.5;">返回数值&nbsp;<span style="color:#ff0000;">意义/大小</span>&nbsp;是否相同的结果</span></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;">（2）用于对象比较时（Interger，String, 库对象、自定义对象等），返回 两对象&nbsp;<span style="color:#ff0000;">地址</span>是否相同的结果</div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><br /></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;">equals</div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;">（1）不能用于基本类型，只能作为对象的方法被调用</div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;">（2）java中所有对象继承于Object对象， 其中Object 的 equals 表示 两个对象的地址空间是否相同，</div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;">所以如果 子类未覆盖equals方法，则继承Object的equals&nbsp;</div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;">如下自定义类 &nbsp;B，未覆盖equals，所以返回结果为两个对象的地址空间是否相同。</div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><div><pre class="prettyprint linenums prettyprinted" style="font-size: 13px; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word; background-color: rgb(247, 247, 249); padding: 10px; border: 1px solid rgb(225, 225, 232); tab-size: 4; box-shadow: rgb(251, 251, 252) 40px 0px 0px inset, rgb(236, 236, 240) 41px 0px 0px inset;"><div class="linenums" style="color: rgb(30, 52, 123); margin-top: 0px; margin-bottom: 0px; padding-left: 0px;"><div class="L0" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="kwd" style="color: rgb(30, 52, 123);">class</span><span class="pln" style="color: rgb(72, 72, 76);"> B </span><span class="pun" style="color: rgb(147, 161, 161);">{</span></code></div><div class="L1" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="pln" style="color: rgb(72, 72, 76);">&nbsp; &nbsp; </span><span class="kwd" style="color: rgb(30, 52, 123);">private</span><span class="pln" style="color: rgb(72, 72, 76);"> </span><span class="typ" style="color: teal;">int</span><span class="pln" style="color: rgb(72, 72, 76);"> num</span><span class="pun" style="color: rgb(147, 161, 161);">;</span></code></div><div class="L2" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="pln" style="color: rgb(72, 72, 76);">&nbsp; &nbsp; B</span><span class="pun" style="color: rgb(147, 161, 161);">()</span><span class="pln" style="color: rgb(72, 72, 76);"> </span><span class="pun" style="color: rgb(147, 161, 161);">{</span></code></div><div class="L3" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="pln" style="color: rgb(72, 72, 76);">&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; num </span><span class="pun" style="color: rgb(147, 161, 161);">=</span><span class="pln" style="color: rgb(72, 72, 76);"> </span><span class="lit" style="color: rgb(25, 95, 145);">1</span><span class="pun" style="color: rgb(147, 161, 161);">;</span></code></div><div class="L4" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="pln" style="color: rgb(72, 72, 76);">&nbsp; &nbsp;&nbsp;</span><span class="pun" style="color: rgb(147, 161, 161);">}</span></code></div><div class="L5" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="pun" style="color: rgb(147, 161, 161);">}</span></code></div><div class="L6" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="pln" style="color: rgb(72, 72, 76);">B a </span><span class="pun" style="color: rgb(147, 161, 161);">=</span><span class="pln" style="color: rgb(72, 72, 76);"> </span><span class="kwd" style="color: rgb(30, 52, 123);">new</span><span class="pln" style="color: rgb(72, 72, 76);"> B</span><span class="pun" style="color: rgb(147, 161, 161);">();</span></code></div><div class="L7" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="pln" style="color: rgb(72, 72, 76);">B b </span><span class="pun" style="color: rgb(147, 161, 161);">=</span><span class="pln" style="color: rgb(72, 72, 76);"> </span><span class="kwd" style="color: rgb(30, 52, 123);">new</span><span class="pln" style="color: rgb(72, 72, 76);"> B</span><span class="pun" style="color: rgb(147, 161, 161);">();</span></code></div><div class="L8" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="typ" style="color: teal;">System</span><span class="pun" style="color: rgb(147, 161, 161);">.</span><span class="pln" style="color: rgb(72, 72, 76);">out</span><span class="pun" style="color: rgb(147, 161, 161);">.</span><span class="pln" style="color: rgb(72, 72, 76);">println</span><span class="pun" style="color: rgb(147, 161, 161);">(</span><span class="pln" style="color: rgb(72, 72, 76);">a</span><span class="pun" style="color: rgb(147, 161, 161);">.</span><span class="pln" style="color: rgb(72, 72, 76);">equals</span><span class="pun" style="color: rgb(147, 161, 161);">(</span><span class="pln" style="color: rgb(72, 72, 76);">b</span><span class="pun" style="color: rgb(147, 161, 161);">));</span><span class="com" style="color: rgb(147, 161, 161);">//false</span></code></div></div></pre></div><div><br /></div></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;">但java中一些类在实现时覆盖了equals方法，如String</div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;">String 中 equals 表示两个 String 对象所存储字段（字面意义）是否相同</div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><div><pre class="prettyprint linenums prettyprinted" style="font-size: 13px; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word; background-color: rgb(247, 247, 249); padding: 10px; border: 1px solid rgb(225, 225, 232); tab-size: 4; box-shadow: rgb(251, 251, 252) 40px 0px 0px inset, rgb(236, 236, 240) 41px 0px 0px inset;"><div class="linenums" style="color: rgb(30, 52, 123); margin-top: 0px; margin-bottom: 0px; padding-left: 0px;"><div class="L0" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="typ" style="color: teal;">String</span><span class="pln" style="color: rgb(72, 72, 76);"> str_a </span><span class="pun" style="color: rgb(147, 161, 161);">=</span><span class="pln" style="color: rgb(72, 72, 76);"> </span><span class="kwd" style="color: rgb(30, 52, 123);">new</span><span class="pln" style="color: rgb(72, 72, 76);"> </span><span class="typ" style="color: teal;">String</span><span class="pun" style="color: rgb(147, 161, 161);">(</span><span class="str" style="color: rgb(221, 17, 68);">&quot;abc&quot;</span><span class="pun" style="color: rgb(147, 161, 161);">);</span></code></div><div class="L1" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="typ" style="color: teal;">String</span><span class="pln" style="color: rgb(72, 72, 76);"> str_b </span><span class="pun" style="color: rgb(147, 161, 161);">=</span><span class="pln" style="color: rgb(72, 72, 76);"> </span><span class="kwd" style="color: rgb(30, 52, 123);">new</span><span class="pln" style="color: rgb(72, 72, 76);"> </span><span class="typ" style="color: teal;">String</span><span class="pun" style="color: rgb(147, 161, 161);">(</span><span class="str" style="color: rgb(221, 17, 68);">&quot;abc&quot;</span><span class="pun" style="color: rgb(147, 161, 161);">);</span></code></div><div class="L2" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="typ" style="color: teal;">System</span><span class="pun" style="color: rgb(147, 161, 161);">.</span><span class="pln" style="color: rgb(72, 72, 76);">out</span><span class="pun" style="color: rgb(147, 161, 161);">.</span><span class="pln" style="color: rgb(72, 72, 76);">println</span><span class="pun" style="color: rgb(147, 161, 161);">(</span><span class="pln" style="color: rgb(72, 72, 76);">str_a</span><span class="pun" style="color: rgb(147, 161, 161);">.</span><span class="pln" style="color: rgb(72, 72, 76);">equals</span><span class="pun" style="color: rgb(147, 161, 161);">(</span><span class="pln" style="color: rgb(72, 72, 76);">str_b</span><span class="pun" style="color: rgb(147, 161, 161);">));</span><span class="pln" style="color: rgb(72, 72, 76);"> </span><span class="com" style="color: rgb(147, 161, 161);">//true</span></code></div><div class="L3" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="typ" style="color: teal;">System</span><span class="pun" style="color: rgb(147, 161, 161);">.</span><span class="pln" style="color: rgb(72, 72, 76);">out</span><span class="pun" style="color: rgb(147, 161, 161);">.</span><span class="pln" style="color: rgb(72, 72, 76);">println</span><span class="pun" style="color: rgb(147, 161, 161);">(</span><span class="pln" style="color: rgb(72, 72, 76);">str_a</span><span class="pun" style="color: rgb(147, 161, 161);">==</span><span class="pln" style="color: rgb(72, 72, 76);">str_b</span><span class="pun" style="color: rgb(147, 161, 161);">);</span><span class="pln" style="color: rgb(72, 72, 76);"> </span><span class="com" style="color: rgb(147, 161, 161);">// false</span></code></div></div></pre></div></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;">而StringBuffer并未覆盖 equals方法，采用继承自Object的equals</div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><div><pre class="prettyprint linenums prettyprinted" style="font-size: 13px; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word; background-color: rgb(247, 247, 249); padding: 10px; border: 1px solid rgb(225, 225, 232); tab-size: 4; box-shadow: rgb(251, 251, 252) 40px 0px 0px inset, rgb(236, 236, 240) 41px 0px 0px inset;"><div class="linenums" style="color: rgb(30, 52, 123); margin-top: 0px; margin-bottom: 0px; padding-left: 0px;"><div class="L0" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="typ" style="color: teal;">StringBuffer</span><span class="pln" style="color: rgb(72, 72, 76);"> sb1 </span><span class="pun" style="color: rgb(147, 161, 161);">=</span><span class="pln" style="color: rgb(72, 72, 76);"> </span><span class="kwd" style="color: rgb(30, 52, 123);">new</span><span class="pln" style="color: rgb(72, 72, 76);"> </span><span class="typ" style="color: teal;">StringBuffer</span><span class="pun" style="color: rgb(147, 161, 161);">(</span><span class="str" style="color: rgb(221, 17, 68);">&quot;a&quot;</span><span class="pun" style="color: rgb(147, 161, 161);">);</span></code></div><div class="L1" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="typ" style="color: teal;">StringBuffer</span><span class="pln" style="color: rgb(72, 72, 76);"> sb2 </span><span class="pun" style="color: rgb(147, 161, 161);">=</span><span class="pln" style="color: rgb(72, 72, 76);"> </span><span class="kwd" style="color: rgb(30, 52, 123);">new</span><span class="pln" style="color: rgb(72, 72, 76);"> </span><span class="typ" style="color: teal;">StringBuffer</span><span class="pun" style="color: rgb(147, 161, 161);">(</span><span class="str" style="color: rgb(221, 17, 68);">&quot;a&quot;</span><span class="pun" style="color: rgb(147, 161, 161);">);</span></code></div><div class="L2" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="typ" style="color: teal;">System</span><span class="pun" style="color: rgb(147, 161, 161);">.</span><span class="pln" style="color: rgb(72, 72, 76);">out</span><span class="pun" style="color: rgb(147, 161, 161);">.</span><span class="pln" style="color: rgb(72, 72, 76);">println</span><span class="pun" style="color: rgb(147, 161, 161);">(</span><span class="pln" style="color: rgb(72, 72, 76);">sb1</span><span class="pun" style="color: rgb(147, 161, 161);">.</span><span class="pln" style="color: rgb(72, 72, 76);">equals</span><span class="pun" style="color: rgb(147, 161, 161);">(</span><span class="pln" style="color: rgb(72, 72, 76);">sb2</span><span class="pun" style="color: rgb(147, 161, 161);">));</span><span class="pln" style="color: rgb(72, 72, 76);"> </span><span class="com" style="color: rgb(147, 161, 161);">//false</span></code></div><div class="L3" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="typ" style="color: teal;">System</span><span class="pun" style="color: rgb(147, 161, 161);">.</span><span class="pln" style="color: rgb(72, 72, 76);">out</span><span class="pun" style="color: rgb(147, 161, 161);">.</span><span class="pln" style="color: rgb(72, 72, 76);">println</span><span class="pun" style="color: rgb(147, 161, 161);">(</span><span class="pln" style="color: rgb(72, 72, 76);">sb1</span><span class="pun" style="color: rgb(147, 161, 161);">==</span><span class="pln" style="color: rgb(72, 72, 76);">sb2</span><span class="pun" style="color: rgb(147, 161, 161);">);</span><span class="pln" style="color: rgb(72, 72, 76);"> </span><span class="com" style="color: rgb(147, 161, 161);">// false</span></code></div></div></pre></div></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;"><div>自定义类中重新定义equals方法<br /></div><div><pre class="prettyprint linenums prettyprinted" style="font-size: 13px; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word; background-color: rgb(247, 247, 249); padding: 10px; border: 1px solid rgb(225, 225, 232); tab-size: 4; box-shadow: rgb(251, 251, 252) 40px 0px 0px inset, rgb(236, 236, 240) 41px 0px 0px inset;"><div class="linenums" style="color: rgb(30, 52, 123); margin-top: 0px; margin-bottom: 0px; padding-left: 0px;"><div class="L0" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="kwd" style="color: rgb(30, 52, 123);">class</span><span class="pln" style="color: rgb(72, 72, 76);"> A </span><span class="pun" style="color: rgb(147, 161, 161);">{</span></code></div><div class="L1" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="pln" style="color: rgb(72, 72, 76);">&nbsp;&nbsp;&nbsp; </span><span class="kwd" style="color: rgb(30, 52, 123);">private</span><span class="pln" style="color: rgb(72, 72, 76);"> </span><span class="typ" style="color: teal;">int</span><span class="pln" style="color: rgb(72, 72, 76);"> a</span><span class="pun" style="color: rgb(147, 161, 161);">;</span></code></div><div class="L2" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="pln" style="color: rgb(72, 72, 76);">&nbsp;&nbsp;&nbsp; A</span><span class="pun" style="color: rgb(147, 161, 161);">()</span><span class="pln" style="color: rgb(72, 72, 76);"> </span><span class="pun" style="color: rgb(147, 161, 161);">{</span></code></div><div class="L3" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="pln" style="color: rgb(72, 72, 76);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a </span><span class="pun" style="color: rgb(147, 161, 161);">=</span><span class="pln" style="color: rgb(72, 72, 76);"> </span><span class="lit" style="color: rgb(25, 95, 145);">1</span><span class="pun" style="color: rgb(147, 161, 161);">;</span></code></div><div class="L4" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="pln" style="color: rgb(72, 72, 76);">&nbsp;&nbsp;&nbsp; </span><span class="pun" style="color: rgb(147, 161, 161);">}</span></code></div><div class="L5" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="pln" style="color: rgb(72, 72, 76);">&nbsp;&nbsp;&nbsp; </span><span class="kwd" style="color: rgb(30, 52, 123);">public</span><span class="pln" style="color: rgb(72, 72, 76);"> boolean equals</span><span class="pun" style="color: rgb(147, 161, 161);">(</span><span class="pln" style="color: rgb(72, 72, 76);">A b</span><span class="pun" style="color: rgb(147, 161, 161);">)</span><span class="pln" style="color: rgb(72, 72, 76);"> </span><span class="pun" style="color: rgb(147, 161, 161);">{</span></code></div><div class="L6" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="pln" style="color: rgb(72, 72, 76);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="kwd" style="color: rgb(30, 52, 123);">if</span><span class="pln" style="color: rgb(72, 72, 76);"> </span><span class="pun" style="color: rgb(147, 161, 161);">(</span><span class="pln" style="color: rgb(72, 72, 76);">a </span><span class="pun" style="color: rgb(147, 161, 161);">==</span><span class="pln" style="color: rgb(72, 72, 76);"> b</span><span class="pun" style="color: rgb(147, 161, 161);">.</span><span class="pln" style="color: rgb(72, 72, 76);">a</span><span class="pun" style="color: rgb(147, 161, 161);">)</span></code></div><div class="L7" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="pln" style="color: rgb(72, 72, 76);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="kwd" style="color: rgb(30, 52, 123);">return</span><span class="pln" style="color: rgb(72, 72, 76);"> </span><span class="kwd" style="color: rgb(30, 52, 123);">true</span><span class="pun" style="color: rgb(147, 161, 161);">;</span></code></div><div class="L8" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="pln" style="color: rgb(72, 72, 76);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="kwd" style="color: rgb(30, 52, 123);">else</span></code></div><div class="L9" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="pln" style="color: rgb(72, 72, 76);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="kwd" style="color: rgb(30, 52, 123);">return</span><span class="pln" style="color: rgb(72, 72, 76);"> </span><span class="kwd" style="color: rgb(30, 52, 123);">false</span><span class="pun" style="color: rgb(147, 161, 161);">;</span></code></div><div class="L0" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="pln" style="color: rgb(72, 72, 76);">&nbsp;&nbsp;&nbsp; </span><span class="pun" style="color: rgb(147, 161, 161);">}</span></code></div><div class="L1" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="pun" style="color: rgb(147, 161, 161);">}</span></code></div><div class="L2" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="pln" style="color: rgb(72, 72, 76);">A a </span><span class="pun" style="color: rgb(147, 161, 161);">=</span><span class="pln" style="color: rgb(72, 72, 76);"> </span><span class="kwd" style="color: rgb(30, 52, 123);">new</span><span class="pln" style="color: rgb(72, 72, 76);"> A</span><span class="pun" style="color: rgb(147, 161, 161);">();</span></code></div><div class="L3" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="pln" style="color: rgb(72, 72, 76);">A b </span><span class="pun" style="color: rgb(147, 161, 161);">=</span><span class="pln" style="color: rgb(72, 72, 76);"> </span><span class="kwd" style="color: rgb(30, 52, 123);">new</span><span class="pln" style="color: rgb(72, 72, 76);"> A</span><span class="pun" style="color: rgb(147, 161, 161);">();</span></code></div><div class="L4" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="typ" style="color: teal;">System</span><span class="pun" style="color: rgb(147, 161, 161);">.</span><span class="pln" style="color: rgb(72, 72, 76);">out</span><span class="pun" style="color: rgb(147, 161, 161);">.</span><span class="pln" style="color: rgb(72, 72, 76);">println</span><span class="pun" style="color: rgb(147, 161, 161);">(</span><span class="pln" style="color: rgb(72, 72, 76);">a</span><span class="pun" style="color: rgb(147, 161, 161);">.</span><span class="pln" style="color: rgb(72, 72, 76);">equals</span><span class="pun" style="color: rgb(147, 161, 161);">(</span><span class="pln" style="color: rgb(72, 72, 76);">b</span><span class="pun" style="color: rgb(147, 161, 161);">));</span><span class="pln" style="color: rgb(72, 72, 76);"> </span><span class="com" style="color: rgb(147, 161, 161);">//true</span></code></div><div class="L5" style="color: rgb(190, 190, 197); line-height: 18px; padding-left: 0px; list-style-type: none;"><code class="language-c" style="font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; word-wrap: break-word;"><span class="typ" style="color: teal;">System</span><span class="pun" style="color: rgb(147, 161, 161);">.</span><span class="pln" style="color: rgb(72, 72, 76);">out</span><span class="pun" style="color: rgb(147, 161, 161);">.</span><span class="pln" style="color: rgb(72, 72, 76);">println</span><span class="pun" style="color: rgb(147, 161, 161);">(</span><span class="pln" style="color: rgb(72, 72, 76);">a </span><span class="pun" style="color: rgb(147, 161, 161);">==</span><span class="pln" style="color: rgb(72, 72, 76);"> b</span><span class="pun" style="color: rgb(147, 161, 161);">);</span><span class="pln" style="color: rgb(72, 72, 76);"> &nbsp; &nbsp;</span><span class="com" style="color: rgb(147, 161, 161);">//false</span></code></div></div></pre></div></div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;">结论：如此可见 equals的意义取决于该对象中 对equals是否覆盖，以及覆盖后的意义。</div><div style="font-family: 'Microsoft YaHei UI', 'Microsoft YaHei', SimSun, 'Segoe UI', Tahoma, Helvetica, sans-serif, 'Microsoft YaHei', Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; line-height: 21px;">ps：类定义时，常常需要根据自身需要覆盖 &nbsp;toString, equals等方法。</div>
            <div>
                作者：youxin2012 发表于2015/1/19 18:55:57 <a href="http://blog.csdn.net/youxin2012/article/details/42877061">原文链接</a>
            </div>
            <div>
            阅读：406 评论：0 <a href="http://blog.csdn.net/youxin2012/article/details/42877061#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]JDBC编程小结]]></title>
        <link>http://blog.csdn.net/youxin2012/article/details/42497379</link>
        <guid>http://blog.csdn.net/youxin2012/article/details/42497379</guid>
        <author>youxin2012</author>
        <pubDate>2015/1/7 18:14:42</pubDate>
        <description><![CDATA[
            <div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;"><strong>(1) JDBC API调用流程</strong>：</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;"><br /></div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;"><strong>1. 加载驱动</strong></div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">String driveName = &quot;com.mysql.jdbc.Driver&quot;; &nbsp;// mysql</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">Class.forName(driveName);</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;"><br /></div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">2. 利用 DriverManager&nbsp;<strong>获取 Connection对象</strong>（数据库连接对象，代表一个物理连接）</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">Connection conn = DriverManager.getConnection(url, user, pass);</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;"><br /></div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">3.&nbsp;<strong>获取数据库连接</strong></div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">生成Statement / PrepareStatement / CallableStatement 对象</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">Statement st = conn.createStatement();</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;"><br /></div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">PrepareStatement pst = conn.prepareStatement(sql); &nbsp;// 将SQL语句进行预编译，返回预编译的Statement对象</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">sql = &quot;insert into student_table value(4, ?)&quot;;</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;"><br /></div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">c cst = conn.prepareCall(sql); // 返回对象，用于调用存储过程</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">sql = &quot;{call add_pro(?, ?, ?)}&quot;;</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">注：该存储过程创建如下</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">delimiter //</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">create procedure add_pro (a int, b int, out sum int)</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">begin</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">set sum = a+b;</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">end;</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">//</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;"><br /></div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">4.&nbsp;<strong>执行SQL</strong>，结果集ResultSet</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;"><strong>Statement</strong></div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">ResultSet rset = cst.executeUpdate(sql); &nbsp;&nbsp;DDL --&gt; 0 &nbsp;| &nbsp;DML --&gt; 返回受影响的行数</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.execute(sql) &nbsp; &nbsp; &nbsp; &nbsp; bool &nbsp; &nbsp;ResultSet--&gt;true &nbsp; &nbsp;空/受影响行数 --&gt; false&nbsp;</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.executeQuery(sql) &nbsp; &nbsp; ResultSet</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;"><br /></div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;"><strong>PrepareStatement</strong></div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">pst.setInt(1, 3);// 向第一个?中 赋值3</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">pst.executeUpdate();</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;"><br /></div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;"><strong>CallableStatement</strong></div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">cst.setInt(1, 4);</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">cst.setInt(2, 5);</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">cst.registerOutParameter(3, Type.INTERGER);// 注册CallableStatement的第三个参数为int类型</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">cst.execute();</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;"><br /></div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;"><strong>(2). 连接池进行数据库操作</strong></div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">目标：上述方式 通过DriverManager创建数据库连接完成 操作，一次数据库连接对应一个物理连接，频繁的建立与关闭 造成性能下降。 连接池 建立多个连接，起始处于空闲，来请求时进行响应，在完成对 一个连接请求的响应后 不关闭物理连接，使其空闲，从而实现对物理连接的复用。</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">JDBC数据库连接池由 javax.sql.DataSource来表示，其中DataSource为接口，由厂商实现。</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;"><br /></div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">常见数据库连接池：</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">1. Druid &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">2. C3P0</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">3. DBCP</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">4. JNDI</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">等</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;"><br /></div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">使用大致流程：</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">DBCP</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">创建数据源对象</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">BasicDateSource ds = new BasicDataSource();</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">ds.<span style="color:#FF4635;">setDriverClassName</span>(&quot;com.mysql.jdbc.Driver&quot;);</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">ds.<span style="color:#FF0000;">setUrl</span>(&quot;jdbc:mysql://localhost:3306/db_name&quot;);</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">ds.setUsername(&quot;root&quot;);</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">...</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">ds.setInitialSize(6);</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">....</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">利用 数据源获取 数据库连接</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">Connection conn = ds.getConnection() ; // 此后操作同上</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">....</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">释放数据库连接（将数据库连接释放，归还连接池，物理连接并未关闭）</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">conn.close();</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;"><br /></div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">C3P0</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">ComboPooledDataSource ds = new&nbsp;ComboPooledDataSource();</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">ds.<span style="color:#FF4635;">setDriverClass</span>(&quot;com.mysql.jdbc.Driver&quot;);</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">ds.<span style="color:#FF4635;">setJdbcUrl</span>(&quot;jdbc:mysql://localhost:3306/db_name&quot;); // 方法名与上述略微不同</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">...</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">利用 数据源获取 数据库连接</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">Connection conn = ds.getConnection() ; // 此后操作同上</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">....</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">释放数据库连接（将数据库连接释放，归还连接池，物理连接并未关闭）</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">conn.close();</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;"><br /></div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;">其中上述连接池中&nbsp; Druid 为阿里巴巴开源项目，目前性能最好的。对比数据参考：</div><div style="font-family: 微软雅黑; orphans: 2; text-align: -webkit-auto; widows: 2;font-size:14px;"><a target=_blank href="https://github.com/alibaba/druid/wiki/Benchmark_aliyun">https://github.com/alibaba/druid/wiki/Benchmark_aliyun</a></div><br /></div>
            <div>
                作者：youxin2012 发表于2015/1/7 18:14:42 <a href="http://blog.csdn.net/youxin2012/article/details/42497379">原文链接</a>
            </div>
            <div>
            阅读：487 评论：0 <a href="http://blog.csdn.net/youxin2012/article/details/42497379#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]3Sum--leetcode]]></title>
        <link>http://blog.csdn.net/youxin2012/article/details/41722049</link>
        <guid>http://blog.csdn.net/youxin2012/article/details/41722049</guid>
        <author>youxin2012</author>
        <pubDate>2014/12/4 11:57:45</pubDate>
        <description><![CDATA[
            <p></p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;">Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.<br />Note:</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;">Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)<br />The solution set must not contain duplicate triplets.<br />&nbsp; &nbsp; For example, given array S = {-1 0 1 2 -1 -4},<br />&nbsp; &nbsp; A solution set is:<br />&nbsp; &nbsp; (-1, 0, 1)<br />&nbsp; &nbsp; (-1, -1, 2)<br /></p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;">思路：先确定一个数字，后两个数字用夹逼方式来扫描实现。通过判断并去重</p><p></p><pre code_snippet_id="541774" snippet_file_name="blog_20141204_1_8382456"  code_snippet_id="541774" snippet_file_name="blog_20141204_1_8382456" name="code" class="cpp">class Solution {
public:
    vector&lt;vector&lt;int&gt; &gt; threeSum(vector&lt;int&gt; &amp;num) {
        vector&lt;vector&lt;int&gt; &gt; result;
        if(num.size() &lt; 3)
            return result;
            
        sort(num.begin(), num.end());
        const int target = 0;
        
        int a,b,c;
        int last_index = num.size() - 2;
        for(a = 0; a &lt; last_index; ++a)
        {
            b = a + 1;
            c = num.size() - 1;
            if((a != 0)&amp;&amp;(num[a-1] == num[a]))//去重
                continue;
            while(b &lt; c)
            {
                if((num[a] + num[b] + num[c]) &lt; target)
                    ++b;
                else if((num[a] + num[b] + num[c]) &gt; target)
                    --c;
                else{
                    if((b != (a+1))&amp;&amp;(num[b-1] == num[b])){
                        ++b;
                        continue;
                    }    
                    if((c != (num.size()-1))&amp;&amp;(num[c] == num[c+1])){ //去重
                        --c;
                        continue;
                    }    
                    result.push_back({num[a], num[b], num[c]});
                    ++b;
                    --c;
                }
            }
        }
        
        return result;
    }
};</pre><br /><br /><p></p>
            <div>
                作者：youxin2012 发表于2014/12/4 11:57:45 <a href="http://blog.csdn.net/youxin2012/article/details/41722049">原文链接</a>
            </div>
            <div>
            阅读：536 评论：0 <a href="http://blog.csdn.net/youxin2012/article/details/41722049#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]Insertion Sort List --leetcode]]></title>
        <link>http://blog.csdn.net/youxin2012/article/details/41620279</link>
        <guid>http://blog.csdn.net/youxin2012/article/details/41620279</guid>
        <author>youxin2012</author>
        <pubDate>2014/11/30 9:14:27</pubDate>
        <description><![CDATA[
            <p>思路：创建一辅助节点，作为生成链表的头结点（不含有效数据）。遍历原链表中每一个节点，并将其插入到新链表的对应位置</p><p><pre name="code" class="cpp">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *insertionSortList(ListNode *head) {
        ListNode *dump = new ListNode(0);
        if(head == NULL || head-&gt;next == NULL)
            return head;
        ListNode *prev = dump;
        ListNode *cur = head;
        ListNode *tmp;
        while(cur)
        {
            prev = dump;
            while((prev-&gt;next != NULL)&amp;&amp;(prev-&gt;next-&gt;val &lt; cur-&gt;val))//找到一点，在该点之后插入
                prev= prev-&gt;next;
            tmp = cur-&gt;next;
            cur-&gt;next = prev-&gt;next;
            prev-&gt;next = cur;
            cur = tmp;
        }
        return dump-&gt;next;
    }
};</pre><br /><br /></p>
            <div>
                作者：youxin2012 发表于2014/11/30 9:14:27 <a href="http://blog.csdn.net/youxin2012/article/details/41620279">原文链接</a>
            </div>
            <div>
            阅读：657 评论：0 <a href="http://blog.csdn.net/youxin2012/article/details/41620279#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]Remove Nth Node From End of List -- leetcode]]></title>
        <link>http://blog.csdn.net/youxin2012/article/details/41593005</link>
        <guid>http://blog.csdn.net/youxin2012/article/details/41593005</guid>
        <author>youxin2012</author>
        <pubDate>2014/11/29 9:17:36</pubDate>
        <description><![CDATA[
            <p>几个测试用例：</p><p>1. n &gt; len</p><p>2. n = len ,删除首部</p><p><pre name="code" class="cpp">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *removeNthFromEnd(ListNode *head, int n) {
        if(head==NULL || n&lt;1)
            return head;
        
        ListNode addHead(-1);
        addHead.next = head;
        ListNode *fast = &amp;addHead;
        ListNode *slow = &amp;addHead;
        
        for(int i = 0; (i &lt; n)&amp;&amp;fast; i++)//此处用n,让fast slow保持n个间隔，slow-&gt;next 为所需删除的元素
            fast = fast-&gt;next;
            
        if(fast == NULL)// n &gt; len
            return head;
            
        while(fast-&gt;next)
        {
            fast = fast-&gt;next;
            slow = slow-&gt;next;
        }
        ListNode *tmp = slow-&gt;next;
        slow-&gt;next = slow-&gt;next-&gt;next;
        delete tmp;
        return addHead.next;
    }    
};</pre><br /><br /></p>
            <div>
                作者：youxin2012 发表于2014/11/29 9:17:36 <a href="http://blog.csdn.net/youxin2012/article/details/41593005">原文链接</a>
            </div>
            <div>
            阅读：368 评论：0 <a href="http://blog.csdn.net/youxin2012/article/details/41593005#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]Search in Rotated Sorted Array--leetcode]]></title>
        <link>http://blog.csdn.net/youxin2012/article/details/41576717</link>
        <guid>http://blog.csdn.net/youxin2012/article/details/41576717</guid>
        <author>youxin2012</author>
        <pubDate>2014/11/28 14:46:23</pubDate>
        <description><![CDATA[
            <p>Suppose a sorted array is rotated at some pivot unknown to you beforehand.</p><p>(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).<br />You are given a target value to search. If found in the array return its index, otherwise return -1.<br />You may assume no duplicate exists in the array.</p><p><pre name="code" class="cpp">class Solution {
public:
    int search(int A[], int n, int target) {
        int left = 0;
        int right = n-1;
        while(left &lt;= right)//left,right均为 mid +/- 1,存在交错，满足退出条件
        {
            int mid = (left+right)/2;
            if(target == A[mid])
                return mid;
            if(A[left] &lt;= A[mid])//mid 在左侧 较大的区间
            {
                if((A[left] &lt;= target)&amp;&amp;(target &lt; A[mid])) //target != A[mid] 上式以排除。target在左侧递增区间
                    right = mid - 1; //target != A[mid],可以让right = mid -1
                else//化为原型式
                    left = mid + 1;// 用mid+1, 存在 left&lt;=mid,  target != A[mid],所以可用left = mid + 1
            }
            else {//mid在右侧区间
                if((A[mid] &lt; target)&amp;&amp;(target &lt;= A[right]))
                    left = mid + 1;
                else//化为原型式
                    right = mid - 1;
            }
        }
        return -1;
    }
};</pre><br /><br /></p><p><br /></p>
            <div>
                作者：youxin2012 发表于2014/11/28 14:46:23 <a href="http://blog.csdn.net/youxin2012/article/details/41576717">原文链接</a>
            </div>
            <div>
            阅读：511 评论：0 <a href="http://blog.csdn.net/youxin2012/article/details/41576717#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]Merge k Sorted Lists -- leetcode]]></title>
        <link>http://blog.csdn.net/youxin2012/article/details/41550475</link>
        <guid>http://blog.csdn.net/youxin2012/article/details/41550475</guid>
        <author>youxin2012</author>
        <pubDate>2014/11/27 18:25:13</pubDate>
        <description><![CDATA[
            <p>Merge k Sorted Lists<br />Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.<br /></p><p>两种实现方法，第一种采用优先队列，第二种采用分治</p><p><pre code_snippet_id="535139" snippet_file_name="blog_20141127_1_8067545"  name="code" class="cpp">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    /**
     * use priority_queue
    class mycomparison
    {
    public:
        bool operator() (ListNode* lhs, ListNode* rhs)
        {
                return (lhs-&gt;val &gt; rhs-&gt;val);
        }
    };
    
    ListNode *mergeKLists(vector&lt;ListNode*&gt; &amp;lists) {
        
        priority_queue&lt;ListNode*, vector&lt;ListNode *&gt;, mycomparison&gt;  queue;
        for(int i = 0; i &lt; lists.size(); i++){
            if(lists[i] != NULL)
                queue.push(lists[i]);
        }
        
        ListNode* head =NULL;
        ListNode* prev = NULL;
        while(!queue.empty())    
        {
            ListNode* tmp = queue.top();
            queue.pop();
            if(!prev)
            {
                head = tmp;
                prev = tmp;
            }
            else
            {
                prev-&gt;next= tmp;
                prev = tmp;
            }
            if(tmp-&gt;next)
                queue.push(tmp-&gt;next);
            
        }
        return head;
    }
    */
    //use divide and conquer algorithm
    //merge two list
    ListNode* Merge(ListNode* list1, ListNode* list2)
    {
        ListNode* head = NULL;
        if(list1 == NULL)
            return list2;
        if(list2 == NULL)
            return list1;
        if(list1-&gt;val &lt; list2-&gt;val){
            head = list1;
            head-&gt;next = Merge(list1-&gt;next, list2);
        }    
        else{
            head = list2;
            head-&gt;next = Merge(list1, list2-&gt;next);
        }
        return head;
    }
    ListNode* MergeCore(vector&lt;ListNode*&gt; &amp;lists, int left, int right)
    {
        if(left &lt; right)
        {
            int mid = (right+left)/2;
            return Merge(MergeCore(lists, left, mid), MergeCore(lists, mid+1, right));
        }
        else if(left == right)
            return lists[left];
        return NULL;    
    }
    ListNode *mergeKLists(vector&lt;ListNode*&gt; &amp;lists) {
        if(lists.size() &lt;= 0)
            return NULL;
        return MergeCore(lists, 0, lists.size()-1);
    }
};</pre><br /><br /></p><p><br /></p>
            <div>
                作者：youxin2012 发表于2014/11/27 18:25:13 <a href="http://blog.csdn.net/youxin2012/article/details/41550475">原文链接</a>
            </div>
            <div>
            阅读：593 评论：0 <a href="http://blog.csdn.net/youxin2012/article/details/41550475#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]链表反转（递归与非递归实现）]]></title>
        <link>http://blog.csdn.net/youxin2012/article/details/39030779</link>
        <guid>http://blog.csdn.net/youxin2012/article/details/39030779</guid>
        <author>youxin2012</author>
        <pubDate>2014/9/3 17:57:56</pubDate>
        <description><![CDATA[
            <p>复习一下链表反转</p><p>分别用递归的方法和非递归的方法实现。</p><p>链表反转中通过借助辅助参数，可以用两个指针完成反转&nbsp;Node* Reverse2Point(List* head)</p><p><pre name="code" class="cpp">#include &lt;stdio.h&gt;
#include &lt;malloc.h&gt;

typedef int ElemType;
typedef struct Node {
	int data;
	struct Node* next;
}Node, *List;
//用数组arr来初始化链表中数据；此例中链表无头点
int InitList(List *list, ElemType* arr, int num)
{
	int i= 0;
	Node* tail_node; 
	Node* tmp_node;
	*list =(List)malloc(sizeof(Node));
	if(NULL == *list)
		return;
	(*list)-&gt;data = arr[i];
	(*list)-&gt;next = NULL;
	tail_node = *list;
	for(i = 1; i &lt; num; i++) {
		tmp_node = (Node*)malloc(sizeof(Node));
		if(NULL == tmp_node)
			return;
		tmp_node-&gt;data = arr[i];
	        tmp_node-&gt;next = NULL;
		tail_node-&gt;next = tmp_node;
		tail_node = tmp_node;	
	}
}	

void TraveseList(List list)
{
	Node* tmp_node;
	if(NULL == list)
		return;
	tmp_node = list;
	while(tmp_node) {
		printf(&quot;%d &quot;, tmp_node-&gt;data);
		tmp_node = tmp_node-&gt;next;
	}
	printf(&quot;\n&quot;);
}

void ReverseList(List* list)
{
	Node* p_pre = NULL;
	Node* p_cur = NULL;
	Node* p_nxt = NULL;
	if(NULL == list)
		return;
	p_cur = (*list)-&gt;next;
	p_pre = *list;
	p_pre-&gt;next = NULL;
	while(p_cur) {
		p_nxt = p_cur-&gt;next;
		p_cur-&gt;next = p_pre;
		p_pre = p_cur;
		p_cur = p_nxt;
	}
	*list = p_pre;
}

Node* Reverse2Point(List* head) 
{
	Node* p_cur = NULL;
	Node* p_nxt = NULL;
	if(NULL == *head)
		return;
	p_cur = (*head)-&gt;next;
	(*head)-&gt;next = NULL;
	while(p_cur) {
		p_nxt = p_cur-&gt;next;
		p_cur-&gt;next = *head;
		*head = p_cur;
		p_cur = p_nxt;
	}
}
//递归实现反转，返回反转后的链表头
//原理同上述非递归方法，反转当前节点和该节点的指针（反转前分别保存当前节点和该节点的下一个节点，以便完成后续节点相同的操作--通过递归完成）
Node* Reverse(Node* p_cur, Node* p_pre)
{
	if(NULL == p_cur-&gt;next) {
		p_cur-&gt;next = p_pre;
		return p_cur;
	}
	else {
		Node *p_nxt = p_cur-&gt;next;
		p_cur-&gt;next = p_pre;
		Reverse(p_nxt, p_cur);
	}
}

int main()
{
	List head;
	Node* tmp;
	int array[] = {3, 5, 7, 8, 2};
	InitList(&amp;head, array, 5);
	TraveseList(head);
	printf(&quot;reverse list:&quot;);
	ReverseList(&amp;head);
	TraveseList(head);
	printf(&quot;reverse list:&quot;);
	head = Reverse(head, NULL);
	TraveseList(head);
	printf(&quot;reverse list:&quot;);
	Reverse2Point(&amp;head);
	TraveseList(head);
	return 0;
}
</pre><br /><br /></p><br /><br /><p></p>
            <div>
                作者：youxin2012 发表于2014/9/3 17:57:56 <a href="http://blog.csdn.net/youxin2012/article/details/39030779">原文链接</a>
            </div>
            <div>
            阅读：1129 评论：0 <a href="http://blog.csdn.net/youxin2012/article/details/39030779#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]虚拟存储器--虚拟地址与物理地址]]></title>
        <link>http://blog.csdn.net/youxin2012/article/details/39026535</link>
        <guid>http://blog.csdn.net/youxin2012/article/details/39026535</guid>
        <author>youxin2012</author>
        <pubDate>2014/9/3 13:52:26</pubDate>
        <description><![CDATA[
            <p>计算机在运行程序时，需将代码加载入内存中，CPU读取内存中的代码并执行。</p><p>早期的计算机在没有引入 虚拟存储器之前，需将整个待运行的程序加载到内存中，因为内存空间有限，当待加载的程序过大时就会出现问题（多进程，则需要占用更多的内存空间）。</p><p>现代计算机引入虚拟存储器的概念，通过将对内存进行抽象，将其作为存储在硬盘上数据的高速缓存，只将当前进程部分代码缓存到主存中（当前进程的程序较少时，可以全部缓存在主存中），从而提高了主存的利用率，使其同时可以容纳更多的进程同时运行。</p><p>简述<br />虚拟存储器是一个抽象概念，它为每个进程提供一个假象，即每个进程都在独立的使用主存。<br />每个进程看到的是一致的存储器，称为虚拟地址空间。<br />地址空间最上面的区域是为操作系统中的代码和数据保留的，对所有的进程一样。底部存放用户进程定义的代码和数据。<br />进程的虚拟地址空间如下图：</p><p><img src="http://img.blog.csdn.net/20140903134905835?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveW91eGluMjAxMg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" /><br /></p><p>虚拟存储器是对主存的的一种抽象，基本思想：把一个进程虚拟存储器的数据存储在磁盘中，用主存作磁盘的缓存。即虚拟地址空间维护的是 磁盘中的数据，通过将要使用的数据缓存在主存中，使操作系统误以为数据一直在主存中（其实，只是在需要是在被缓存在主存中，如果长时间不需要则可能被swap出主存，存在磁盘中。ps：没有VM概念之前，运行的程序必须全部存储在主存中，引入之后，只需保证此时正被执行的代码在主存中即可。VM大大提高了，主存的利用率，是同时可以有更多的进程可以运行）。<br /><br /><br /><br /><br />寻址方式：物理和虚拟寻址<br />早期通过 物理寻址的方式访问主存，即主存中每个字节有一个唯一的物理地址，通过该物理地址，寻找该字节。<br />现在操作系统，通过虚拟寻址。CPU通过一个 虚拟地址来访问主存，该地址在访问主存之前被转换为一个物理地址。其中，转换过程由 位于CPU中的MMU单元，通过访问存储在主存中的页表完成。<br /><br /><br />地址空间的概念<br />线性地址空间：地址空间的数据是连续的<br />物理地址空间<br />虚拟地址空间<br />主存中每一个字节都有一个选自物理地址空间的物理地址和一个选自虚拟地址空间的虚拟地址。<br /><br /><br />数据映射：虚拟存储器与物理存储器中间的数据传输<br />虚拟存储器 (VM) 被组织为一个由存在在磁盘上的N个连续的字节大小单元组成的数组。每个字节都有一个唯一的虚拟地址作为到数组的索引。<br />磁盘上的内容被缓存在主存中。通过将地址空间的数据进行分块，利用块大小作为磁盘和主存之间的传输单元。其中，VM系统将VM（指被虚拟化的磁盘）分割为称为虚拟页（virtual page ）大小的块，物理存储器（指主存）被分割为称为物理页（也成为页帧）大小的块。物理页与虚拟页等大，通常为4k, 从而完成数据映射。<br />虚拟存储器将主存作为缓存：<br /></p><p><img src="http://img.blog.csdn.net/20140903134723890?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveW91eGluMjAxMg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" /><br /></p><p>VM需要判断一个虚拟页是否被缓存在DRAM中；如果是，需确定存在哪个物理页中。<br />如果不命中，需判断这个虚拟页存在磁盘的哪个位置，在物理存储器中选择一个牺牲页，将虚拟页从磁盘拷贝到DRAM中，并替换该牺牲页，如果该牺牲页数据发生了改变，则需要将该牺牲页写回磁盘。 该过程称为swap。<br /><br /><br />上述功能有操作系统，MMU，以及存放在物理存储器中的页表（每一个进程都有一个页表，用于完成 虚拟地址到物理地址的映射）来完成。<br /></p><p><img src="http://img.blog.csdn.net/20140903135016924?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveW91eGluMjAxMg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" /><br /></p><p>页命中与缺页<br />即物理地址指数据在主存中的真实地址，虚拟地址是对主存的一种抽象，将存储在磁盘的数据，缓存在主存上。<br /><br /><br />页命中<br />CPU通过虚拟地址读取在VP2中的虚拟存储器中的数据（通过地址翻译将虚拟地址作为一个索引定位到PTE2，读取VP2相关信息），VP2被缓存在DRAM中，使用PTE中的物理存储器地址（该地址指向PP1缓存页的起始地址），构造这个字的物理地址。<br /></p><p><img src="http://img.blog.csdn.net/20140903135107359?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveW91eGluMjAxMg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" /><br /></p><p>缺页<br />DRAM缓存不命中称为缺页，触发缺页异常，调用内核中的缺页异常处理程序。在磁盘和存储器之间传送页的活动称之为交换（swapping）或页面调度.<br /></p><p><img src="http://img.blog.csdn.net/20140903134911578?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveW91eGluMjAxMg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" /><br /></p><p><img src="http://img.blog.csdn.net/20140903135146219?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveW91eGluMjAxMg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" /><br /></p><p><br /></p>
            <div>
                作者：youxin2012 发表于2014/9/3 13:52:26 <a href="http://blog.csdn.net/youxin2012/article/details/39026535">原文链接</a>
            </div>
            <div>
            阅读：1138 评论：1 <a href="http://blog.csdn.net/youxin2012/article/details/39026535#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]vim  20条常用指令]]></title>
        <link>http://blog.csdn.net/youxin2012/article/details/38980533</link>
        <guid>http://blog.csdn.net/youxin2012/article/details/38980533</guid>
        <author>youxin2012</author>
        <pubDate>2014/9/1 15:24:16</pubDate>
        <description><![CDATA[
            
1. &nbsp;w [文件名] &nbsp; &nbsp;相当于另存为<br>
2. &nbsp;r [文件名] &nbsp;将[文件名]的内容加到光标行后面<br>
3. &nbsp;n1,n2 w[filename] 将n1到n2的内容保存为[filename]<br>
4. &nbsp;50dd &nbsp; &nbsp; &nbsp;删除50行 &nbsp; &nbsp; 5x &nbsp;删除5个字符<br>
5. &nbsp;20下 &nbsp; &nbsp; &nbsp;向下移动20行 &nbsp;<br>
6. &nbsp;50G &nbsp; &nbsp; &nbsp; &nbsp;移动到第50行 &nbsp;&nbsp;<br>
7. &nbsp;20右 &nbsp; &nbsp; &nbsp;向右移动20位<br>
8. &nbsp;/word &nbsp; &nbsp; 查找word字符串<br>
9. &nbsp;文本替换<br>
&nbsp;:50,100s/man/MAN/g &nbsp; &nbsp; &nbsp;将50到100行之间的man 替换为MAN<br>
:s/str1/str2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 替换当前行第一个 str1 为 str2 &nbsp; &nbsp; &nbsp; -- &nbsp;s 代表当前行<br>
:s/str1/str2/g &nbsp; &nbsp; &nbsp; 替换当前行中所有 str1 为 str2 &nbsp; &nbsp; &nbsp; -- &nbsp;s 代表当前行 &nbsp; &nbsp;g表示 该行所有 global<br>
:m,ns/str1/str2 &nbsp; &nbsp; 替换第 n 行开始到最后一行中每一行的第一个 str1 为 str2<br>
:m,ns/str1/str2/g 替换第 n 行开始到最后一行中所有的 str1 为 str2<br>
:%s/str1/str2/g &nbsp; &nbsp;替换文中所有 str1 为 str2<br>
<br>
10. u &nbsp; &nbsp;恢复<br>
11. nyy &nbsp;复制 n行 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;p 粘贴<br>
12. gg &nbsp;第一行 &nbsp; &nbsp; G最后一行<br>
&nbsp;<br>
13.：Tlist 打开函数列表 &nbsp;ctrl &#43; ww 完成窗口切换， &nbsp; 关闭同样 Tlist<br>
复制 删除 &nbsp;块操作<br>
v &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 字符选择<br>
V &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 行选择<br>
ctrl&#43;v &nbsp; &nbsp; &nbsp;块选择<br>
y 复制 &nbsp; p 粘贴 &nbsp; &nbsp; &nbsp; &nbsp;d 删除<br>
&nbsp;<br>
14. 同时 打开多个文本<br>
先打开一个， 命令行 &nbsp;sp自身的分开&nbsp;<br>
sp [filename] &nbsp;再分开一个<br>
Ctrl&#43;w&#43; 上/下 &nbsp; 切换窗口&nbsp;<br>
退出 分别 q<br>
&nbsp;<br>
vim file1 file2<br>
:n<br>
:N 来后文件翻页&nbsp;<br>
:f &nbsp;显示当前正在编辑的文档名称<br>
<br>
15. vim全选并复制 &nbsp;/删除<br>
全部删除：按esc后，然后dG<br>
全部复制：按esc后，然后ggyG<br>
&nbsp;<br>
16. &nbsp;vim多行缩进技巧<br>
&nbsp;关键字: vim indent<br>
按 v 进入visual状态，选择多行，用 '&gt;'或'&lt; '缩进或缩出<br>
&nbsp;<br>
17、显示 TAB 键 &nbsp;（方便在 python 中对 table 个数的观察）<br>
&nbsp;文件中有 TAB 键的时候，你是看不见的。要把它显示出来：<br>
:set list<br>
现在 TAB 键显示为 ^I，而 $显示在每行的结尾，以便你能找到可能会被你忽略的空白字符在哪里。<br>
&nbsp;<br>
更改：<br>
使用 ‘listchars’ 选项：<br>
:set listchars=tab:&gt;-,trail:-<br>
现在，TAB会被显示成 &quot;&gt;—&quot; 而行尾多余的空白字符显示成 &quot;-&quot;。<br>
&nbsp;<br>
18. &nbsp;vim 多行注释与 取消注释<br>
&nbsp;<br>
:20,30s/^/# &nbsp;第20到30行用 # 注释掉。 &nbsp; 也可以用别的字符<br>
:20,30s/^#// &nbsp;取消注释<br>
对//或/* 可以用替换 &nbsp;:20,30s/\/\// &nbsp; 用/ (空) 替换 \\ ( \/\/ 中有两个专业符'\')<br>
:4,10s/^[^I ]\&#43;// 去掉行首的空白字符<br>
用 . 表示当前行。<br>
: . ,30 s/^/#<br>
可以看到 vim 命令针对当前行，在前面加个范围就可以针对多行。<br>
:co 12<br>
把当前行 copy 到行 12 的地方。<br>
<br>
19. 上述方法二<br>
多行添加注释<br>
1). ctrl&#43;v &nbsp;visual block模式，选中注释行<br>
2). 大写I，插入注释符，例如//<br>
3). 按esc键就会全部注释了<br>
<br>
<br>
取消多行注释<br>
1). ctrl&#43;v &nbsp;visual block模式,，选中删除列<br>
2).d 删除该列即可<br>
<br>
<br>
20. vim中调用shell命令<br>
<br>
:!command<br>
不退出vim，并执行shell命令command，将命令输出显示在vim的命令区域，不会改变当前编辑的文件的内容<br>
例：<br>
1) :r !command<br>
将shell命令command的结果插入到当前行的下一行<br>
<br>
:r !date&nbsp;<br>
读取系统时间并插入到当前行的下一行。<br>
<br>
<br>
2) 起始行号,结束行号 !command<br>
将起始行号和结束行号指定的范围中的内容输入到shell命令command处理，并将处理结果替换起始行号和结束行号指定的范围中的内容<br>
例如 &nbsp;:62,72 !sort，将62行到72行的内容进行排序<br>
<p>:62 !tr [a-z] [A-Z]，将62行的小写字母转为大写字母</p>
<p><br>
</p>
3):起始行号,结束行号 w !command<br>
将起始行号和结束行号所指定的范围的内容作为命令command的输入。不会改变当前编辑的文件的内容<br>
例 &nbsp; &nbsp;:62,72 w !sort，将62行到72行的内容进行排序，但排序的结果并不会直接输出到当前编辑的文件中，而是显示在vim敲命令的区域<br>
<br>
&nbsp;<br>
&nbsp;

            <div>
                作者：youxin2012 发表于2014/9/1 15:24:16 <a href="http://blog.csdn.net/youxin2012/article/details/38980533">原文链接</a>
            </div>
            <div>
            阅读：998 评论：0 <a href="http://blog.csdn.net/youxin2012/article/details/38980533#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]TCP校验和计算原理与实现]]></title>
        <link>http://blog.csdn.net/youxin2012/article/details/38872835</link>
        <guid>http://blog.csdn.net/youxin2012/article/details/38872835</guid>
        <author>youxin2012</author>
        <pubDate>2014/8/27 16:39:31</pubDate>
        <description><![CDATA[
            
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
<span style="font-size:10.5pt; line-height:1.5">1. 概述</span></div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
<span style="font-size:10.5pt; line-height:1.5">TCP首部校验和计算三部分：TCP首部&#43;TCP数据&#43;TCP伪首部。</span></div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
<span style="font-size:10.5pt; line-height:1.5"><br>
</span></div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
TCP校验和覆盖TCP首部和TCP数据，而IP首部中的校验和只覆盖IP的首部，不覆盖IP数据报中的任何数据。</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
<br>
</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
伪首部是为了增加TCP校验和的检错能力：如检查TCP报文是否收错了(目的IP地址)、传输层协议是否选对了(传输层协议号)等。伪首部来自IP首部。</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
<br>
</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
<div>RFC 793的TCP校验和定义</div>
<div>The checksum field is the 16 bit one's complement of the one's complement sum of all 16-bit words in the header and text.</div>
<div>If a segment contains an odd number of header and text octets to be checksummed, the last octet is padded on the right</div>
<div>with zeros to form a 16-bit word for checksum purposes. The pad is not transmitted as part of the segment. While computing</div>
<div>the checksum, the checksum field itself is replaced with zeros.</div>
<div>&nbsp;</div>
<div>上述的定义说得很明确：</div>
<div>首先，把伪首部、TCP报头、TCP数据分为16位的字，如果总长度为奇数个字节，则在最后增添一个位都为0的字节。</div>
<div>把TCP报头中的校验和字段置为0。</div>
<div>其次，用反码相加法累加所有的16位字（<span style="color:#ff0000">进位也要累加</span>）。</div>
<div>最后，将上述结果作为TCP的校验和。</div>
</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
<br>
</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
验证示例：</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
<span style="font-size:10.5pt; line-height:1.5">校验和 &nbsp;反码求和过程</span></div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
以4bit 为例</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
发送端计算：</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
数据：&nbsp;&nbsp; 1000&nbsp; 0100&nbsp;&nbsp; 校验和&nbsp; 0000</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
则反码：0111&nbsp; 1011&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1111</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
叠加： &nbsp; 0111&#43;1011&#43;1111 = 0010 0001&nbsp;&nbsp; 高于4bit的， 叠加到低4位&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0001 &#43; 0010 = 0011 即为校验和</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
&nbsp;</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
接收端计算：</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
数据：&nbsp; 1000&nbsp;&nbsp; 0100&nbsp;&nbsp; 检验和&nbsp; 0011</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
反码：&nbsp; 0111&nbsp;&nbsp; 1011&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1100</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
叠加：&nbsp; 0111 &#43; 1011 &#43;1100 = 0001 1110&nbsp; 叠加为4bit为1111.&nbsp;&nbsp; 全为1，则正确</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
<br>
</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
2. &nbsp;校验和反码求和 &nbsp;的实现</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
<div>发送方：原码相加 ，并将高位叠加到低位，取反 ，得到反码求和结果，放入校验和</div>
<div>接收方：将所有原码 相加，高位叠加， 如全为1，则正确 &nbsp;</div>
</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
<div>代码如下：</div>
<div>
<div>
<pre class="prettyprint linenums prettyprinted" style="font-size:13px; font-family:Consolas,'Liberation Mono',Menlo,Courier,monospace; word-wrap:break-word; background-color:rgb(247,247,249); padding:10px; border:1px solid rgb(225,225,232)"><div class="linenums" style="color:rgb(30,52,123); margin-top:0px; margin-bottom:0px; padding-left:0px"><div class="L0" style="color:rgb(190,190,197); line-height:18px; padding-left:0px; list-style-type:none"><code class="language-c" style="font-family:Consolas,'Liberation Mono',Menlo,Courier,monospace; word-wrap:break-word"><span class="pln" style="color:rgb(72,72,76)">&nbsp;&nbsp;&nbsp; USHORT checksum </span><span class="pun" style="color:rgb(147,161,161)">(</span><span class="pln" style="color:rgb(72,72,76)">USHORT </span><span class="pun" style="color:rgb(147,161,161)">*</span><span class="pln" style="color:rgb(72,72,76)">buffer</span><span class="pun" style="color:rgb(147,161,161)">,</span><span class="typ" style="color:teal">int</span><span class="pln" style="color:rgb(72,72,76)"> size</span><span class="pun" style="color:rgb(147,161,161)">)</span></code></div><div class="L1" style="color:rgb(190,190,197); line-height:18px; padding-left:0px; list-style-type:none"><code class="language-c" style="font-family:Consolas,'Liberation Mono',Menlo,Courier,monospace; word-wrap:break-word"><span class="pln" style="color:rgb(72,72,76)">&nbsp;&nbsp;&nbsp; </span><span class="pun" style="color:rgb(147,161,161)">{</span></code></div><div class="L2" style="color:rgb(190,190,197); line-height:18px; padding-left:0px; list-style-type:none"><code class="language-c" style="font-family:Consolas,'Liberation Mono',Menlo,Courier,monospace; word-wrap:break-word"><span class="pln" style="color:rgb(72,72,76)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="typ" style="color:teal">Unsigned</span><span class="pln" style="color:rgb(72,72,76)"> </span><span class="kwd" style="color:rgb(30,52,123)">long</span><span class="pln" style="color:rgb(72,72,76)"> cksum</span><span class="pun" style="color:rgb(147,161,161)">=</span><span class="lit" style="color:rgb(25,95,145)">0</span><span class="pun" style="color:rgb(147,161,161)">;</span></code></div><div class="L3" style="color:rgb(190,190,197); line-height:18px; padding-left:0px; list-style-type:none"><code class="language-c" style="font-family:Consolas,'Liberation Mono',Menlo,Courier,monospace; word-wrap:break-word"><span class="pln" style="color:rgb(72,72,76)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="typ" style="color:teal">While</span><span class="pln" style="color:rgb(72,72,76)"> </span><span class="pun" style="color:rgb(147,161,161)">(</span><span class="pln" style="color:rgb(72,72,76)">size</span><span class="pun" style="color:rgb(147,161,161)">&gt;</span><span class="lit" style="color:rgb(25,95,145)">1</span><span class="pun" style="color:rgb(147,161,161)">)</span></code></div><div class="L4" style="color:rgb(190,190,197); line-height:18px; padding-left:0px; list-style-type:none"><code class="language-c" style="font-family:Consolas,'Liberation Mono',Menlo,Courier,monospace; word-wrap:break-word"><span class="pln" style="color:rgb(72,72,76)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="pun" style="color:rgb(147,161,161)">{</span></code></div><div class="L5" style="color:rgb(190,190,197); line-height:18px; padding-left:0px; list-style-type:none"><code class="language-c" style="font-family:Consolas,'Liberation Mono',Menlo,Courier,monospace; word-wrap:break-word"><span class="pln" style="color:rgb(72,72,76)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="typ" style="color:teal">Cksum</span><span class="pln" style="color:rgb(72,72,76)"> </span><span class="pun" style="color:rgb(147,161,161)">&#43;=*</span><span class="pln" style="color:rgb(72,72,76)">buffer</span><span class="pun" style="color:rgb(147,161,161)">&#43;&#43;;</span></code></div><div class="L6" style="color:rgb(190,190,197); line-height:18px; padding-left:0px; list-style-type:none"><code class="language-c" style="font-family:Consolas,'Liberation Mono',Menlo,Courier,monospace; word-wrap:break-word"><span class="pln" style="color:rgb(72,72,76)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; size </span><span class="pun" style="color:rgb(147,161,161)">-=</span><span class="kwd" style="color:rgb(30,52,123)">sizeof</span><span class="pun" style="color:rgb(147,161,161)">(</span><span class="pln" style="color:rgb(72,72,76)">USHORT</span><span class="pun" style="color:rgb(147,161,161)">);</span></code></div><div class="L7" style="color:rgb(190,190,197); line-height:18px; padding-left:0px; list-style-type:none"><code class="language-c" style="font-family:Consolas,'Liberation Mono',Menlo,Courier,monospace; word-wrap:break-word"><span class="pln" style="color:rgb(72,72,76)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="pun" style="color:rgb(147,161,161)">}</span></code></div><div class="L8" style="color:rgb(190,190,197); line-height:18px; padding-left:0px; list-style-type:none"><code class="language-c" style="font-family:Consolas,'Liberation Mono',Menlo,Courier,monospace; word-wrap:break-word"><span class="pln" style="color:rgb(72,72,76)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="typ" style="color:teal">If</span><span class="pln" style="color:rgb(72,72,76)"> </span><span class="pun" style="color:rgb(147,161,161)">(</span><span class="pln" style="color:rgb(72,72,76)">size</span><span class="pun" style="color:rgb(147,161,161)">)</span></code></div><div class="L9" style="color:rgb(190,190,197); line-height:18px; padding-left:0px; list-style-type:none"><code class="language-c" style="font-family:Consolas,'Liberation Mono',Menlo,Courier,monospace; word-wrap:break-word"><span class="pln" style="color:rgb(72,72,76)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="pun" style="color:rgb(147,161,161)">{</span></code></div><div class="L0" style="color:rgb(190,190,197); line-height:18px; padding-left:0px; list-style-type:none"><code class="language-c" style="font-family:Consolas,'Liberation Mono',Menlo,Courier,monospace; word-wrap:break-word"><span class="pln" style="color:rgb(72,72,76)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="typ" style="color:teal">Cksum</span><span class="pln" style="color:rgb(72,72,76)"> </span><span class="pun" style="color:rgb(147,161,161)">&#43;=*(</span><span class="pln" style="color:rgb(72,72,76)">UCHAR </span><span class="pun" style="color:rgb(147,161,161)">*)</span><span class="pln" style="color:rgb(72,72,76)"> buffer</span><span class="pun" style="color:rgb(147,161,161)">;</span></code></div><div class="L1" style="color:rgb(190,190,197); line-height:18px; padding-left:0px; list-style-type:none"><code class="language-c" style="font-family:Consolas,'Liberation Mono',Menlo,Courier,monospace; word-wrap:break-word"><span class="pln" style="color:rgb(72,72,76)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="pun" style="color:rgb(147,161,161)">}</span></code></div><div class="L2" style="color:rgb(190,190,197); line-height:18px; padding-left:0px; list-style-type:none"><code class="language-c" style="font-family:Consolas,'Liberation Mono',Menlo,Courier,monospace; word-wrap:break-word"><span class="pln" style="color:rgb(72,72,76)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="com" style="color:rgb(147,161,161)">//将32位转换为16位</span></code></div><div class="L3" style="color:rgb(190,190,197); line-height:18px; padding-left:0px; list-style-type:none"><code class="language-c" style="font-family:Consolas,'Liberation Mono',Menlo,Courier,monospace; word-wrap:break-word"><span class="pln" style="color:rgb(72,72,76)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="typ" style="color:teal">While</span><span class="pln" style="color:rgb(72,72,76)"> </span><span class="pun" style="color:rgb(147,161,161)">(</span><span class="pln" style="color:rgb(72,72,76)">cksum</span><span class="pun" style="color:rgb(147,161,161)">&gt;&gt;</span><span class="lit" style="color:rgb(25,95,145)">16</span><span class="pun" style="color:rgb(147,161,161)">)</span></code></div><div class="L4" style="color:rgb(190,190,197); line-height:18px; padding-left:0px; list-style-type:none"><code class="language-c" style="font-family:Consolas,'Liberation Mono',Menlo,Courier,monospace; word-wrap:break-word"><span class="pln" style="color:rgb(72,72,76)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="typ" style="color:teal">Cksum</span><span class="pln" style="color:rgb(72,72,76)"> </span><span class="pun" style="color:rgb(147,161,161)">=</span><span class="pln" style="color:rgb(72,72,76)"> </span><span class="pun" style="color:rgb(147,161,161)">(</span><span class="pln" style="color:rgb(72,72,76)">cksum</span><span class="pun" style="color:rgb(147,161,161)">&gt;&gt;</span><span class="lit" style="color:rgb(25,95,145)">16</span><span class="pun" style="color:rgb(147,161,161)">)</span><span class="pln" style="color:rgb(72,72,76)"> </span><span class="pun" style="color:rgb(147,161,161)">&#43;</span><span class="pln" style="color:rgb(72,72,76)"> </span><span class="pun" style="color:rgb(147,161,161)">(</span><span class="pln" style="color:rgb(72,72,76)">cksum </span><span class="pun" style="color:rgb(147,161,161)">&amp;</span><span class="pln" style="color:rgb(72,72,76)"> </span><span class="lit" style="color:rgb(25,95,145)">0xffff</span><span class="pun" style="color:rgb(147,161,161)">);</span></code></div><div class="L5" style="color:rgb(190,190,197); line-height:18px; padding-left:0px; list-style-type:none"><code class="language-c" style="font-family:Consolas,'Liberation Mono',Menlo,Courier,monospace; word-wrap:break-word"><span class="pln" style="color:rgb(72,72,76)">&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd" style="color:rgb(30,52,123)">return</span><span class="pln" style="color:rgb(72,72,76)"> </span><span class="pun" style="color:rgb(147,161,161)">(</span><span class="pln" style="color:rgb(72,72,76)">USHORT</span><span class="pun" style="color:rgb(147,161,161)">)</span><span class="pln" style="color:rgb(72,72,76)"> </span><span class="pun" style="color:rgb(147,161,161)">(~</span><span class="pln" style="color:rgb(72,72,76)">cksum</span><span class="pun" style="color:rgb(147,161,161)">);</span></code></div><div class="L6" style="color:rgb(190,190,197); line-height:18px; padding-left:0px; list-style-type:none"><code class="language-c" style="font-family:Consolas,'Liberation Mono',Menlo,Courier,monospace; word-wrap:break-word"><span class="pln" style="color:rgb(72,72,76)">&nbsp;&nbsp;&nbsp; </span><span class="pun" style="color:rgb(147,161,161)">}</span></code></div></div></pre>
</div>
</div>
<div>&nbsp;&nbsp;&nbsp; buffer是指向需要校验数据缓冲区的指针，size是需要检验数据的总长度(字节为单位)。</div>
<div>&nbsp; &nbsp; 4-8行代码是对数据按16bit累加求和，由于最高位的进位需要加在最低位上，所以cksum必须是32位的unsigned long型，高16bit用于保存累加过程中的进位；</div>
<div>&nbsp; &nbsp; 9-11行是对size为奇数情况的处理。</div>
<div>&nbsp;&nbsp;&nbsp; 14~15行代码的作用是将cksum高16bit的&#20540;加到低16bit上，即把累加中最高位的进位加到最低位上。这里使用了 while循环，判断cksum高16bit是否非零，因为第16行代码执行的时候，还是可能向cksum的高16bit进位。</div>
<div>&nbsp;&nbsp;&nbsp; 有些地方是通过下面两条代码实现的：</div>
<div>&nbsp;&nbsp;&nbsp; Cksum = (cksum &gt;&gt; 16) &#43; (cksum &amp; 0xffff);</div>
<div>&nbsp;&nbsp;&nbsp; Cksum = (cksum &gt;&gt; 16);</div>
<div>&nbsp;&nbsp;&nbsp; 这里只进行了两次相加，即可保证相加后cksum的高16位为0，两种方式的效果是一样，事实上，上面的循环也最多执行两次！</div>
<div>&nbsp;&nbsp;&nbsp; 16行代码即对16bit数据累加的结果取反，得到二进制反码求和的结果，然后函数返回该&#20540;。</div>
</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
<br>
</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
<div>3. Linux kernel中实现：</div>
<div>&nbsp;</div>
<div>csum为32bit ，存储原码相加的结果， 将原码高16bit叠加到低16bit，然后求反，即可得到 反码求和的结果</div>
<div>
<pre class="prettyprint linenums prettyprinted" style="font-size:13px; font-family:Consolas,'Liberation Mono',Menlo,Courier,monospace; word-wrap:break-word; background-color:rgb(247,247,249); padding:10px; border:1px solid rgb(225,225,232)"><div class="linenums" style="color:rgb(30,52,123); margin-top:0px; margin-bottom:0px; padding-left:0px"><div class="L0" style="color:rgb(190,190,197); line-height:18px; padding-left:0px; list-style-type:none"><code class="language-c" style="font-family:Consolas,'Liberation Mono',Menlo,Courier,monospace; word-wrap:break-word"><span class="kwd" style="color:rgb(30,52,123)">static</span><span class="pln" style="color:rgb(72,72,76)"> </span><span class="kwd" style="color:rgb(30,52,123)">inline</span><span class="pln" style="color:rgb(72,72,76)"> __sum16 csum_fold</span><span class="pun" style="color:rgb(147,161,161)">(</span><span class="pln" style="color:rgb(72,72,76)">__wsum csum</span><span class="pun" style="color:rgb(147,161,161)">)</span></code></div><div class="L1" style="color:rgb(190,190,197); line-height:18px; padding-left:0px; list-style-type:none"><code class="language-c" style="font-family:Consolas,'Liberation Mono',Menlo,Courier,monospace; word-wrap:break-word"><span class="pun" style="color:rgb(147,161,161)">{</span></code></div><div class="L2" style="color:rgb(190,190,197); line-height:18px; padding-left:0px; list-style-type:none"><code class="language-c" style="font-family:Consolas,'Liberation Mono',Menlo,Courier,monospace; word-wrap:break-word"><span class="pln" style="color:rgb(72,72,76)">&nbsp;&nbsp;&nbsp; u32 sum </span><span class="pun" style="color:rgb(147,161,161)">=</span><span class="pln" style="color:rgb(72,72,76)"> </span><span class="pun" style="color:rgb(147,161,161)">(</span><span class="pln" style="color:rgb(72,72,76)">__force u32</span><span class="pun" style="color:rgb(147,161,161)">)</span><span class="pln" style="color:rgb(72,72,76)">csum</span><span class="pun" style="color:rgb(147,161,161)">;</span></code></div><div class="L3" style="color:rgb(190,190,197); line-height:18px; padding-left:0px; list-style-type:none"><code class="language-c" style="font-family:Consolas,'Liberation Mono',Menlo,Courier,monospace; word-wrap:break-word"><span class="pln" style="color:rgb(72,72,76)">&nbsp;&nbsp;&nbsp; sum </span><span class="pun" style="color:rgb(147,161,161)">=</span><span class="pln" style="color:rgb(72,72,76)"> </span><span class="pun" style="color:rgb(147,161,161)">(</span><span class="pln" style="color:rgb(72,72,76)">sum </span><span class="pun" style="color:rgb(147,161,161)">&amp;</span><span class="pln" style="color:rgb(72,72,76)"> </span><span class="lit" style="color:rgb(25,95,145)">0xffff</span><span class="pun" style="color:rgb(147,161,161)">)</span><span class="pln" style="color:rgb(72,72,76)"> </span><span class="pun" style="color:rgb(147,161,161)">&#43;</span><span class="pln" style="color:rgb(72,72,76)"> </span><span class="pun" style="color:rgb(147,161,161)">(</span><span class="pln" style="color:rgb(72,72,76)">sum </span><span class="pun" style="color:rgb(147,161,161)">&gt;&gt;</span><span class="pln" style="color:rgb(72,72,76)"> </span><span class="lit" style="color:rgb(25,95,145)">16</span><span class="pun" style="color:rgb(147,161,161)">);</span><span class="pln" style="color:rgb(72,72,76)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="com" style="color:rgb(147,161,161)">//将高16 叠加到低16</span></code></div><div class="L4" style="color:rgb(190,190,197); line-height:18px; padding-left:0px; list-style-type:none"><code class="language-c" style="font-family:Consolas,'Liberation Mono',Menlo,Courier,monospace; word-wrap:break-word"><span class="pln" style="color:rgb(72,72,76)">&nbsp;&nbsp;&nbsp; sum </span><span class="pun" style="color:rgb(147,161,161)">=</span><span class="pln" style="color:rgb(72,72,76)"> </span><span class="pun" style="color:rgb(147,161,161)">(</span><span class="pln" style="color:rgb(72,72,76)">sum </span><span class="pun" style="color:rgb(147,161,161)">&amp;</span><span class="pln" style="color:rgb(72,72,76)"> </span><span class="lit" style="color:rgb(25,95,145)">0xffff</span><span class="pun" style="color:rgb(147,161,161)">)</span><span class="pln" style="color:rgb(72,72,76)"> </span><span class="pun" style="color:rgb(147,161,161)">&#43;</span><span class="pln" style="color:rgb(72,72,76)"> </span><span class="pun" style="color:rgb(147,161,161)">(</span><span class="pln" style="color:rgb(72,72,76)">sum </span><span class="pun" style="color:rgb(147,161,161)">&gt;&gt;</span><span class="pln" style="color:rgb(72,72,76)"> </span><span class="lit" style="color:rgb(25,95,145)">16</span><span class="pun" style="color:rgb(147,161,161)">);</span><span class="pln" style="color:rgb(72,72,76)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="com" style="color:rgb(147,161,161)">//将产生的进位&nbsp;&nbsp; 叠加到 低16</span></code></div><div class="L5" style="color:rgb(190,190,197); line-height:18px; padding-left:0px; list-style-type:none"><code class="language-c" style="font-family:Consolas,'Liberation Mono',Menlo,Courier,monospace; word-wrap:break-word"><span class="pln" style="color:rgb(72,72,76)">&nbsp;&nbsp;&nbsp; </span><span class="kwd" style="color:rgb(30,52,123)">return</span><span class="pln" style="color:rgb(72,72,76)"> </span><span class="pun" style="color:rgb(147,161,161)">(</span><span class="pln" style="color:rgb(72,72,76)">__force __sum16</span><span class="pun" style="color:rgb(147,161,161)">)~</span><span class="pln" style="color:rgb(72,72,76)">sum</span><span class="pun" style="color:rgb(147,161,161)">;</span><span class="pln" style="color:rgb(72,72,76)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="com" style="color:rgb(147,161,161)">//求反，&nbsp;&nbsp; 得到二进制反码求和的结果</span></code></div><div class="L6" style="color:rgb(190,190,197); line-height:18px; padding-left:0px; list-style-type:none"><code class="language-c" style="font-family:Consolas,'Liberation Mono',Menlo,Courier,monospace; word-wrap:break-word"><span class="pun" style="color:rgb(147,161,161)">}</span></code></div></div></pre>
</div>
</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
<br>
</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
其中上述csum的计算如下：</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
skb_add_data -&gt; csum_partial&nbsp;&nbsp;&nbsp;&nbsp; 计算&nbsp; 添加数据段的校验和&nbsp;，将其放置在 skb-&gt;csum 中，完成tcp数据部分计算。</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
tcp_transmit_skb（传输层统一出口函数） 为 skb添加 tcp首部，并在其中调用&nbsp; tcp_v4_send_check 来完成 tcp首部的最终校验和计算（&nbsp;tcp首部&#43;tcp数据&#43;tcp伪首部&nbsp;）。</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
&nbsp;</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
源码分析：</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
tcp_transmit_skb</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
{</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
&nbsp;&nbsp;&nbsp;&nbsp;icsk-&gt;icsk_af_ops-&gt;send_check(sk, skb-&gt;len, skb); //<span style="color:#ff0000">完成 tcp首部校验和的计算</span></div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
&nbsp;&nbsp;&nbsp;&nbsp;...</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
&nbsp;&nbsp;&nbsp;&nbsp;...</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
&nbsp;&nbsp;&nbsp;&nbsp;err = icsk-&gt;icsk_af_ops-&gt;queue_xmit(skb, 0);&nbsp; //<span style="color:#ff0000">将其发往 IP层 &nbsp; &nbsp; ip_queue_xmit</span></div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
}</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
其中&nbsp;<span style="color:#ff0000">tcp_transmit_skb</span>--&gt;<span style="color:#ff0000">icsk-&gt;icsk_af_ops-&gt;send_check</span>（<span style="color:#ff0000">tcp_v4_send_check</span>）</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
tcp_v4_send_check</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
{</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
&nbsp;&nbsp;&nbsp;&nbsp;.....&nbsp;&nbsp;&nbsp;&nbsp;
<div>&nbsp;&nbsp;&nbsp;&nbsp;th-&gt;check = tcp_v4_check(len, inet-&gt;inet_saddr, inet-&gt;inet_daddr,</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; csum_partial(th, th-&gt;doff &lt;&lt; 2, skb-&gt;csum));&nbsp; //<span style="color:#ff0000; background-color:rgb(255,255,0)">将 th首部 校验和 和 tcp数据段校验和相加</span></div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;....</div>
</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
}</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
//NETIF_F_ALL_CSUM</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
<div>static inline __sum16 tcp_v4_check(int len, __be32 saddr,</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __be32 daddr, __wsum base)</div>
<div>{</div>
<div>&nbsp;&nbsp;&nbsp; return csum_tcpudp_magic(saddr,daddr,len,IPPROTO_TCP,base);// 将tcp首部&#43;tcp数据&#43;tcp伪首部 三部分校验和相加，并将 32bit的 csum (skb-&gt;csum)，折叠计算为16bit的 check，存放在 th-&gt;check （tcp首部校验和字段）中</div>
<div><span style="color:#ff0000">即产生最终校验和</span></div>
<div>}</div>
<div>//<span style="font-size:10.5pt; line-height:1.5">对伪头 计算校验和</span></div>
<div>
<div>static inline __sum16 csum_tcpudp_magic(__be32 saddr, __be32 daddr,&nbsp;<span style="font-size:10.5pt; line-height:1.5">unsigned short len,</span></div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned short proto,&nbsp;<span style="font-size:10.5pt; line-height:1.5">__wsum sum)</span></div>
<div>{</div>
<div>&nbsp;&nbsp;&nbsp; return csum_fold(csum_tcpudp_nofold(saddr,daddr,len,proto,sum));</div>
<div>}</div>
</div>
<div><br>
</div>
<div>
<div>//将32位&#20540;的高16位折叠到低16位中，然后取反输出&#20540;，即为发送端应填入的校验和</div>
<div>
<div>static inline __sum16 csum_fold(__wsum csum)</div>
<div>{</div>
<div><span style="white-space:pre"></span>u32 sum = (__force u32)csum;</div>
<div><span style="white-space:pre"></span>sum = (sum &amp; 0xffff) &#43; (sum &gt;&gt; 16); &nbsp; &nbsp; &nbsp;//将高16 叠加到低16</div>
<div><span style="white-space:pre"></span>sum = (sum &amp; 0xffff) &#43; (sum &gt;&gt; 16); &nbsp; &nbsp; &nbsp;//将产生的进位 &nbsp; 叠加到 低16</div>
<div><span style="white-space:pre"></span>return (__force __sum16)~sum; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //求反， &nbsp;&nbsp;<span style="color:#ff0000">得到二进制反码求和的结果</span></div>
<div>}</div>
</div>
</div>
</div>

            <div>
                作者：youxin2012 发表于2014/8/27 16:39:31 <a href="http://blog.csdn.net/youxin2012/article/details/38872835">原文链接</a>
            </div>
            <div>
            阅读：1554 评论：0 <a href="http://blog.csdn.net/youxin2012/article/details/38872835#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]操作系统 内存管理机制]]></title>
        <link>http://blog.csdn.net/youxin2012/article/details/37697167</link>
        <guid>http://blog.csdn.net/youxin2012/article/details/37697167</guid>
        <author>youxin2012</author>
        <pubDate>2014/7/11 16:15:11</pubDate>
        <description><![CDATA[
            
<div>
<div><span style="font-family:Arial; font-size:14px; color:#333333"><span style="line-height:26px">参考和查阅了一下他人的资料，整理下 虚拟内存、物理内存、Swap分区、页面置换机制等基础知识</span></span></div>
<ol style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
<li><span style="font-size:10.5pt; line-height:26px; color:rgb(51,51,51); font-family:Arial"><span style="font-size:12pt">虚拟地址空间 与 物理地址空间的关系</span></span><br>
</li></ol>
</div>
<span style="font-size:14px; color:rgb(51,51,51); font-family:Arial; line-height:26px">虚拟地址由操作系统维护，由MMU可以进行转换，扩大了内存空间分页管理。</span>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
<span style="color:rgb(51,51,51); font-family:Arial; line-height:26px">大多数</span><span style="font-family:Arial; line-height:26px"><span style="color:#ff0000">使用虚拟存储器的系统</span></span><span style="color:rgb(51,51,51); font-family:Arial; line-height:26px">都使用一种称为</span><span style="font-family:Arial; line-height:26px"><span style="color:#ff0000">分页（paging）机制</span></span><span style="color:rgb(51,51,51); font-family:Arial; line-height:26px">。</span></div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
<span style="font-family:Arial; line-height:26px"><span style="color:#ff0000">虚拟地址空间</span><span style="color:#333333">划分成称为</span><strong><span style="color:#ff0000">页</span></strong><span style="color:#333333">（page）的单位，而相应的</span><span style="color:#ff0000">物理地址空间</span><span style="color:#333333">也被进行划分，单位是</span><span style="color:#ff0000">页帧</span><span style="color:#333333">(frame)，一个在磁盘，一个在内存，</span><span style="color:#ff0000">页和页桢的大小必须相同</span><span style="color:#333333">。在32位地址的机器，它的虚拟地址范围从0~0xFFFFFFFF（4G）,而这台机器只有256M的物理地址，因此他可以运行4G的程序，但该程序不能一次性调入内存运行。这台机器必须有一个达到可以存放4G程序的外部存储器（例如磁盘或是FLASH），以保证程序片段在需要时可以被调用。</span></span></div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
<span style="font-family:Arial; line-height:26px"><span style="color:#333333">在这个例子中，</span><span style="color:#ff0000">页的大小为4K （4096 B）</span><span style="color:#333333">，</span><span style="color:#ff0000">页桢大小与页相同</span><span style="color:#333333">——这点是必须保证的，因为内存和外围存储器之间的传输总是</span><span style="color:#ff0000">以页为单位</span><span style="color:#333333">的。对应4G的虚拟地址和256M的物理存储器，他们分别包含了1M个页
 和64K个页帧。</span></span></div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
<span style="color:rgb(51,51,51); font-family:Arial; line-height:26px">（</span><span style="color:rgb(51,51,51); font-family:Arial; line-height:26px; font-size:10.5pt">1M个页</span><span style="color:rgb(51,51,51); font-family:Arial; line-height:26px; font-size:10.5pt">&nbsp;:
 &nbsp;</span><span style="color:rgb(51,51,51); font-family:Arial; line-height:26px; font-size:10.5pt">1M* 4k = 2^20 * 2^2 *2 ^10 = 2^32 = 4G） &nbsp;</span></div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
<span style="color:rgb(51,51,51); font-family:Arial; line-height:26px">（64K个页帧：64k = 2^8 * 2^10 = 2^18 &nbsp;= 256M)</span></div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
<p style="color:rgb(51,51,51); font-family:Arial; line-height:26px">页表就像一个函数，输入是页号，输出是页桢，实现从页号到物理地址的映射。</p>
<p style="font-family:Arial; line-height:26px"><span style="color:rgb(51,51,51)">操作系统给</span><span style="color:#ff0000">每一个进程</span><span style="color:rgb(51,51,51)">维护一个</span><span style="color:#ff0000">页表</span><span style="color:#333333">。所以不同进程的虚拟地址可能一样。页表给出了进程中每一页所对应的页帧的位置。</span></p>
<p style="font-family:Arial; line-height:26px"><span style="color:#333333">PS：</span><span style="font-size:10.5pt; color:rgb(51,51,51); font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">“</span><a target="_blank" target="_blank" href="http://baike.baidu.com/view/976.htm" style="font-size:10.5pt; text-decoration:none; color:rgb(19,110,194); font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">虚拟内存</a><span style="font-size:10.5pt; color:rgb(51,51,51); font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">”这一技术，不但在功能上突破了</span><a target="_blank" target="_blank" href="http://baike.baidu.com/view/138684.htm" style="font-size:10.5pt; text-decoration:none; color:rgb(19,110,194); font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">物理内存</a><span style="font-size:10.5pt; color:rgb(51,51,51); font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">的限制，使程序可以操纵大于实际物理内存的空间，同时，隔离每个进程的安全保护网，使每个进程都不受其它程序的干扰。</span></p>
<p style="font-family:Arial; line-height:26px"><span style="font-size:10.5pt; color:rgb(51,51,51); font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px"><br>
</span></p>
<p style="font-family:Arial; line-height:26px"><span style="font-size:10.5pt; color:rgb(51,51,51)"><span style="font-size:12pt">2. 页面置换</span></span><br>
</p>
<p style="font-family:Arial; line-height:26px"><span style="color:rgb(51,51,51)">区分概念：虚拟内存、物理内存、Swap分区（硬盘存储区）</span></p>
<p style="font-family:Arial; line-height:26px"><span style="color:#333333">虚拟内存映射整个程序存储空间，并将当前运行的数据 通过虚拟空间 映射到 对应的物理内存上运行，物理内存不足时，将其中一部分数据交换到 硬盘交换区--swap中，当需要时，在将swap分区的内容，置换到物理内存中。</span></p>
<p style="font-family:Arial; line-height:26px"><span style="color:rgb(51,51,51)">页面置换：把一个页面从内存调换到磁盘的交换区中 (swap分区，即</span><span style="color:#ff0000">硬盘</span><span style="color:#333333">存储区的一部分)</span></p>
<p style="font-family:Arial; line-height:26px"><span style="color:rgb(51,51,51); font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px"><strong>Swap分区</strong>在系统</span><span style="font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px; font-size:10.5pt"><span style="color:#ff0000">物理内存</span></span><span style="color:rgb(51,51,51); font-size:10.5pt; font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">不够用的时候，把物理内存中的一部分空间释放出来，以供当前运行的</span><a target="_blank" target="_blank" href="http://baike.baidu.com/subview/17674/17674.htm" style="color:rgb(19,110,194); font-size:10.5pt; text-decoration:none; font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">程序</a><span style="font-size:10.5pt; font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px"><span style="color:#333333">使用。那些被释放的空间可能来自一些很长时间没有什么操作的程序，这些被释放的空间被临时保存到Swap分区中，等到那些程序要运行时，再</span><span style="color:#ff0000">从Swap分区中恢复保存的数据到</span></span><a target="_blank" target="_blank" href="http://baike.baidu.com/view/1082.htm" style="font-size:10.5pt; text-decoration:none; font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px"><span style="color:#ff0000">内存</span></a><span style="font-size:10.5pt; font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px"><span style="color:#ff0000">中</span><span style="color:#333333">。</span></span></p>
<p style="color:rgb(51,51,51); font-family:Arial; line-height:26px"><span style="font-size:10.5pt">&nbsp;抖动：在具有虚存的计算机中，由于频繁的调页活动使访问磁盘的次数过多而引起的系统效率降低的一种现象。</span><br>
</p>
<p style="font-family:Arial; line-height:26px"></p>
<p style="color:rgb(51,51,51)">例：操作系统<span style="font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px; font-size:10.5pt">同时运行多个程序，当切换到一个很长时间没有理会的程序时，会听到硬盘“哗哗”直响。这是因为这个程序的内存被那些频繁运行的程序给“偷走”了，放到了Swap区中。因此，一旦此程序被放置到前端，它就会从Swap区取回自己的数据，将其放进内存，然后接着运行。</span></p>
<p><span style="color:rgb(51,51,51); font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">并不是所有从</span><a target="_blank" target="_blank" href="http://baike.baidu.com/view/138684.htm" style="color:rgb(19,110,194); text-decoration:none; font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">物理内存</a><span style="color:rgb(51,51,51); font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">中交换出来的数据都会被放到Swap中。</span><span style="color:rgb(51,51,51); font-size:10.5pt; font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">有相当一部分数据被直接交换到文件系统。</span><span style="color:rgb(51,51,51); font-size:10.5pt; font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">例如，对文件进行读写，当需要将这些程序的内存空间交换出去时，可以直接将其放到文件里去。如果是读文件操作，那么内存数据被直接释放，不需要交换出来，因为下次需要时，可直接从文件系统恢复；如果是写文件，只需要将变化的数据保存到文件中，以便恢复。&nbsp;</span><span style="color:rgb(51,51,51); font-size:10.5pt; font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">但是那些用malloc和new函数生成的对象的数据则不同，它们需要Swap空间，因为它们在文件系统中没有相应的“储备”文件，因此被称作“匿名”(Anonymous)内存数据。这类数据还包括</span><a target="_blank" target="_blank" href="http://baike.baidu.com/view/93201.htm" style="color:rgb(19,110,194); font-size:10.5pt; text-decoration:none; font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">堆栈</a><span style="font-size:10.5pt; font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px"><span style="color:#333333">中的一些状态和变量数据等。所以说，</span><span style="color:#ff0000">Swap空间是“匿名”数据的交换空间</span><span style="color:#333333">。</span></span></p>
<p><span style="font-size:10.5pt; font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px"><span style="color:#333333"><strong>3. Swap分区</strong></span></span></p>
<p><span style="color:rgb(51,51,51); font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">Swap空间是</span><a target="_blank" target="_blank" href="http://baike.baidu.com/view/159980.htm" style="text-decoration:none; color:rgb(19,110,194); font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">分页</a><span style="color:rgb(51,51,51); font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">的（物理存储器以页帧为单位划分），每一页的大小和内存页的大小一样，方便Swap空间和内存之间的数据交换。</span><br>
</p>
<p>旧版本的Linux实现Swap空间时，用Swap空间的第一页作为所有Swap空间页的一个“位映射”（Bit map）。这就是说第一页的每一位，都对应着一页Swap空间。如果这一位是1，表示此页Swap可用；如果是0，表示此页是坏块，不能使用。这么说来，第一个Swap映射位应该是0，因为，第一页Swap是映射页。另外，最后10个（字节）映射位也被占用，用来表示Swap的版本。那么，如果说一页的大小为s，这种Swap的实现方法共能管理“8 * ( s - 10 ) - 1”个Swap页。对于i386系统来说s=4096，则空间大小共为133890048，如果认为1
 MB=2^20 Byte的话，大小正好为128M。<span style="color:rgb(51,51,51); font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px"><br>
</span></p>
<p>Linux取消了位映射的方法，也就取消了128M的限制。直接用地址访问，限制为2G （不理解）<br>
</p>
<p><br>
</p>
<p><strong><span style="font-size:12pt">4. Swap大小的分配（对性能的影响）</span></strong></p>
<p>如果系统的物理内存用光了，系统就会跑得很慢，但仍能运行；如果Swap空间用光了，那么系统就会发生错误。<br>
</p>
<p><span style="color:rgb(51,51,51); font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">通常情况下，Swap空间应大于或等于</span><a target="_blank" target="_blank" href="http://baike.baidu.com/view/138684.htm" style="text-decoration:none; color:rgb(19,110,194); font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">物理内存</a><span style="color:rgb(51,51,51); font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">的大小，最小不应小于64M，通常Swap空间的大小应是物理内存的2-2.5倍。但根据不同的应用，应有不同的配置：如果是小的桌面系统，则只需要较小的Swap空间，而大的</span><a target="_blank" target="_blank" href="http://baike.baidu.com/view/6396042.htm" style="text-decoration:none; color:rgb(19,110,194); font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">服务器系统</a><span style="color:rgb(51,51,51); font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">则视情况不同需要不同大小的Swap空间。特别是</span><a target="_blank" target="_blank" href="http://baike.baidu.com/view/32944.htm" style="text-decoration:none; color:rgb(19,110,194); font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">数据库服务器</a><span style="color:rgb(51,51,51); font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">和Web</span><span style="font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px"><span style="color:#ff0000">服务器</span></span><span style="color:rgb(51,51,51); font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">，</span><span style="font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px"><span style="color:#ff0000">随着访问量的增加，对Swap空间的要求也会增加</span></span><span style="color:rgb(51,51,51); font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">，具体配置参见各服务器产品的说明。</span><br>
</p>
<p><span style="color:rgb(51,51,51); font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">因为Swap交换的操作是</span><span style="font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px"><span style="color:#ff0000">磁盘IO</span></span><span style="color:rgb(51,51,51); font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">的操作，如果有</span><span style="font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px"><span style="color:#ff0000">多个Swap交换区</span></span><span style="color:rgb(51,51,51); font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">，Swap空间的分配会以轮流的方式操作于所有的Swap，这样会大大</span><span style="font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px"><span style="color:#ff0000">均衡IO的负载</span></span><span style="color:rgb(51,51,51); font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px">，加快Swap交换的速度。</span><span style="color:rgb(51,51,51); font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px"><br>
</span></p>
<p><span style="color:rgb(51,51,51); font-family:arial,宋体,sans-serif; line-height:24px; text-indent:28px"><br>
</span></p>
<p><span style="color:#333333">在地址映射过程中，若在页面中发现所要访问的页面不再内存中，则产生缺页中断。当发生缺页中断时操作系统必须在内存选择一个页面将其移出内存，以便为即将调入的页面让出空间。而用来选择淘汰哪一页的规则叫做</span><span style="color:#ff0000">页面置换算法。</span></p>
<p><span style="color:#ff0000"><br>
</span></p>
<p><span style="background-color:rgb(255,255,255)">参考<a target="_blank" target="_blank" href="http://blog.csdn.net/proing/article/details/5861762">此处</a></span></p>
<p></p>
</div>

            <div>
                作者：youxin2012 发表于2014/7/11 16:15:11 <a href="http://blog.csdn.net/youxin2012/article/details/37697167">原文链接</a>
            </div>
            <div>
            阅读：713 评论：0 <a href="http://blog.csdn.net/youxin2012/article/details/37697167#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]C语言有符号加减溢出]]></title>
        <link>http://blog.csdn.net/youxin2012/article/details/36425791</link>
        <guid>http://blog.csdn.net/youxin2012/article/details/36425791</guid>
        <author>youxin2012</author>
        <pubDate>2014/7/2 16:23:22</pubDate>
        <description><![CDATA[
            
<p>sizeof(short int ) = 2;</p>
<p><span style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:16px; line-height:24px"><strong>测试用例</strong></span><br>
</p>
<p><pre code_snippet_id="413984" snippet_file_name="blog_20140702_1_7806074"  name="code" class="cpp">#include &lt;stdio.h&gt;
 
int main()
{
    short int a = -32768;
    short int b = 0x8000;
    short int c = 0xffff;
    short int d = 0x8001;
    printf(&quot;%d, %d, %d, %d\n&quot;, a, b, c, d);
    a -= 1;
    b -= 1;
    c -= 1;
    d -= 1;
    printf(&quot;%d, %d, %d, %d\n&quot;, a, b, c, d);
 
    return 0;
}</pre>结果：</p>
<p><img src="http://img.blog.csdn.net/20140702162203078?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveW91eGluMjAxMg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>
</p>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
b, c, d的表示均为16进制表示，即机器的存储形式， 补码表示</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
<br>
</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
<strong><span style="font-size:12pt">负数溢出计算&nbsp;</span></strong><br>
</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
理解一：（按机器存储来看，存储均为补码形式）</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
a 的补码形式（存储形式）为 1000 0000 ... 0000 &nbsp; &nbsp; &nbsp; a-1机器存储为 01111...1 &nbsp;为 32767的补码</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
理解二：（如下图）</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
a为最大负数， a -1 = a&#43; 2^32 - 1 &nbsp;= -32768 &#43; 65536 -1 = 32767</div>
<img src="http://img.blog.csdn.net/20140702162314953?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveW91eGluMjAxMg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>
<p></p>
<p></p>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
<span style="font-family:Microsoft YaHei UI">&nbsp; &nbsp;&nbsp;</span><span style="font-family:'Microsoft YaHei UI'; font-size:10.5pt; line-height:1.5">&nbsp; &nbsp;&nbsp;</span><span style="font-family:'Microsoft YaHei UI'; font-size:10.5pt; line-height:1.5">&nbsp; &nbsp; &nbsp; 图 一</span><br>
</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
<br>
</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
另</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
b: &nbsp;0xffff 为 -1的补码形式</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
<br>
</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
补充：</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
short int 最大正数为 32767 &nbsp;</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
测试 37267 &#43; 1 = 01111...1 &#43;1 = 100...0 &nbsp;（为 -32768的补码）</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
所以</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
short int a = 32767;</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
a &#43;= 1;</div>
<div style="font-family:'Microsoft YaHei UI','Microsoft YaHei',SimSun,'Segoe UI',Tahoma,Helvetica,sans-serif,'Microsoft YaHei',Georgia,Helvetica,Arial,sans-serif,宋体,PMingLiU,serif; font-size:14px; line-height:21px">
printf(&quot;%d\n&quot;, a); // -32768 从 图 一 同样可以看出</div>
<br>
<p></p>

            <div>
                作者：youxin2012 发表于2014/7/2 16:23:22 <a href="http://blog.csdn.net/youxin2012/article/details/36425791">原文链接</a>
            </div>
            <div>
            阅读：3000 评论：3 <a href="http://blog.csdn.net/youxin2012/article/details/36425791#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
</channel>
</rss>
