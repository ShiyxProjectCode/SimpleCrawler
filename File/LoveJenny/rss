<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text">博客园_LoveJenny</title><subtitle type="text">Good Good Study ,Day Day Up!</subtitle><id>uuid:0c2d576d-6987-4d3d-ba62-28b980c13c7f;id=5731</id><updated>2015-06-17T00:13:08Z</updated><author><name>LoveJenny</name><uri>http://www.cnblogs.com/LoveJenny/</uri></author><generator>feed.cnblogs.com</generator><entry><id>http://www.cnblogs.com/LoveJenny/p/LoggingWithNLog.html</id><title type="text">Logging with NLog - LoveJenny</title><summary type="text">相比较log4net, 我更喜欢NLog, 因为NLog 更简单， 而且配置选项也更加的清楚，可能是因为log4net 是从log4j 移植过来的一个原因吧，总感觉有很多的java 成分在。要使用NLog 首先也需要安装NLog Package。安装好之后，添加一个NLog.config 文件，代码...</summary><published>2015-06-17T00:12:00Z</published><updated>2015-06-17T00:12:00Z</updated><author><name>LoveJenny</name><uri>http://www.cnblogs.com/LoveJenny/</uri></author><link rel="alternate" href="http://www.cnblogs.com/LoveJenny/p/LoggingWithNLog.html" /><link rel="alternate" type="text/html" href="http://www.cnblogs.com/LoveJenny/p/LoggingWithNLog.html" /><content type="html">相比较log4net, 我更喜欢NLog, 因为NLog 更简单， 而且配置选项也更加的清楚，可能是因为log4net 是从log4j 移植过来的一个原因吧，总感觉有很多的java 成分在。要使用NLog 首先也需要安装NLog Package。安装好之后，添加一个NLog.config 文件，代码...&lt;img src="http://counter.cnblogs.com/blog/rss/4582321" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/LoveJenny/p/LoggingWithNLog.html" target="_blank"&gt;Logging with NLog&lt;/a&gt;，转载请注明。&lt;/p&gt;</content></entry><entry><id>http://www.cnblogs.com/LoveJenny/p/LoggingWithLog4net.html</id><title type="text">Logging with Log4net (二) - LoveJenny</title><summary type="text">log4net 是.net 的一款日志记录框架。它提供了很多的方法来帮助记录日志：使用起来也比较方便：选中项目，点击右键，然后选择 Manage NuGet Packages...安装log4net package。安装好Package 之后，需要用配置文件来配置log4net.在项目中添加log4...</summary><published>2015-06-10T23:49:00Z</published><updated>2015-06-10T23:49:00Z</updated><author><name>LoveJenny</name><uri>http://www.cnblogs.com/LoveJenny/</uri></author><link rel="alternate" href="http://www.cnblogs.com/LoveJenny/p/LoggingWithLog4net.html" /><link rel="alternate" type="text/html" href="http://www.cnblogs.com/LoveJenny/p/LoggingWithLog4net.html" /><content type="html">log4net 是.net 的一款日志记录框架。它提供了很多的方法来帮助记录日志：使用起来也比较方便：选中项目，点击右键，然后选择 Manage NuGet Packages...安装log4net package。安装好Package 之后，需要用配置文件来配置log4net.在项目中添加log4...&lt;img src="http://counter.cnblogs.com/blog/rss/4567953" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/LoveJenny/p/LoggingWithLog4net.html" target="_blank"&gt;Logging with Log4net (二)&lt;/a&gt;，转载请注明。&lt;/p&gt;</content></entry><entry><id>http://www.cnblogs.com/LoveJenny/p/LoggingWithDebugAndTrace.html</id><title type="text">Logging with Debug And Trace (一) - LoveJenny</title><summary type="text">对于一个应用程序而言，Log 必不可少.在.net 里面，最简单的方式就是用Console 来输出 信息了，例如下面的例子： public class Program { public static void Main(string[] args) { ...</summary><published>2015-06-10T01:48:00Z</published><updated>2015-06-10T01:48:00Z</updated><author><name>LoveJenny</name><uri>http://www.cnblogs.com/LoveJenny/</uri></author><link rel="alternate" href="http://www.cnblogs.com/LoveJenny/p/LoggingWithDebugAndTrace.html" /><link rel="alternate" type="text/html" href="http://www.cnblogs.com/LoveJenny/p/LoggingWithDebugAndTrace.html" /><content type="html">对于一个应用程序而言，Log 必不可少.在.net 里面，最简单的方式就是用Console 来输出 信息了，例如下面的例子： public class Program { public static void Main(string[] args) { ...&lt;img src="http://counter.cnblogs.com/blog/rss/4565074" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/LoveJenny/p/LoggingWithDebugAndTrace.html" target="_blank"&gt;Logging with Debug And Trace (一)&lt;/a&gt;，转载请注明。&lt;/p&gt;</content></entry><entry><id>http://www.cnblogs.com/LoveJenny/p/3706459.html</id><title type="text">ThoughtWorks代码挑战——FizzBuzzWhizz - LoveJenny</title><summary type="text">很久没发表过文章了，今天看到一篇文章 最难面试的IT公司之ThoughtWorks代码挑战——FizzBuzzWhizz游戏(C#解法)看到LZ的2B青年代码，实在是惨不忍睹，故写篇文章来探讨下这类问题的一般思考。原题：FizzBuzzWhizz 你是一名体育老师，在某次课距离下课还有五分钟时，你决...</summary><published>2014-05-04T04:04:00Z</published><updated>2014-05-04T04:04:00Z</updated><author><name>LoveJenny</name><uri>http://www.cnblogs.com/LoveJenny/</uri></author><link rel="alternate" href="http://www.cnblogs.com/LoveJenny/p/3706459.html" /><link rel="alternate" type="text/html" href="http://www.cnblogs.com/LoveJenny/p/3706459.html" /><content type="html">很久没发表过文章了，今天看到一篇文章 最难面试的IT公司之ThoughtWorks代码挑战——FizzBuzzWhizz游戏(C#解法)看到LZ的2B青年代码，实在是惨不忍睹，故写篇文章来探讨下这类问题的一般思考。原题：FizzBuzzWhizz 你是一名体育老师，在某次课距离下课还有五分钟时，你决...&lt;img src="http://counter.cnblogs.com/blog/rss/3706459" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/LoveJenny/p/3706459.html" target="_blank"&gt;ThoughtWorks代码挑战——FizzBuzzWhizz&lt;/a&gt;，转载请注明。&lt;/p&gt;</content></entry><entry><id>http://www.cnblogs.com/LoveJenny/archive/2013/03/20/2970433.html</id><title type="text">Control 的DraggerHelper， 拖动控件从此变得很简单。。。 - LoveJenny</title><summary type="text">程序员经常要实现拖动控件的功能，一般实现这个功能，都要注册事件，然后写MouseMove的代码，Point point = Point.Empty;control.MouseDown += control_MouseDown;control.MouseMove += control_MouseMove; control.MouseLeave += control_MouseLeave;如果程序的很多地方都有这个逻辑的话，那么代码就会有一大部分的重复了。在网上如果你搜索控件拖动的话，大部分代码都是上面的代码，重复的逻辑，重复的故事。于是我想，能不能写一个帮助类，当需要拖动的时候，只要调用Enab</summary><published>2013-03-19T23:18:00Z</published><updated>2013-03-19T23:18:00Z</updated><author><name>LoveJenny</name><uri>http://www.cnblogs.com/LoveJenny/</uri></author><link rel="alternate" href="http://www.cnblogs.com/LoveJenny/archive/2013/03/20/2970433.html" /><link rel="alternate" type="text/html" href="http://www.cnblogs.com/LoveJenny/archive/2013/03/20/2970433.html" /><content type="html">程序员经常要实现拖动控件的功能，一般实现这个功能，都要注册事件，然后写MouseMove的代码，Point point = Point.Empty;control.MouseDown += control_MouseDown;control.MouseMove += control_MouseMove; control.MouseLeave += control_MouseLeave;如果程序的很多地方都有这个逻辑的话，那么代码就会有一大部分的重复了。在网上如果你搜索控件拖动的话，大部分代码都是上面的代码，重复的逻辑，重复的故事。于是我想，能不能写一个帮助类，当需要拖动的时候，只要调用Enab&lt;img src="http://counter.cnblogs.com/blog/rss/2970433" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/LoveJenny/archive/2013/03/20/2970433.html" target="_blank"&gt;Control 的DraggerHelper， 拖动控件从此变得很简单。。。&lt;/a&gt;，转载请注明。&lt;/p&gt;</content></entry><entry><id>http://www.cnblogs.com/LoveJenny/archive/2013/03/13/2956922.html</id><title type="text">使用“using” 的 “Cursor” - LoveJenny</title><summary type="text">很多时候，我们会写下面的这段代码： private void button1_Click(object sender, EventArgs e){ Cursor cursor = Cursor.Current; this.Cursor = Cursors.WaitCursor; LongTimeMethod(); this.Cursor = cursor;}priv...</summary><published>2013-03-12T23:26:00Z</published><updated>2013-03-12T23:26:00Z</updated><author><name>LoveJenny</name><uri>http://www.cnblogs.com/LoveJenny/</uri></author><link rel="alternate" href="http://www.cnblogs.com/LoveJenny/archive/2013/03/13/2956922.html" /><link rel="alternate" type="text/html" href="http://www.cnblogs.com/LoveJenny/archive/2013/03/13/2956922.html" /><content type="html">很多时候，我们会写下面的这段代码： private void button1_Click(object sender, EventArgs e){ Cursor cursor = Cursor.Current; this.Cursor = Cursors.WaitCursor; LongTimeMethod(); this.Cursor = cursor;}priv...&lt;img src="http://counter.cnblogs.com/blog/rss/2956922" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/LoveJenny/archive/2013/03/13/2956922.html" target="_blank"&gt;使用&amp;ldquo;using&amp;rdquo; 的 &amp;ldquo;Cursor&amp;rdquo;&lt;/a&gt;，转载请注明。&lt;/p&gt;</content></entry><entry><id>http://www.cnblogs.com/LoveJenny/archive/2013/03/05/2943691.html</id><title type="text">Windows 服务入门指南 - LoveJenny</title><summary type="text">有很多时候，我们需要创建Windows Service。 这篇文章可以算是一个入门指南吧，希望对初学者有帮助.要创建Windows Service, 首先选择Windows服务项目，如下图：这里我想创建一个Windows服务，定时的执行一些任务。public partial class Service1 : ServiceBase{ public Service1() { InitializeComponent(); } protected override void OnStart(string[] args) { } protecte...</summary><published>2013-03-04T23:06:00Z</published><updated>2013-03-04T23:06:00Z</updated><author><name>LoveJenny</name><uri>http://www.cnblogs.com/LoveJenny/</uri></author><link rel="alternate" href="http://www.cnblogs.com/LoveJenny/archive/2013/03/05/2943691.html" /><link rel="alternate" type="text/html" href="http://www.cnblogs.com/LoveJenny/archive/2013/03/05/2943691.html" /><content type="html">有很多时候，我们需要创建Windows Service。 这篇文章可以算是一个入门指南吧，希望对初学者有帮助.要创建Windows Service, 首先选择Windows服务项目，如下图：这里我想创建一个Windows服务，定时的执行一些任务。public partial class Service1 : ServiceBase{ public Service1() { InitializeComponent(); } protected override void OnStart(string[] args) { } protecte...&lt;img src="http://counter.cnblogs.com/blog/rss/2943691" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/LoveJenny/archive/2013/03/05/2943691.html" target="_blank"&gt;Windows 服务入门指南&lt;/a&gt;，转载请注明。&lt;/p&gt;</content></entry><entry><id>http://www.cnblogs.com/LoveJenny/archive/2013/01/30/2882383.html</id><title type="text">关于静态事件 static event 的二三事 - LoveJenny</title><summary type="text">很多人都知道事件，一般定义一个事件是这样的写法public event EventHandler OneEvent;但是如果这样定义的话就需要进行null判断了于是很多人这样定义事件：public event EventHandler OneEventNeverNull = (o, e) =&gt; { };这样就不需要判断null了。上面的事件你可以把它认为是实例事件. 我们这里要谈的是静态事件(static event).静态事件和实例事件的区别是加了个static 关键字，可别小看这个关键字，区别大了。首先静态事件的定义为：public static event EventHandler</summary><published>2013-01-29T23:18:00Z</published><updated>2013-01-29T23:18:00Z</updated><author><name>LoveJenny</name><uri>http://www.cnblogs.com/LoveJenny/</uri></author><link rel="alternate" href="http://www.cnblogs.com/LoveJenny/archive/2013/01/30/2882383.html" /><link rel="alternate" type="text/html" href="http://www.cnblogs.com/LoveJenny/archive/2013/01/30/2882383.html" /><content type="html">很多人都知道事件，一般定义一个事件是这样的写法public event EventHandler OneEvent;但是如果这样定义的话就需要进行null判断了于是很多人这样定义事件：public event EventHandler OneEventNeverNull = (o, e) =&amp;gt; { };这样就不需要判断null了。上面的事件你可以把它认为是实例事件. 我们这里要谈的是静态事件(static event).静态事件和实例事件的区别是加了个static 关键字，可别小看这个关键字，区别大了。首先静态事件的定义为：public static event EventHandler&lt;img src="http://counter.cnblogs.com/blog/rss/2882383" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/LoveJenny/archive/2013/01/30/2882383.html" target="_blank"&gt;关于静态事件 static event 的二三事&lt;/a&gt;，转载请注明。&lt;/p&gt;</content></entry><entry><id>http://www.cnblogs.com/LoveJenny/archive/2013/01/15/2860553.html</id><title type="text">参数化查询为什么能够防止SQL注入 - LoveJenny</title><summary type="text">很多人都知道SQL注入，也知道SQL参数化查询可以防止SQL注入，可为什么能防止注入却并不是很多人都知道的。 本文主要讲述的是这个问题，也许你在部分文章中看到过这块内容，当然了看看也无妨。 首先：我们要了解SQL收到一个指令后所做的事情： 具体细节可以查看文章：Sql Server 编译、重编译与执行计划重用原理 在这里，我简单的表示为： 收到指令 -&gt; 编译SQL生成执行计划 -...</summary><published>2013-01-14T23:08:00Z</published><updated>2013-01-14T23:08:00Z</updated><author><name>LoveJenny</name><uri>http://www.cnblogs.com/LoveJenny/</uri></author><link rel="alternate" href="http://www.cnblogs.com/LoveJenny/archive/2013/01/15/2860553.html" /><link rel="alternate" type="text/html" href="http://www.cnblogs.com/LoveJenny/archive/2013/01/15/2860553.html" /><content type="html">很多人都知道SQL注入，也知道SQL参数化查询可以防止SQL注入，可为什么能防止注入却并不是很多人都知道的。 本文主要讲述的是这个问题，也许你在部分文章中看到过这块内容，当然了看看也无妨。 首先：我们要了解SQL收到一个指令后所做的事情： 具体细节可以查看文章：Sql Server 编译、重编译与执行计划重用原理 在这里，我简单的表示为： 收到指令 -&amp;gt; 编译SQL生成执行计划 -...&lt;img src="http://counter.cnblogs.com/blog/rss/2860553" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/LoveJenny/archive/2013/01/15/2860553.html" target="_blank"&gt;参数化查询为什么能够防止SQL注入&lt;/a&gt;，转载请注明。&lt;/p&gt;</content></entry><entry><id>http://www.cnblogs.com/LoveJenny/archive/2012/12/31/2840238.html</id><title type="text">关于数据的级联删除和更新 - LoveJenny</title><summary type="text">很多时候，我们会碰到这样的场景：“删除一个表的数据的时候，将另一个表的相关数据删除。”在这里我建立两张表：“ProductCategory”，“Product”.有一个需求是这样的：在删除某个ProductCategory 的时候，同时删除该Category的products.这里是创建两张表的脚本：CREATE TABLE [dbo].[ProductCategory]( [Id] [uniqueidentifier] NOT NULL, [Name] [varchar](50) NULL, CONSTRAINT [PK_ProductCategory] PRIMARY KEY ...</summary><published>2012-12-30T23:22:00Z</published><updated>2012-12-30T23:22:00Z</updated><author><name>LoveJenny</name><uri>http://www.cnblogs.com/LoveJenny/</uri></author><link rel="alternate" href="http://www.cnblogs.com/LoveJenny/archive/2012/12/31/2840238.html" /><link rel="alternate" type="text/html" href="http://www.cnblogs.com/LoveJenny/archive/2012/12/31/2840238.html" /><content type="html">很多时候，我们会碰到这样的场景：“删除一个表的数据的时候，将另一个表的相关数据删除。”在这里我建立两张表：“ProductCategory”，“Product”.有一个需求是这样的：在删除某个ProductCategory 的时候，同时删除该Category的products.这里是创建两张表的脚本：CREATE TABLE [dbo].[ProductCategory]( [Id] [uniqueidentifier] NOT NULL, [Name] [varchar](50) NULL, CONSTRAINT [PK_ProductCategory] PRIMARY KEY ...&lt;img src="http://counter.cnblogs.com/blog/rss/2840238" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/LoveJenny/archive/2012/12/31/2840238.html" target="_blank"&gt;关于数据的级联删除和更新&lt;/a&gt;，转载请注明。&lt;/p&gt;</content></entry></feed>