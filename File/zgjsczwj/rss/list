<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet type="text/xsl" title="XSL Formatting" href="/rss.xsl" media="all" ?>
<rss version="2.0">
<channel>
    <title></title>
    <image>
    <link>http://blog.csdn.net</link>
    <url>http://static.blog.csdn.net/images/logo.gif</url>
    </image>
    <description></description>
	<link>http://blog.csdn.net/zgjsczwj</link>
	<language>zh-cn</language>
	<generator>http://blog.csdn.net</generator>
	<ttl>5</ttl>
	<copyright><![CDATA[Copyright &copy; zgjsczwj]]></copyright> 
	<pubDate>2015/9/17 14:33:26</pubDate>
    <item>
        <title><![CDATA[[原]关于测试$.getJSON获取json数据的问题]]></title>
        <link>http://blog.csdn.net/zgjsczwj/article/details/39342603</link>
        <guid>http://blog.csdn.net/zgjsczwj/article/details/39342603</guid>
        <author>zgjsczwj</author>
        <pubDate>2014/9/17 15:06:34</pubDate>
        <description><![CDATA[
            
<p>最近在帮朋友解决$.getJSON问题时遇到的情况，记录下来，希望能帮助到别人</p>
<p></p>
<p>$.getJSON是后去本地后者本地json数据的。首先，不管是获取网络或本地数据有问题，可以通过输出错误信息来查看原因，例如</p>
<pre code_snippet_id="470301" snippet_file_name="blog_20140917_1_8571854"  name="code" class="javascript">$.getJSON(&quot;/Scripts/Menus.json&quot;, function (json) { console.log(json.menus[0].menuid) }).error(function (jqXhr, textStatus, error) {
                console.log(&quot;ERROR: &quot; + textStatus + &quot;, &quot; + error);
            });</pre>
<p>在网页脚本中能查看错误原因，注意，只适用于jQuery 1.5&#43;版本，此方法在http://stackoverflow.com/questions/13871625/jquery-getjson-load-local-json-file-not-working看到</p>
<p>其次，获取网络数据的时候，我没有遇到问题，就不多说&nbsp;</p>
<p>然后，测试获取本地数据，应该注意路径问题，我测试全路径时显示 “日志: ERROR: error, No Transport ”，貌&#20284;全路径不行，在mvc测试时用以前的路径测试通过，测试时请注意浏览器缓存问题，刷新可能获取的是上次的数据。在获取本地数据过程中，发现有个问题，如果直接在js中定义json变量，能正常解析，但放到本地文件中读取，就会报“日志: ERROR: parsererror, SyntaxError: 无效字符 ”错误，通过测试，读取本地文件json的时候，json数据里面不能嵌套json数据，例如</p>
<p></p>
<pre code_snippet_id="470301" snippet_file_name="blog_20140917_3_2628017"  code_snippet_id="470301" snippet_file_name="blog_20140917_3_2628017" name="code" class="javascript">{ &quot;menus&quot;: [
				{ &quot;menuid&quot;: &quot;1&quot;, &quot;icon&quot;: &quot;icon-sys&quot;, &quot;menuname&quot;: &quot;控件使用&quot;,
					&quot;menus&quot;: [{ &quot;menuid&quot;: &quot;11&quot;, &quot;menuname&quot;: &quot;我的博客&quot;, &quot;icon&quot;: &quot;icon-nav&quot;, &quot;url&quot;: &quot;http://www.cnblogs.com/WikStone/&quot; },
							{ &quot;menuid&quot;: &quot;12&quot;, &quot;menuname&quot;: &quot;添加用户&quot;, &quot;icon&quot;: &quot;icon-add&quot;, &quot;url&quot;: &quot;demo.html&quot; },
							{ &quot;menuid&quot;: &quot;13&quot;, &quot;menuname&quot;: &quot;用户管理&quot;, &quot;icon&quot;: &quot;icon-users&quot;, &quot;url&quot;: &quot;/Sys/User/List.aspx&quot; },
							{ &quot;menuid&quot;: &quot;14&quot;, &quot;menuname&quot;: &quot;角色管理&quot;, &quot;icon&quot;: &quot;icon-role&quot;, &quot;url&quot;: &quot;demo2.html&quot; },
							{ &quot;menuid&quot;: &quot;15&quot;, &quot;menuname&quot;: &quot;权限设置&quot;, &quot;icon&quot;: &quot;icon-set&quot;, &quot;url&quot;: &quot;demo.html&quot; },
							{ &quot;menuid&quot;: &quot;16&quot;, &quot;menuname&quot;: &quot;系统日志&quot;, &quot;icon&quot;: &quot;icon-log&quot;, &quot;url&quot;: &quot;demo1.html&quot; }
						]
				}
		]
}</pre>
<p></p>
<p>去掉里面的menus就能正常读取。</p>
另外，关于ie浏览器正常接收数据，而用<span style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px">chrome浏览器不能接收数据的问题，是由于Chrome没开xmlhttprequest去加载本地文件，可以用<span style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px">Chromed 开始命令</span>--allow-file-access-from-files，这个方法我没测试用，此方法引自上文的链接</span><br>
<p><br>
</p>

            <div>
                作者：zgjsczwj 发表于2014/9/17 15:06:34 <a href="http://blog.csdn.net/zgjsczwj/article/details/39342603">原文链接</a>
            </div>
            <div>
            阅读：209 评论：0 <a href="http://blog.csdn.net/zgjsczwj/article/details/39342603#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[转]后台弹出js]]></title>
        <link>http://blog.csdn.net/zgjsczwj/article/details/7998623</link>
        <guid>http://blog.csdn.net/zgjsczwj/article/details/7998623</guid>
        <author>zgjsczwj</author>
        <pubDate>2012/9/20 9:02:50</pubDate>
        <description><![CDATA[
            
<p><span style="font-family:Verdana">//如果是单独放在一个类中,记得要引用System.Web.Extensions,否则 ScriptManager不能用</span></p>
<span style="font-family:Verdana"></span>
<p></p>
<p>/******************************************************</p>
<p>*&nbsp; Author: 肖煕金</p>
<p>*&nbsp; Description:在<strong style="color:black; background-color:rgb(153,255,153)">后台</strong>注册JavaScript脚本弹出信息对话框及确认对话框</p>
<p>*&nbsp; Date: 2008-12-27 </p>
<p>*&nbsp; 注意: 当前<strong style="color:white; background-color:rgb(136,0,0)">的</strong>代码傪适合於在asp.net 2.0,并且安装了AJAX Extensions 1.0<strong style="color:white; background-color:rgb(136,0,0)">的</strong>环境中使用</p>
<p>*&nbsp; 因为当前<strong style="color:white; background-color:rgb(136,0,0)">的</strong>类引用了System.Web.Extensions这个ajax命名空间</p>
<p>*******************************************************/</p>
<p>using System;</p>
<p>using System.Collections.Generic;</p>
<p>using System.Text;</p>
<p>using System.Web;</p>
<p>using System.Web.UI;</p>
<p><br>
</p>
<p>///在<strong style="color:black; background-color:rgb(153,255,153)">后台</strong>注册JavaScript脚本弹出信息对话框及确认对话框(需要有MS AJAX环境)</p>
<p>namespace ScriptAlert</p>
<p>{</p>
<p>&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p>
<p>&nbsp;&nbsp;&nbsp; ///&nbsp; 在<strong style="color:black; background-color:rgb(153,255,153)">后台</strong>注册JavaScript脚本弹出信息对话框及确认对话框(需要有MS AJAX环境)</p>
<p>&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p>
<p>&nbsp;&nbsp;&nbsp; public class Script</p>
<p>&nbsp;&nbsp;&nbsp; {</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 在<strong style="color:black; background-color:rgb(153,255,153)">后台</strong>注册JavaScript脚本弹出信息对话框及确认对话框(需要有MS AJAX环境)</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Script() { }</p>
<p><br>
</p>
<p><br>
</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ///&nbsp; Javascript方式弹出消息对话框</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;message&quot;&gt;要弹出<strong style="color:white; background-color:rgb(136,0,0)">的</strong>消息内容&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;page&quot;&gt;当前页面,参数可以直接写:this 或 Page&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void <strong style="color:white; background-color:rgb(0,170,0)">
Alert</strong>(string message, Page page)</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; page.ClientScript.RegisterStartupScript(page.GetType(), null, &quot;<strong style="color:white; background-color:rgb(0,170,0)">alert</strong>('&quot; &#43; message &#43; &quot;');&quot;, true);</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p><br>
</p>
<p><br>
</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 向页面注册javascript脚本,这种方式是很灵活<strong style="color:white; background-color:rgb(136,0,0)">的</strong>,可以在页面上注册任何你想要<strong style="color:white; background-color:rgb(136,0,0)">的js</strong>脚本</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;scriptContent&quot;&gt;Javascript脚本<strong style="color:white; background-color:rgb(136,0,0)">的</strong>内容,记得不要在脚本两端加script标志,script标志程序会自动生成&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;page&quot;&gt;当前页面,参数可以直接写:this 或 Page&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void RegisterScript(string scriptContent, Page page)</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; page.ClientScript.RegisterStartupScript(page.GetType(), null, scriptContent, true);</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p><br>
</p>
<p><br>
</p>
<p><br>
</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// javascript弹出消息后，跳转到指定<strong style="color:white; background-color:rgb(136,0,0)">的</strong>URL链接页面&nbsp;
</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;message&quot;&gt;要弹出<strong style="color:white; background-color:rgb(136,0,0)">的</strong>消息内容&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;pageUrl&quot;&gt;要跳转到<strong style="color:white; background-color:rgb(136,0,0)">的</strong>页面链接,站内链接请填写相对路径,站外<strong style="color:white; background-color:rgb(136,0,0)">的</strong>链接需要加上&quot;http://&quot;,如&quot;http://www.baidu.com&quot;&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;page&quot;&gt;当前页面,参数可以直接写:this 或 Page&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void AlertAndGotoUrl(string message, string pageUrl, Page page)</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string strScript = &quot;<strong style="color:white; background-color:rgb(0,170,0)">alert</strong>('&quot; &#43; message &#43; &quot;');window.location.href='&quot; &#43; pageUrl &#43; &quot;';&quot;;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; page.ClientScript.RegisterStartupScript(page.GetType(), null, strScript, true);</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p><br>
</p>
<p><br>
</p>
<p><br>
</p>
<p><br>
</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 利用Ajax<strong style="color:white; background-color:rgb(136,0,0)">的</strong>方式弹出消息对话框,这种方式主要用於在用户控件和UpdatePanel控件中使用,在页面中也可以使用
</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;message&quot;&gt;要弹出<strong style="color:white; background-color:rgb(136,0,0)">的</strong>消息内容&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;controlId&quot;&gt;控件<strong style="color:white; background-color:rgb(136,0,0)">的</strong>ID属性名称,用户控件和页面中参数为:this,UpdatePanel控件中参数为当前UpdatePanel控件<strong style="color:white; background-color:rgb(136,0,0)">的</strong>ID属性名称&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void AjaxAlert(string message, Control controlId)</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ScriptManager.RegisterStartupScript(controlId, controlId.GetType(), null, &quot;<strong style="color:white; background-color:rgb(0,170,0)">alert</strong>('&quot; &#43; message &#43; &quot;');&quot;, true);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p><br>
</p>
<p><br>
</p>
<p><br>
</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 利用Ajax<strong style="color:white; background-color:rgb(136,0,0)">的</strong>方式向控件(用户控件和UpdatePanel)或页面注册Javascript脚本,这种方式主要用於在用户控件和UpdatePanel控件中使用,在页面中也可以使用
</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;scriptContent&quot;&gt;Javascript脚本<strong style="color:white; background-color:rgb(136,0,0)">的</strong>内容,记得不要在脚本两端加script标志,script标志程序会自动生成&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;controlId&quot;&gt;控件<strong style="color:white; background-color:rgb(136,0,0)">的</strong>ID属性名称,用户控件和页面中参数为:this,UpdatePanel控件中参数为当前UpdatePanel控件<strong style="color:white; background-color:rgb(136,0,0)">的</strong>ID属性名称&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void AjaxRegisterScript(string scriptContent, Control controlId)</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ScriptManager.RegisterStartupScript(controlId, controlId.GetType(), null, scriptContent, true);</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p><br>
</p>
<p><br>
</p>
<p><br>
</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ///利用Ajax<strong style="color:white; background-color:rgb(136,0,0)">的</strong>方式弹出消息对话框后，跳转到指定<strong style="color:white; background-color:rgb(136,0,0)">的</strong>URL链接页面,这种方式主要用於在用户控件和UpdatePanel控件中使用,在页面中也可以使用
</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;message&quot;&gt;要弹出<strong style="color:white; background-color:rgb(136,0,0)">的</strong>消息内容&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;pageUrl&quot;&gt;要跳转到<strong style="color:white; background-color:rgb(136,0,0)">的</strong>页面链接,站内链接请填写相对路径,站外<strong style="color:white; background-color:rgb(136,0,0)">的</strong>链接需要加上&quot;http://&quot;,如&quot;http://www.baidu.com&quot;&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;controlId&quot;&gt;控件<strong style="color:white; background-color:rgb(136,0,0)">的</strong>ID属性名称,用户控件和页面中参数为:this,UpdatePanel控件中参数为当前UpdatePanel控件<strong style="color:white; background-color:rgb(136,0,0)">的</strong>ID属性名称&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void AjaxAlertAndGotoUrl(string message, string pageUrl, Control controlId)</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string strScript = &quot;<strong style="color:white; background-color:rgb(0,170,0)">alert</strong>('&quot; &#43; message &#43; &quot;');window.location.href='&quot; &#43; pageUrl &#43; &quot;';&quot;;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ScriptManager.RegisterStartupScript(controlId, controlId.GetType(), null, strScript, true);</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p><br>
</p>
<p><br>
</p>
<p><br>
</p>
<p><br>
</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// Javascript弹出确认对话框后,并跳转到指定<strong style="color:white; background-color:rgb(136,0,0)">的</strong>URL链接页面</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;message&quot;&gt;要弹出<strong style="color:white; background-color:rgb(136,0,0)">的</strong>消息内容&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;okGotoUrl&quot;&gt;选择确认(OK)按钮后要跳转到<strong style="color:white; background-color:rgb(136,0,0)">的</strong>页面URL,站内链接写相对路径，站外链接需加&quot;http://&quot;&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;cancelGotoUrl&quot;&gt;选择取消(Cancel)按钮后要跳转到<strong style="color:white; background-color:rgb(136,0,0)">的</strong>页面URL,如果参数为Null或空字符&quot;&quot;则<a name="baidusnap3"></a><strong style="color:black; background-color:rgb(255,153,153)">返回</strong>false(不跳转),站内链接写相对路径，站外链接需加&quot;http://&quot;&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;page&quot;&gt;当前页面,参数可以直接写:this 或 Page&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void ConfirmAndGotoUrl(string message, string okGotoUrl, string cancelGotoUrl, Page page)</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string strScript = &quot;&quot;;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (String.IsNullOrEmpty(cancelGotoUrl))</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strScript = &quot;if(confirm('&quot; &#43; message &#43; &quot;')==true){window.location.href='&quot; &#43; okGotoUrl &#43; &quot;';} else {return false;}&quot;;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strScript = &quot;if(confirm('&quot; &#43; message &#43; &quot;')==true){window.location.href='&quot; &#43; okGotoUrl &#43; &quot;';} else{window.location.href='&quot; &#43; cancelGotoUrl &#43; &quot;';}&quot;;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p><br>
</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; page.ClientScript.RegisterStartupScript(page.GetType(), null, strScript, true);</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p><br>
</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// Javascript弹出确认对话框后,并执行指定<strong style="color:white; background-color:rgb(136,0,0)">的</strong>Javascript脚本</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;message&quot;&gt;要弹出<strong style="color:white; background-color:rgb(136,0,0)">的</strong>消息内容&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;okToScript&quot;&gt;选择确认(OK)按钮后要执行<strong style="color:white; background-color:rgb(136,0,0)">的</strong>javacript脚本内容&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;cancelToScript&quot;&gt;选择取消(Cancel)按钮后要执行<strong style="color:white; background-color:rgb(136,0,0)">的</strong>javacript脚本内容,如果参数为Null或空字符&quot;&quot;则<strong style="color:black; background-color:rgb(255,153,153)">返回</strong>false&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;page&quot;&gt;当前页面,参数可以直接写:this 或 Page&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void ConfirmAndExecuteScript(string message, string okToScript, string cancelToScript, Page page)</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
<p><br>
</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string strScript = &quot;&quot;;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (String.IsNullOrEmpty(cancelToScript))</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strScript = &quot;if(confirm('&quot; &#43; message &#43; &quot;')==true){&quot;&#43;okToScript&#43;&quot;} else{return false;}&quot;;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strScript = &quot;if(confirm('&quot; &#43; message &#43; &quot;')==true){&quot; &#43; okToScript &#43; &quot;} else{&quot; &#43; cancelToScript &#43; &quot;}&quot;;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p><br>
</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; page.ClientScript.RegisterStartupScript(page.GetType(), null, strScript, true);</p>
<p><br>
</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p><br>
</p>
<p><br>
</p>
<p><br>
</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 利用Ajax方式弹出确认对话框后,并跳转到指定<strong style="color:white; background-color:rgb(136,0,0)">的</strong>URL链接页面,适合於控件(用户控件和UpdatePanel控件中)和页面中</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;message&quot;&gt;要弹出<strong style="color:white; background-color:rgb(136,0,0)">的</strong>消息内容&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;okGotoUrl&quot;&gt;选择确认(OK)按钮后要跳转到<strong style="color:white; background-color:rgb(136,0,0)">的</strong>页面URL,站内链接写相对路径，站外链接需加&quot;http://&quot;&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;cancelGotoUrl&quot;&gt;选择取消(Cancel)按钮后要跳转到<strong style="color:white; background-color:rgb(136,0,0)">的</strong>页面URL,如果参数为Null或空字符&quot;&quot;则<strong style="color:black; background-color:rgb(255,153,153)">返回</strong>false(不跳转),站内链接写相对路径，站外链接需加&quot;http://&quot;&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;controlId&quot;&gt;控件<strong style="color:white; background-color:rgb(136,0,0)">的</strong>ID属性名称,用户控件和页面中参数为:this,UpdatePanel控件中参数为当前UpdatePanel控件<strong style="color:white; background-color:rgb(136,0,0)">的</strong>ID属性名称&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void AjaxConfirmAndGotoUrl(string message, string okGotoUrl, string cancelGotoUrl, Control controlId)</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string strScript = &quot;&quot;;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (String.IsNullOrEmpty(cancelGotoUrl))</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strScript = &quot;if(confirm('&quot; &#43; message &#43; &quot;')==true){window.location.href='&quot; &#43; okGotoUrl &#43; &quot;';} else {return false;}&quot;;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strScript = &quot;if(confirm('&quot; &#43; message &#43; &quot;')==true){window.location.href='&quot; &#43; okGotoUrl &#43; &quot;';} else{window.location.href='&quot; &#43; cancelGotoUrl &#43; &quot;';}&quot;;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ScriptManager.RegisterStartupScript(controlId, controlId.GetType(), null, strScript, true);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p><br>
</p>
<p><br>
</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// 利用Ajax方式弹出确认对话框后并执行指定<strong style="color:white; background-color:rgb(136,0,0)">的</strong>Javascript脚本</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;message&quot;&gt;要弹出<strong style="color:white; background-color:rgb(136,0,0)">的</strong>消息内容&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;okToScript&quot;&gt;选择确认(OK)按钮后要执行<strong style="color:white; background-color:rgb(136,0,0)">的</strong>javacript脚本内容&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;cancelToScript&quot;&gt;选择取消(Cancel)按钮后要执行<strong style="color:white; background-color:rgb(136,0,0)">的</strong>javacript脚本内容,如果参数为Null或空字符&quot;&quot;则<strong style="color:black; background-color:rgb(255,153,153)">返回</strong>false&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;controlId&quot;&gt;控件<strong style="color:white; background-color:rgb(136,0,0)">的</strong>ID属性名称,用户控件和页面中参数为:this,UpdatePanel控件中参数为当前UpdatePanel控件<strong style="color:white; background-color:rgb(136,0,0)">的</strong>ID属性名称&lt;/param&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void AjaxConfirmAndExecuteScript(string message, string okToScript, string cancelToScript, Control controlId)</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string strScript = &quot;&quot;;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (String.IsNullOrEmpty(cancelToScript))</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strScript = &quot;if(confirm('&quot; &#43; message &#43; &quot;')==true){&quot; &#43; okToScript &#43; &quot;} else{return false;}&quot;;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strScript = &quot;if(confirm('&quot; &#43; message &#43; &quot;')==true){&quot; &#43; okToScript &#43; &quot;} else{&quot; &#43; cancelToScript &#43; &quot;}&quot;;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ScriptManager.RegisterStartupScript(controlId, controlId.GetType(), null, strScript, true);&nbsp;
</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p>&nbsp;&nbsp;&nbsp; }</p>
<p>}</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>转自<a href="http://cache.baidu.com/c?m=9f65cb4a8c8507ed4fece763104f87711923d13f6c898d403ec3933fc239045c147be0b824281301d3d868225cef1f53b5b46765367337c691dfff4fcacbe13f5eff3035000bf63205a718b8ba3732b22a875b99b869e2ad803584dea2c4a95e44cb235d3b97f1fb4d7013dd1ef6033093f5c71f5519&amp;p=c37fc15f86cc42a958b2c77106438b&amp;user=baidu&amp;fm=sc&amp;query=mvc%C8%E7%BA%CE%BA%F3%CC%A8%B7%B5%BB%D8js%B5%C4alert&amp;qid=f23d00f0079b3248&amp;p1=7">http://cache.baidu.com/c?m=9f65cb4a8c8507ed4fece763104f87711923d13f6c898d403ec3933fc239045c147be0b824281301d3d868225cef1f53b5b46765367337c691dfff4fcacbe13f5eff3035000bf63205a718b8ba3732b22a875b99b869e2ad803584dea2c4a95e44cb235d3b97f1fb4d7013dd1ef6033093f5c71f5519&amp;p=c37fc15f86cc42a958b2c77106438b&amp;user=baidu&amp;fm=sc&amp;query=mvc%C8%E7%BA%CE%BA%F3%CC%A8%B7%B5%BB%D8js%B5%C4alert&amp;qid=f23d00f0079b3248&amp;p1=7</a></p>

            <div>
                作者：zgjsczwj 发表于2012/9/20 9:02:50 <a href="http://blog.csdn.net/zgjsczwj/article/details/7998623">原文链接</a>
            </div>
            <div>
            阅读：1849 评论：0 <a href="http://blog.csdn.net/zgjsczwj/article/details/7998623#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[转]jqgrid行编辑]]></title>
        <link>http://blog.csdn.net/zgjsczwj/article/details/7983066</link>
        <guid>http://blog.csdn.net/zgjsczwj/article/details/7983066</guid>
        <author>zgjsczwj</author>
        <pubDate>2012/9/15 21:01:37</pubDate>
        <description><![CDATA[
            
<pre class="javascript" name="code">ondblClickRow: function(id){
	if(id &amp;&amp; id !== lastsel){
		var rowData = $(&quot;#jqGridId&quot;).jqGrid(&quot;getRowData&quot;, id); 
		$('#jqGridId').jqGrid('restoreRow',lastsel);
		$('#jqGridId').jqGrid('editRow',id,{
			keys : true,		//这里按[enter]保存
			url: s2web.appURL + &quot;jq/save.action&quot;,
			mtype : &quot;POST&quot;,
			restoreAfterError: true,
			extraparam: {
				&quot;ware.id&quot;: rowData.id,
				&quot;ware.warename&quot;: $(&quot;#&quot;+id+&quot;_name&quot;).val(),
				&quot;ware.createDate&quot;: $(&quot;#&quot;+id+&quot;_date&quot;).val(),
				&quot;ware.number&quot;: $(&quot;#&quot;+id+&quot;_amount&quot;).val(),
				&quot;ware.valid&quot;: $(&quot;#&quot;+id+&quot;_type&quot;).val()
			},
			oneditfunc: function(rowid){
				console.log(rowid);
			},
			succesfunc: function(response){
				alert(&quot;save success&quot;);
				return true;
			},
			errorfunc: function(rowid, res){
				console.log(rowid);
				console.log(res);
			}
		});
	}
}</pre>
<p><br>
&nbsp;</p>
<pre class="javascript" name="code">jQuery(&quot;#grid_id&quot;).jqGrid('editRow',rowid, keys, oneditfunc, succesfunc, url, extraparam, aftersavefunc,errorfunc, afterrestorefunc);</pre>
<p><br>
&nbsp;</p>
<pre class="javascript" name="code">jQuery(&quot;#grid_id&quot;).jqGrid('editRow',rowid,  {
	&quot;keys&quot; : false,
	&quot;oneditfunc&quot; : null,
	&quot;successfunc&quot; : null,
	&quot;url&quot; : null,
        	&quot;extraparam&quot; : {},
	&quot;aftersavefunc&quot; : null,
	&quot;errorfunc&quot;: null,
	&quot;afterrestorefunc&quot; : null,
	&quot;restoreAfterError&quot; : true,
	&quot;mtype&quot; : &quot;POST&quot;
});
</pre>
<p><br>
&nbsp;</p>
<div>这里对以上各个参数的意思做一个简单的描述</div>
<ul>
<li>rowid:当前编辑的rowid</li><li>succesfunc:如果定义了改函数，将会在请求成功调用后立即返回，该函数签名包括server返回的数据。同时该函数需要返回tue/false</li><li>url: 如果定义了改&#20540;，将会覆盖jqGrid中的editurl(当然，如果没有url和editurl是会报错的)。如果url=&quot;clientArray&quot; 那么就不会向server端触发请求，可在后期手动调用修改</li><li>extraparam:请求参数列表{name:value, name:value}，将会append到requestData中向server端发送</li><li>aftersavefunc:如果定义了改函数，将会在数据向server端保存后立即调用，该函数接受rowid、response参数。同样如果是上面的url=&quot;clientArray&quot;该函数同样执行</li><li>errorfunc:如果定义了改函数，将会在数据向server端保存后调用，该函数接受rowid、response参数</li><li>afterrestorefunc:如果定义了改函数，将在restoreRow后调用，接受rowid作为参数 </li></ul>
<div>在<a href="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:inline_editing">http://www.trirand.com/jqgridwiki/doku.php?id=wiki:inline_editing</a> 中对于innerEdit主要有以下几个方法：</div>
<div class="quote_title">写道</div>
<div class="quote_div">editRow //在用户出发edit事件时调用该方法 <br>
saveRow //用户不需要调用该方法，在edit时会自动调用 <br>
restoreRow //回滚当前editRow <br>
addRow //新增row <br>
inlineNav</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<pre class="javascript" name="code">$(&quot;#addBtn&quot;).bind(&quot;click&quot;, function() {
		$(&quot;#jqGridId&quot;).jqGrid('addRow',{
			rowID : &quot;new_row&quot;,
		    initdata : {},
		    position :&quot;first&quot;,
		    useDefValues : true,
		    useFormatter : true,
		    addRowParams : {extraparam:{
		    	
		    }}
		});
		//当前新增id进入可编辑状态
		$('#jqGridId').jqGrid('editRow','new_row',{
			keys : true,		//这里按[enter]保存
			url: s2web.appURL + &quot;jq/save.action&quot;,
			mtype : &quot;POST&quot;,
			restoreAfterError: true,
			extraparam: {
			},
			oneditfunc: function(rowid){
				console.log(rowid);
			},
			succesfunc: function(response){
				alert(&quot;save success&quot;);
				return true;
			},
			errorfunc: function(rowid, res){
				console.log(rowid);
				console.log(res);
			}
		});
	
}); </pre>
<p><br>
&nbsp;</p>
转自<a href="http://mj4d.iteye.com/blog/1633462">http://mj4d.iteye.com/blog/1633462</a>

            <div>
                作者：zgjsczwj 发表于2012/9/15 21:01:37 <a href="http://blog.csdn.net/zgjsczwj/article/details/7983066">原文链接</a>
            </div>
            <div>
            阅读：11300 评论：2 <a href="http://blog.csdn.net/zgjsczwj/article/details/7983066#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[转]jqgrid点空余地方保存编辑]]></title>
        <link>http://blog.csdn.net/zgjsczwj/article/details/7983052</link>
        <guid>http://blog.csdn.net/zgjsczwj/article/details/7983052</guid>
        <author>zgjsczwj</author>
        <pubDate>2012/9/15 20:56:30</pubDate>
        <description><![CDATA[
            
<p>jqgrid双击行，进入编辑状态，在不按回车的情况下保存提交内容</p>
<p>var lastsel;<br>
&nbsp;&nbsp;&nbsp; $('html').bind('click', function(e) { //用于点击其他地方保存正在编辑状态下的行<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ( lastsel != &quot;&quot; ) { //if a row is selected for edit <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if($(e.target).closest('#EM_Report').length == 0) { //and the click is outside of the grid //save the row being edited and unselect the row&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert(lastsel);jQuery('#EM_Report').jqGrid('saveRow', lastsel); <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jQuery('#EM_Report').resetSelection(); <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lastsel=&quot;&quot;; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <br>
&nbsp;&nbsp;&nbsp; });</p>
<p>来自<a href="http://stackoverflow.com/questions/7311780/jqgrid-sava-row-data-to-db-on-click-out-of-grid">http://stackoverflow.com/questions/7311780/jqgrid-sava-row-data-to-db-on-click-out-of-grid</a>方法</p>

            <div>
                作者：zgjsczwj 发表于2012/9/15 20:56:30 <a href="http://blog.csdn.net/zgjsczwj/article/details/7983052">原文链接</a>
            </div>
            <div>
            阅读：1858 评论：0 <a href="http://blog.csdn.net/zgjsczwj/article/details/7983052#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]关于mvc中的session在controller中传递]]></title>
        <link>http://blog.csdn.net/zgjsczwj/article/details/7906422</link>
        <guid>http://blog.csdn.net/zgjsczwj/article/details/7906422</guid>
        <author>zgjsczwj</author>
        <pubDate>2012/8/25 11:16:14</pubDate>
        <description><![CDATA[
            
<pre class="csharp" name="code">&nbsp;</pre>
<p><br>
&nbsp;&nbsp; 在用mvc开发新项目的时候，不久就遇到一个头大的问题，session在controller中传递居然出现空&#20540;，但明明一开始就赋&#20540;了，通过度娘查找，发现有好多朋友遇到同样的问题，但是没有说明详细的解决方法，最后通过谷歌查找国外网站，找到了详细的解决方法，分享如下</p>
<p>&nbsp;&nbsp;&nbsp;1. 暂时不明白mvc中为什么传递session会出现空&#20540;，我们引用session时默认引用的是System.Web.Mvc.Controll.session，可能这个session不能传递，所以解决方法就是详细定义session，我们可以定义System.Web.HttpContext.Current.Session可以解决这个问题，我用的就是这个，比较方便</p>
<p>2.模仿<span class="typ">HttpContextBase</span><span class="pln">&nbsp; </span>，说实在，这个方法不是很了解，也没仔细深究</p>
<p>3扩展<span class="typ">HttpContextBase</span><span class="pun"></span>的方法</p>
<p><span class="pln"></span>public static class SessionExtensions {&nbsp;&nbsp;&nbsp;&nbsp; public static T GetDataFromSession&lt;T&gt;(this HttpSessionStateBase session, string key)&nbsp;&nbsp;&nbsp;&nbsp; {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (T)session[key];&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void SetDataInSession&lt;T&gt;(this HttpSessionStateBase
 session, string key, object value)&nbsp;&nbsp;&nbsp;&nbsp; {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; session[key] = value;&nbsp;&nbsp;&nbsp;&nbsp; } }</p>
<p>&nbsp;</p>
<p>以上方法来自<a href="http://stackoverflow.com/questions/560084/session-variables-in-asp-net-mvc">http://stackoverflow.com/questions/560084/session-variables-in-asp-net-mvc</a>和<a href="http://stackoverflow.com/questions/6314626/get-set-httpcontext-session-methods-in-basecontroller-vs-mocking-httpcontextbase">http://stackoverflow.com/questions/6314626/get-set-httpcontext-session-methods-in-basecontroller-vs-mocking-httpcontextbase</a></p>
<p>&nbsp;</p>
<p>ps：国外的程序员是想着用什么样的方法能更好的解决这个问题，而我是想怎么用最简单的方法解决问题，不知道这算不算是我与别人的差距</p>

            <div>
                作者：zgjsczwj 发表于2012/8/25 11:16:14 <a href="http://blog.csdn.net/zgjsczwj/article/details/7906422">原文链接</a>
            </div>
            <div>
            阅读：5067 评论：1 <a href="http://blog.csdn.net/zgjsczwj/article/details/7906422#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]关于jqGrid的multiselect，multiboxonly，multikey]]></title>
        <link>http://blog.csdn.net/zgjsczwj/article/details/7835772</link>
        <guid>http://blog.csdn.net/zgjsczwj/article/details/7835772</guid>
        <author>zgjsczwj</author>
        <pubDate>2012/8/6 16:36:17</pubDate>
        <description><![CDATA[
            
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 今天又解决了个大难题，不知道用jqGrid的朋友遇到过没有，当我们设置multiselect为true时，选择任何的单元&#26684;，都会选中该行。万一设置了单元&#26684;编辑功能，岂不是每次都要取消选中的行？由于查看国内的网站，发现仅仅都是介绍了jqGrid的multiselect，multiboxonly，multikey的用法，并没有一些问题的解决方法，后来终于在国外网站上发现解决该问题的方法（<a href="http://stackoverflow.com/questions/7627512/jqgrid-multiselect-box">http://stackoverflow.com/questions/7627512/jqgrid-multiselect-box</a>），<a href="http://www.ok-soft-gmbh.com/jqGrid/SimpleLocalGridWithMultiselection.htm">http://www.ok-soft-gmbh.com/jqGrid/SimpleLocalGridWithMultiselection.htm</a>是其效果</p>
<p>其代码为</p>
<pre class="javascript" name="code">beforeSelectRow: function (rowid, e) {
    var $myGrid = $(this),
        i = $.jgrid.getCellIndex($(e.target).closest('td')[0]),
        cm = $myGrid.jqGrid('getGridParam', 'colModel');
    return (cm[i].name === 'cb');
}
</pre>
<p>如果不需要复选框可以再jqgrid加载完的事件中加$(&quot;#mygrid&quot;).jqGrid('hideCol','cb');</p>
<p>另外我在国外网站上，已介绍了multiboxonly在3.6以后的版本中已没有介绍的那种功能，在3.4的版本中是能实现的（其介绍的链接为<a href="http://www.trirand.com/blog/?page_id=393/bugs/multiboxonly-property-bug/">http://www.trirand.com/blog/?page_id=393/bugs/multiboxonly-property-bug/</a>），所以3.6以后要实现所介绍的功能只能用以上的方法实现了</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>由于我的项目需要用到快捷键选取多行，经过设置multiselect:true,multikey:‘ctrlKey’，发现不能通过ctrl多行选择，后来发现，是由于我有上面贴的js，所以选择不了。删除上面那段js，能正常选择行，但同时也发现了另一个问题，选择checkbox后无效，又是个纠结的问题，只能通过谷歌的关键字去国外网站搜索，最后在<a href="https://github.com/gregorymostizky/jqGrid/commit/48121b4a4a31d2654e4272cdab317c067a9dc62e#diff-0">https://github.com/gregorymostizky/jqGrid/commit/48121b4a4a31d2654e4272cdab317c067a9dc62e#diff-0</a>中修改jqgrid的源代码解决了这个问题</p>
<p>&nbsp;</p>
<p>特此分享以上问题的解决方法</p>
<p>另保存<a href="http://www.trirand.com/blog/?page_id=393/help/multiselect-with-shift-to-emulate-the-same-behaviour-as-in-the-file-explorer/">http://www.trirand.com/blog/?page_id=393/help/multiselect-with-shift-to-emulate-the-same-behaviour-as-in-the-file-explorer/</a>，此方案用于快捷键选择多行，按住快捷键，选择第一行，再选择第10行，那中间8行会全部选中，给需要的人</p>
<p>&nbsp;总结，国外的牛人也很多，我还真的只是个码农</p>
<p>&nbsp;</p>
<p><br>
&nbsp;</p>

            <div>
                作者：zgjsczwj 发表于2012/8/6 16:36:17 <a href="http://blog.csdn.net/zgjsczwj/article/details/7835772">原文链接</a>
            </div>
            <div>
            阅读：5919 评论：3 <a href="http://blog.csdn.net/zgjsczwj/article/details/7835772#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[转]mvc中上传]]></title>
        <link>http://blog.csdn.net/zgjsczwj/article/details/7805136</link>
        <guid>http://blog.csdn.net/zgjsczwj/article/details/7805136</guid>
        <author>zgjsczwj</author>
        <pubDate>2012/7/31 11:40:51</pubDate>
        <description><![CDATA[
            
<p>如果你仅仅只有Asp.net Web Forms背景转而学习Asp.net MVC的，我想你的第一个经历或许是那些曾经让你的编程变得愉悦无比的服务端控件都驾鹤西去了.FileUpload就是其中一个，而这个控件的缺席给我们带来一些小问题。这篇文章主要说如何在Asp.net MVC中上传文件，然后如何再从服务器中把上传过的文件下载下来.</p>
<p>在Web Forms中,当你把一个FileUpload控件拖到设计器中，你或许没有注意到在生成的HTML中会在form标签中加入一条额外属性enctype=&quot;multipart/form-data&quot;. 而FileUpload控件本身会生成为&lt;input type=”file” /&gt;，在MVC的view里，有许多种方法可以做到同样效果，第一种的HTML如下:</p>
<p></p>
<div style="margin-left:15px; border-left-color:green; border-left-width:3px; border-left-style:solid">
<pre><span style="color:#00ff">&lt;</span><span style="color:#8000">form</span> <span style="color:#ff00">action</span>=<span style="color:#00ff">&quot;/&quot;</span> <span style="color:#ff00">method</span>=<span style="color:#00ff">&quot;post&quot;</span> <span style="color:#ff00">enctype</span>=<span style="color:#00ff">&quot;multipart/form-data&quot;</span><span style="color:#00ff">&gt;</span>
  <span style="color:#00ff">&lt;</span><span style="color:#8000">input</span> <span style="color:#ff00">type</span>=<span style="color:#00ff">&quot;file&quot;</span> <span style="color:#ff00">name</span>=<span style="color:#00ff">&quot;FileUpload1&quot;</span> <span style="color:#00ff">/&gt;</span><span style="color:#00ff">&lt;</span><span style="color:#8000">br</span> <span style="color:#00ff">/&gt;</span>
  <span style="color:#00ff">&lt;</span><span style="color:#8000">input</span> <span style="color:#ff00">type</span>=<span style="color:#00ff">&quot;submit&quot;</span> <span style="color:#ff00">name</span>=<span style="color:#00ff">&quot;Submit&quot;</span> <span style="color:#ff00">id</span>=<span style="color:#00ff">&quot;Submit&quot;</span> <span style="color:#ff00">value</span>=<span style="color:#00ff">&quot;Upload&quot;</span> <span style="color:#00ff">/&gt;</span>
<span style="color:#00ff">&lt;/</span><span style="color:#8000">form</span><span style="color:#00ff">&gt;</span></pre>
</div>
<p>注意form标签已经包括了enctype标签，而method属性则设为”post”,这样设置并不多于因为默认的提交时通过HTTP get方式进行的。下面这种方式，使用Html.BeginForm()扩展方法，会生成和上面同样的HTML：</p>
<div style="padding-left:3px; margin-left:15px; border-left-width:3px">
<p></p>
<span style="font-family:Courier New; background-color:rgb(255,255,0)"></span></div>
<div style="padding-left:3px; margin-left:15px; border-left-color:green; border-left-width:3px; border-left-style:solid">
<pre><span style="color:black; background-color:rgb(255,255,0)">&lt;%</span>
  using (Html.BeginForm(&quot;&quot;, &quot;home&quot;, FormMethod.Post, new {enctype=&quot;multipart/form-data&quot;})) 
   {<span style="color:black; background-color:rgb(255,255,0)">%&gt;</span> 
     <span style="color:#00ff">&lt;</span><span style="color:#8000">input</span> <span style="color:#ff00">type</span>=<span style="color:#00ff">&quot;file&quot;</span> <span style="color:#ff00">name</span>=<span style="color:#00ff">&quot;FileUpload1&quot;</span> <span style="color:#00ff">/&gt;</span><span style="color:#00ff">&lt;</span><span style="color:#8000">br</span> <span style="color:#00ff">/&gt;</span>
     <span style="color:#00ff">&lt;</span><span style="color:#8000">input</span> <span style="color:#ff00">type</span>=<span style="color:#00ff">&quot;submit&quot;</span> <span style="color:#ff00">name</span>=<span style="color:#00ff">&quot;Submit&quot;</span> <span style="color:#ff00">id</span>=<span style="color:#00ff">&quot;Submit&quot;</span> <span style="color:#ff00">value</span>=<span style="color:#00ff">&quot;Upload&quot;</span> <span style="color:#00ff">/&gt;</span>
<span style="color:black; background-color:rgb(255,255,0)">&lt;%</span> }<span style="color:black; background-color:rgb(255,255,0)">%&gt;</span></pre>
</div>
<p>注意&lt;input type=”file”&gt;标签的name属性，</p>
<p>OK,现在我们可以浏览本地文件然后通过Upload提交按钮将文件提交到服务器端，下一步就是在服务器端处理上传的文件，在使用fileUpload控件时，你可以很轻松的通过FileUpload的hasFile方法来查看文件是否被上传。但是在Asp.net MVC中貌&#20284;就不是这么方便了，你会和原始的HTTP更接近一些，然而，一个扩展方法可以处理这些:</p>
<div style="padding-left:3px; margin-left:15px; border-left-color:green; border-left-width:3px; border-left-style:solid">
<pre><span style="color:#00ff">public</span> <span style="color:#00ff">static</span> <span style="color:#00ff">bool</span> HasFile(<span style="color:#00ff">this</span> HttpPostedFileBase file)
{
  <span style="color:#00ff">return</span> (file != <span style="color:#00ff">null</span> &amp;&amp; file.ContentLength &gt; 0) ? <span style="color:#00ff">true</span> : <span style="color:#00ff">false</span>;
}</pre>
</div>
<p>当你看到对应的Controller类的代码时，你会发现Request对象作为HttpRequestBase类型的一个属性存在。HttpReuqestBase其实是HTTP请求的一个封装，暴漏了很多属性，包括Files collection（其实是HttpFileCollectionBase的集合）,在集合中的每一个元素都是HttpPostedFileBase的集合，扩展方法是用于确保上传的文件是否存在。实际上，这和FileUpload.HasFile()方法的工作原理一致。</p>
<p>在Controller Action中使用起来其实很容易:</p>
<div style="padding-left:3px; margin-left:15px; border-left-color:green; border-left-width:3px; border-left-style:solid">
<pre><span style="color:#00ff">public</span> <span style="color:#00ff">class</span> HomeController : Controller
{
  <span style="color:#00ff">public</span> ActionResult Index()
  {
    <span style="color:#00ff">foreach</span> (<span style="color:#00ff">string</span> upload <span style="color:#00ff">in</span> Request.Files)
    {
      <span style="color:#00ff">if</span> (!Request.Files[upload].HasFile()) <span style="color:#00ff">continue</span>;
      <span style="color:#00ff">string</span> path = AppDomain.CurrentDomain.BaseDirectory &#43; &quot;<span style="color:#8b00">uploads/</span>&quot;;
      <span style="color:#00ff">string</span> filename = Path.GetFileName(Request.Files[upload].FileName);
      Request.Files[upload].SaveAs(Path.Combine(path, filename));
    }
    <span style="color:#00ff">return</span> View();
  }
}</pre>
</div>
<p></p>
<h3><strong>多文件上传</strong></h3>
<p>或许你已经比我更早的想到如何更好的将Request.Files作为一个集合使用。这意味着它不仅仅只能容纳一个文件，而能容纳多个，我们将上面的View改为如下：</p>
<div style="padding-left:3px; margin-left:15px; border-left-color:green; border-left-width:3px; border-left-style:solid">
<pre><span style="color:black; background-color:rgb(255,255,0)">&lt;%</span>
  using (Html.BeginForm(&quot;&quot;, &quot;home&quot;, FormMethod.Post, new {enctype=&quot;multipart/form-data&quot;})) 
   {<span style="color:black; background-color:rgb(255,255,0)">%&gt;</span> 
     <span style="color:#00ff">&lt;</span><span style="color:#8000">input</span> <span style="color:#ff00">type</span>=<span style="color:#00ff">&quot;file&quot;</span> <span style="color:#ff00">name</span>=<span style="color:#00ff">&quot;FileUpload1&quot;</span> <span style="color:#00ff">/&gt;</span><span style="color:#00ff">&lt;</span><span style="color:#8000">br</span> <span style="color:#00ff">/&gt;</span>
     <span style="color:#00ff">&lt;</span><span style="color:#8000">input</span> <span style="color:#ff00">type</span>=<span style="color:#00ff">&quot;file&quot;</span> <span style="color:#ff00">name</span>=<span style="color:#00ff">&quot;FileUpload2&quot;</span> <span style="color:#00ff">/&gt;</span><span style="color:#00ff">&lt;</span><span style="color:#8000">br</span> <span style="color:#00ff">/&gt;</span>
     <span style="color:#00ff">&lt;</span><span style="color:#8000">input</span> <span style="color:#ff00">type</span>=<span style="color:#00ff">&quot;file&quot;</span> <span style="color:#ff00">name</span>=<span style="color:#00ff">&quot;FileUpload3&quot;</span> <span style="color:#00ff">/&gt;</span><span style="color:#00ff">&lt;</span><span style="color:#8000">br</span> <span style="color:#00ff">/&gt;</span>
     <span style="color:#00ff">&lt;</span><span style="color:#8000">input</span> <span style="color:#ff00">type</span>=<span style="color:#00ff">&quot;file&quot;</span> <span style="color:#ff00">name</span>=<span style="color:#00ff">&quot;FileUpload4&quot;</span> <span style="color:#00ff">/&gt;</span><span style="color:#00ff">&lt;</span><span style="color:#8000">br</span> <span style="color:#00ff">/&gt;</span>
     <span style="color:#00ff">&lt;</span><span style="color:#8000">input</span> <span style="color:#ff00">type</span>=<span style="color:#00ff">&quot;file&quot;</span> <span style="color:#ff00">name</span>=<span style="color:#00ff">&quot;FileUpload5&quot;</span> <span style="color:#00ff">/&gt;</span><span style="color:#00ff">&lt;</span><span style="color:#8000">br</span> <span style="color:#00ff">/&gt;</span>
     <span style="color:#00ff">&lt;</span><span style="color:#8000">input</span> <span style="color:#ff00">type</span>=<span style="color:#00ff">&quot;submit&quot;</span> <span style="color:#ff00">name</span>=<span style="color:#00ff">&quot;Submit&quot;</span> <span style="color:#ff00">id</span>=<span style="color:#00ff">&quot;Submit&quot;</span> <span style="color:#ff00">value</span>=<span style="color:#00ff">&quot;Upload&quot;</span> <span style="color:#00ff">/&gt;</span>
<span style="color:black; background-color:rgb(255,255,0)">&lt;%</span> }<span style="color:black; background-color:rgb(255,255,0)">%&gt;</span></pre>
</div>
<p></p>
<p></p>
<p>效果如下:</p>
<p>&nbsp;</p>
<p>在Controller的代码中已经检查了是否所有的文件上传框中都有文件，所以即使对于多文件上传，我们也不再需要修改Controller的代码，注意每一个&lt;input type=”file”&gt;都有不同的name属性,如果你需要调用其中一个，比如说，你需要引用第三个输入框只需要使用:Request.Files[&quot;FileUpload3&quot;].</p>
<p></p>
<h3><strong>存入数据库</strong></h3>
<p>在你冲我狂&#21564;”关注点分离”之前，我想声明下面的代码仅仅用于作为说明功能.我将ADO.Net的代码放入Controller action中，但我们都知道，这并不好。数据访问的代码应该放在Model中某个部分的数据访问层中.但是，下面这段代码仅仅可以给大家怎样将上传的文件存入数据库中一个更直观的印象，首先，我们需要创建一个数据表(FileTest)并创建一个表:FileStore</p>
<div style="padding-left:3px; margin-left:15px; border-left-color:green; border-left-width:3px; border-left-style:solid">
<pre><a href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=CREATE&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99" style="color:rgb(0,0,255)">CREATE</a> <a href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=TABLE&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99" style="color:rgb(0,0,255)">TABLE</a> [dbo].[FileStore](
[ID] [<a href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=int&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99" style="color:rgb(0,0,255)">int</a>] <a href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=IDENTITY&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99" style="color:rgb(0,0,255)">IDENTITY</a>(1,1) <a href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=NOT&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99" style="color:rgb(0,0,255)">NOT</a> <a href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=NULL&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99" style="color:rgb(0,0,255)">NULL</a>,
[FileContent] [<a href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=image&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99" style="color:rgb(0,0,255)">image</a>] <a href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=NOT&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99" style="color:rgb(0,0,255)">NOT</a> <a href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=NULL&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99" style="color:rgb(0,0,255)">NULL</a>,
[MimeType] [<a href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=nvarchar&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99" style="color:rgb(0,0,255)">nvarchar</a>](50) <a href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=NOT&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99" style="color:rgb(0,0,255)">NOT</a> <a href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=NULL&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99" style="color:rgb(0,0,255)">NULL</a>,
[FileName] [<a href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=nvarchar&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99" style="color:rgb(0,0,255)">nvarchar</a>](50) <a href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=NOT&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99" style="color:rgb(0,0,255)">NOT</a> <a href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=NULL&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99" style="color:rgb(0,0,255)">NULL</a>
) <a href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=ON&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99" style="color:rgb(0,0,255)">ON</a> [<a href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=PRIMARY&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99" style="color:rgb(0,0,255)">PRIMARY</a>] TEXTIMAGE_ON [<a href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=PRIMARY&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99" style="color:rgb(0,0,255)">PRIMARY</a>]</pre>
</div>
<p></p>
<p>FileContent域是image数据类型，用于存储以二进制数据形成的文件，而Index Action改为：</p>
<div style="padding-left:3px; margin-left:15px; border-left-color:green; border-left-width:3px; border-left-style:solid">
<pre><span style="color:#00ff">public</span> ActionResult Index()
{
  <span style="color:#00ff">foreach</span> (<span style="color:#00ff">string</span> upload <span style="color:#00ff">in</span> Request.Files)
  {
    <span style="color:#00ff">if</span> (!Request.Files[upload].HasFile()) <span style="color:#00ff">continue</span>;

    <span style="color:#00ff">string</span> mimeType = Request.Files[upload].ContentType;
    Stream fileStream = Request.Files[upload].InputStream;
    <span style="color:#00ff">string</span> fileName = Path.GetFileName(Request.Files[upload].FileName);
    <span style="color:#00ff">int</span> fileLength = Request.Files[upload].ContentLength;
    <span style="color:#00ff">byte</span>[] fileData = <span style="color:#00ff">new</span> <span style="color:#00ff">byte</span>[fileLength];
    fileStream.Read(fileData, 0, fileLength);

    <span style="color:#00ff">const</span> <span style="color:#00ff">string</span> connect = @&quot;<span style="color:#8b00">Server=.\SQLExpress;Database=FileTest;Trusted_Connection=True;</span>&quot;;
    <span style="color:#00ff">using</span> (var conn = <span style="color:#00ff">new</span> SqlConnection(connect))
    {
      var qry = &quot;<span style="color:#8b00">INSERT INTO FileStore (FileContent, MimeType, FileName) VALUES (@FileContent, @MimeType, @FileName)</span>&quot;;
      var cmd = <span style="color:#00ff">new</span> SqlCommand(qry, conn);
      cmd.Parameters.AddWithValue(&quot;<span style="color:#8b00">@FileContent</span>&quot;, fileData);
      cmd.Parameters.AddWithValue(&quot;<span style="color:#8b00">@MimeType</span>&quot;, mimeType);
      cmd.Parameters.AddWithValue(&quot;<span style="color:#8b00">@FileName</span>&quot;, fileName);
      conn.Open();
      cmd.ExecuteNonQuery();
    }
  }
  <span style="color:#00ff">return</span> View();
}</pre>
</div>
<p></p>
<p>修改后的代码会以循环的方式遍历Web页面中所有的上传文件，并检查&lt;input type=”file”&gt;中是否已经加入文件，然后，从文件中提取出3个信息：文件名，MIME类型(文件的类型)，HTTP Request中的二进制流。二进制数据被转换为byte数组，并以image数据类型存入数据库。MIME类型和文件名对于用户从数据库中提取文件来说非常重要。</p>
<p>将数据库中的文件返回给用户：</p>
<p>你如何将文件传送给用户取决于你最开始如何存储它，如果你将文件存入数据库，你会用流的方式将文件返还给用户，如果你将文件存在硬盘中，你只需要提供一个超链接即可，或者也可以以流的方式。每当你需要以流的方式将文件送到浏览器中，你都的使用到File()方法的重载（而不是使用我们先前一直使用的View()方法）,对于File()方法有3类返回类型：FilePathResult,FileContentResult和FileStreamResult,第一种类型用于直接从磁盘返回文件；第二种类型用于将byte数组返回客户端；而第三种方式将已经生成并打开的流对象的内容返回客户端。</p>
<p>如果你还记得的话，我们将上传的文件存入了数据库，并以byte数组的形式存入FileContent域内.而当需要提取时，它仍然会以一个byte数组进行提取，这意味着我们使用返回FileContentResult的File()重载,如果我们想让提取的文件名更有意义，我们使用接受3个参数的重载，三个参数是:byte数组，MIME类型，文件名:</p>
<div style="padding-left:3px; margin-left:15px; border-left-color:green; border-left-width:3px; border-left-style:solid">
<pre><span style="color:#00ff">public</span> FileContentResult GetFile(<span style="color:#00ff">int</span> id)
{
  SqlDataReader rdr; <span style="color:#00ff">byte</span>[] fileContent = <span style="color:#00ff">null</span>; 
  <span style="color:#00ff">string</span> mimeType = &quot;<span style="color:#8b00"></span>&quot;;<span style="color:#00ff">string</span> fileName = &quot;<span style="color:#8b00"></span>&quot;;
  <span style="color:#00ff">const</span> <span style="color:#00ff">string</span> connect = @&quot;<span style="color:#8b00">Server=.\SQLExpress;Database=FileTest;Trusted_Connection=True;</span>&quot;;

  <span style="color:#00ff">using</span> (var conn = <span style="color:#00ff">new</span> SqlConnection(connect))
  {
    var qry = &quot;<span style="color:#8b00">SELECT FileContent, MimeType, FileName FROM FileStore WHERE ID = @ID</span>&quot;;
    var cmd = <span style="color:#00ff">new</span> SqlCommand(qry, conn);
    cmd.Parameters.AddWithValue(&quot;<span style="color:#8b00">@ID</span>&quot;, id);
    conn.Open();
    rdr = cmd.ExecuteReader();
    <span style="color:#00ff">if</span> (rdr.HasRows)
    {
      rdr.Read();
      fileContent = (<span style="color:#00ff">byte</span>[])rdr[&quot;<span style="color:#8b00">FileContent</span>&quot;];
      mimeType = rdr[&quot;<span style="color:#8b00">MimeType</span>&quot;].ToString();
      fileName = rdr[&quot;<span style="color:#8b00">FileName</span>&quot;].ToString();
    }
  }
  <span style="color:#00ff">return</span> File(fileContent, mimeType, fileName);
}</pre>
</div>
<p>在View中最简单的使用来使用这个Action只需提供一个超链接：</p>
<div style="padding-left:3px; margin-left:15px; border-left-color:green; border-left-width:3px; border-left-style:solid">
<pre><span style="color:#00ff">&lt;</span><span style="color:#8000">a</span> <span style="color:#ff00">href</span>=<span style="color:#00ff">&quot;/GetFile/1&quot;</span><span style="color:#00ff">&gt;</span>Click to get file<span style="color:#00ff">&lt;/</span><span style="color:#8000">a</span><span style="color:#00ff">&gt;</span></pre>
</div>
<p>如果在数据库中存储的图片是图片类型，和使用超链接不同的是，我们通过指向Controller action的一个带有src属性的&lt;image&gt;标签来获取:</p>
<div style="padding-left:3px; margin-left:15px; border-left-color:green; border-left-width:3px; border-left-style:solid">
<pre><span style="color:#00ff">&lt;</span><span style="color:#8000">img</span> <span style="color:#ff00">src</span>=<span style="color:#00ff">&quot;/GetFile/1&quot;</span> <span style="color:#ff00">alt</span>=<span style="color:#00ff">&quot;My Image&quot;</span> <span style="color:#00ff">/&gt;</span></pre>
</div>
<p>下面再让我们来看看使用FilePathResult（用于从硬盘提取文件）是多简单的事：</p>
<div style="padding-left:3px; margin-left:15px; border-left-color:green; border-left-width:3px; border-left-style:solid">
<pre><span style="color:#00ff">public</span> FilePathResult GetFileFromDisk()
{
  <span style="color:#00ff">string</span> path = AppDomain.CurrentDomain.BaseDirectory &#43; &quot;<span style="color:#8b00">uploads/</span>&quot;;
  <span style="color:#00ff">string</span> fileName = &quot;<span style="color:#8b00">test.txt</span>&quot;;
  <span style="color:#00ff">return</span> File(path &#43; fileName, &quot;<span style="color:#8b00">text/plain</span>&quot;, &quot;<span style="color:#8b00">test.txt</span>&quot;);
}</pre>
</div>
<p>而这也可以用过超链接提取:</p>
<div style="padding-left:3px; margin-left:15px; border-left-color:green; border-left-width:3px; border-left-style:solid">
<pre><span style="color:#00ff">&lt;</span><span style="color:#8000">a</span> <span style="color:#ff00">href</span>=<span style="color:#00ff">&quot;/GetFileFromDisk&quot;</span><span style="color:#00ff">&gt;</span>Click to get file<span style="color:#00ff">&lt;/</span><span style="color:#8000">a</span><span style="color:#00ff">&gt;</span></pre>
</div>
<p>而最后一个选择FileStreamResult也可以从磁盘中提取文件:</p>
<div style="padding-left:3px; margin-left:15px; border-left-color:green; border-left-width:3px; border-left-style:solid">
<pre><span style="color:#00ff">public</span> FileStreamResult StreamFileFromDisk()
{
  <span style="color:#00ff">string</span> path = AppDomain.CurrentDomain.BaseDirectory &#43; &quot;<span style="color:#8b00">uploads/</span>&quot;;
  <span style="color:#00ff">string</span> fileName = &quot;<span style="color:#8b00">test.txt</span>&quot;;
  <span style="color:#00ff">return</span> File(<span style="color:#00ff">new</span> FileStream(path &#43; fileName, FileMode.Open), &quot;<span style="color:#8b00">text/plain</span>&quot;, fileName);
}</pre>
</div>
<p>FilePathResult和FileStreamResult的区别是什么？我们又该如何取舍呢？主要的区别是FilePathResult使用HttpResponse.TransmitFile来将文件写入Http输出流。这个方法并不会在服务器内存中进行缓冲，所以这对于发送大文件是一个不错的选择。他们的区别很像DataReader和DataSet的区别。于此同时， TransmitFile还有一个bug,这可能导致文件传到客户端一半就停了，甚至无法传送。而FileStreamResult在这方面就很棒了。比如说：返回Asp.net
 Chart 控件在内存中生成的图表图片，而这并不需要将图片存到磁盘中.</p>
<p>转自<a href="http://www.cnblogs.com/CareySon/archive/2009/12/23/1630902.html">http://www.cnblogs.com/CareySon/archive/2009/12/23/1630902.html</a></p>

            <div>
                作者：zgjsczwj 发表于2012/7/31 11:40:51 <a href="http://blog.csdn.net/zgjsczwj/article/details/7805136">原文链接</a>
            </div>
            <div>
            阅读：1878 评论：0 <a href="http://blog.csdn.net/zgjsczwj/article/details/7805136#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]jqgrid导出CSV]]></title>
        <link>http://blog.csdn.net/zgjsczwj/article/details/7803856</link>
        <guid>http://blog.csdn.net/zgjsczwj/article/details/7803856</guid>
        <author>zgjsczwj</author>
        <pubDate>2012/7/30 22:45:39</pubDate>
        <description><![CDATA[
            
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 最近一直在弄jqgrid，都是准备在新的项目上的难点。在此过程中遇到了jqgrid需要导出数据至csv，在网上查找了各种资料，没有现成的样例，网上只有导出当前页面上的表&#26684;，而项目需要导出所有的数据，所以只有自己在前辈的基础上修改了</p>
<p>以下代码根据网上js导出csv修改而成</p>
<pre class="javascript" name="code">$(&quot;#del&quot;).click(function () {
        var title = &quot;人员信息&quot;;
        var array = new Array();
        //alert($(&quot;thead&quot;).html());查看jqgrid形成的table的html样子										$(&quot;th&quot;).each(function (i, item) {//遍历jqgrid表头 											var idTemp = $(item).attr(&quot;id&quot;);//获取表头的字段，显示时是如list2_name，其中list2为table的id  					if ($(&quot;#&quot; + idTemp).css(&quot;display&quot;) != &quot;none&quot;) {											//获取显示的字段和列名，由于此项目可以让客户配置列的显示和顺序，所以导出数据时也要判断哪些列需要导出，哪些不需要导出 				var id = idTemp.replace(&quot;list2_&quot;, &quot;&quot;);
                var colName = $(item).text();
                var obj = colName + &quot;,&quot; + id;
                array.push(obj);
            }
        });
        $.ajax({//获取返回的json数据，data是传递后台所需要查询的字段										    type: &quot;POST&quot;,
            url: &quot;Account/Export&quot;,
            data: { &quot;ID&quot;: &quot;id&quot;, &quot;UserNo&quot;: &quot;userNo&quot;, &quot;Name&quot;: &quot;Name&quot;, &quot;Password&quot;: &quot;Password&quot;, &quot;Email&quot;: &quot;Email&quot; },
            dataType: &quot;json&quot;,
            success: function (data) {
                getXlsFromTbl(array, data, title)
            }
        });
        
        
    });

    function getXlsFromTbl(array, data, title) {
        try {
            var allStr = &quot;&quot;;
            var curStr = &quot;&quot;;
            if (array != null &amp;&amp; data != null) {
                curStr = getTblData(array, data, title);
            } 
            if (curStr != null) {
                allStr += curStr;
            } else {
                alert(&quot;你要导出的表不存在！&quot;);
                return;
            }
            
            var fileName = getExcelFileName(title);
            doFileExport(fileName, allStr);
        }
        catch (e) {
            alert(&quot;导出发生异常:&quot; + e.name + &quot;-&gt;&quot; + e.description + &quot;!&quot;);
        }
    }
</pre><pre class="javascript" name="code">function getTblData(array, data, title) {
        var outStr = &quot;&quot;;
        for (i = 0; i &lt; array.length; i++) {//这里是写入列名，即在页面上显示的名称
            var temp=(array[i].split(','))[0];
            if (temp != null &amp;&amp; temp != &quot;&quot;) {
                outStr += temp + &quot;\t&quot;;
            }
        }
        outStr += &quot;\r\n&quot;;
        for (i = 0; i &lt; data.length; i++) {//这里是界面上的字段和返回的json中的数据字段匹配，匹配的就是界面要求显示的，不匹配的就不输出
            var dataObj = data[i];
            for (j = 0; j &lt; array.length; j++) {
                for (var temp in dataObj) {
                    if (temp == (array[j].split(','))[1]) {
                        outStr += dataObj[temp] + &quot;\t&quot;;
                    }
                }
            }
            outStr += &quot;\r\n&quot;;
        }
        return outStr;
    }
    function getExcelFileName(title) {
        var d = new Date();
        var curYear = d.getYear();
        var curMonth = &quot;&quot; + (d.getMonth() + 1);
        var curDate = &quot;&quot; + d.getDate();
        var curHour = &quot;&quot; + d.getHours();
        var curMinute = &quot;&quot; + d.getMinutes();
        var curSecond = &quot;&quot; + d.getSeconds();
        if (curMonth.length == 1) {
            curMonth = &quot;0&quot; + curMonth;
        }
        if (curDate.length == 1) {
            curDate = &quot;0&quot; + curDate;
        }
        if (curHour.length == 1) {
            curHour = &quot;0&quot; + curHour;
        }
        if (curMinute.length == 1) {
            curMinute = &quot;0&quot; + curMinute;
        }
        if (curSecond.length == 1) {
            curSecond = &quot;0&quot; + curSecond;
        }
        var fileName = title + &quot;_&quot; + curYear + curMonth + curDate + &quot;_&quot;
            + curHour + curMinute + curSecond + &quot;.csv&quot;;
        //alert(fileName); 
        return fileName;
    }
    function doFileExport(inName, inStr) {//这段是抄袭网上的，在html中一定要有&lt;iframe id=&quot;HideFrm&quot; style=&quot;display: none&quot;&gt;&lt;/iframe&gt; 
        var xlsWin = null;
        if (!!document.all(&quot;HideFrm&quot;)) {
            xlsWin = HideFrm;
        }
        else {
            var width = 6;
            var height = 4;
            var openPara = &quot;left=&quot; + (window.screen.width / 2 - width / 2)
                + &quot;,top=&quot; + (window.screen.height / 2 - height / 2)
                + &quot;,scrollbars=no,width=&quot; + width + &quot;,height=&quot; + height;
            xlsWin = window.open(&quot;&quot;, &quot;_blank&quot;, openPara);
        }
        xlsWin.document.write(inStr);
        xlsWin.document.close();      
        xlsWin.document.execCommand('Saveas', false, inName);//这儿方法看了很久，没有找到具体参数的意义					xlsWin.close();														}    </pre>
<p>这段js能实现导出csv形式的文件，但只是形&#20284;。通过比较，一般的csv文件是以逗号分隔开，而且编码&#26684;式是ANSI，但以上导出的是以空&#26684;分隔开，编码&#26684;式是以UNICODE所以说只能说是形&#20284;。由于本项目需要导出后再导入进去，所以需要标准的csv&#26684;式，就需要想另一种方法保存。</p>
<pre class="javascript" name="code">function doFileExport(inName, inStr) {//这段是抄袭网上的，在html中一定要有&lt;iframe id=&quot;HideFrm&quot; style=&quot;display: none&quot;&gt;&lt;/iframe&gt; 
        var file_name=window.prompt(&quot;请指定输出文件名称(.txt)&quot;,&quot;C://ExportTxt.txt&quot;);
        file_name=file_name.split(&quot;//&quot;).join(&quot;////&quot;);
        alert(inStr);
        var FSO=new ActiveXObject(&quot;Scripting.FileSystemObject&quot;);
        var f1 = FSO.CreateTextFile(&quot;c:\\testfile.csv&quot;, true); 
        f1.write(inStr); 
        f1.close();
    } </pre>
<p>以上运行会发现报参数错误的问题，在网上找FSO.CreateTextFile的方法也没找到能使我理解什么地方出的问题（是由于字符串空&#26684;造成的原因），最后经过调试，发现是由于形成字符串的表头有问题，不知道是空&#26684;的原因还是什么情况，把表头那字符串去掉就能正常形成标准的csv文件（当如，字符串的空&#26684;分隔符都换成逗号才行）</p>
<p>最后在想到由于导入还需要操作，把导入和导出都写在前台&#20284;乎太不安全了，于是确定都写到后台去，只是把以上的js方法保留下来，供以后的朋友少走弯路！<br>
<br>
目前导出改成在后台进行，把前台的列顺序，可见列的列名及列&#20540;传到后台，在后台先生成csv文件，再通过下载到客户端电脑，以下是下载文件到客户端电脑的方法</p>
<p>一.public FilePathResult GetFileFromDisk()//此方法不能下载后删除源文件<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string path = @&quot;C:\Users\jiangxk\Desktop\&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string fileName = &quot;20120801_095853.csv&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return File(path &#43; fileName, &quot;text/plain&quot;, &quot;20120801_101039.csv&quot;);//或者return File(new FileStream(path&#43;fileName, FileMode.Open), &quot;application/octet-stream&quot;, Server.UrlEncode(fileName));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p>或者</p>
<p>二.FileInfo file = new FileInfo(filePath);//此方法能删除源文件<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Response.Clear(); //清除缓冲区流中的所有内容输出<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Response.ClearHeaders(); //清除缓冲区流中的所有头，不知道为什么，不写这句会显示错误页面<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Response.ClearContent();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Response.Buffer = true;//设置缓冲输出为false<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置输出流的 HTTP MIME 类型为application/octet-stream<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Response.ContentType = &quot;application/octet-stream&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //将 HTTP 头添加到输出流<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Response.AppendHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=&quot; &#43; DateTime.Now.ToString(&quot;yyyMMdd_hhmmss&quot;) &#43; &quot;.csv&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Response.AppendHeader(&quot;Content-Length&quot;, file.Length.ToString());<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //将指定的文件直接写入 HTTP 内容输出流。<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //一定要注意是WriteFile不是Write<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Response.WriteFile(file.FullName);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Response.Flush();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //向客户端发送当前所有缓冲的输出<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Response.End();</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; file.Delete();//删除源文件</p>

            <div>
                作者：zgjsczwj 发表于2012/7/30 22:45:39 <a href="http://blog.csdn.net/zgjsczwj/article/details/7803856">原文链接</a>
            </div>
            <div>
            阅读：2725 评论：1 <a href="http://blog.csdn.net/zgjsczwj/article/details/7803856#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[转]jqgrid的导入和导出:jqGridImport &amp; jqGridExport]]></title>
        <link>http://blog.csdn.net/zgjsczwj/article/details/7785120</link>
        <guid>http://blog.csdn.net/zgjsczwj/article/details/7785120</guid>
        <author>zgjsczwj</author>
        <pubDate>2012/7/25 15:46:08</pubDate>
        <description><![CDATA[
            
<div id="cnblogs_post_body">
<p>今天看到一个很好的ASP.NET MVC Razor使用jqGrid的<a href="http://tpeczek.codeplex.com/releases/view/61796" target="_blank">示例</a>，本文正是学习此示例中的一个功能。有关jqGridImport的文档，请参考<a href="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:import_methods" target="_blank">这里</a></p>
<p>jqGrid还有一个很有用的功能，可以导入和导出jqGrid的配置，这就意味着：使用c#的匿名类加上JsonResult(ASP.NET MVC)用C#的代码生成jqGrid，而不再使用js代码，很多人都怕写js，宁愿写两行C#都不愿意写一行js，这个功能对于不愿意写js的兄弟来说真是一个福音啊，天也不早了，直接上内容吧。</p>
<p>Razor下View是这样写的</p>
<div class="cnblogs_Highlighter">
<div>
<div id="highlighter_360050" class="syntaxhighlighter nogutter  html ie">
<div class="toolbar"><span><a class="toolbar_item command_help help" href="http://www.cnblogs.com/think8848/archive/2011/07/19/2110112.html#">?</a></span></div>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="html plain">@{</code></div>
<div class="line number2 index1 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp; </code><code class="html plain">Layout = null;</code></div>
<div class="line number3 index2 alt2"><code class="html plain">}</code></div>
<div class="line number4 index3 alt1"><code class="html plain">&lt;!DOCTYPE html&gt;</code></div>
<div class="line number5 index4 alt2"><code class="html plain">&lt;</code><code class="html keyword">html</code><code class="html plain">&gt;</code></div>
<div class="line number6 index5 alt1"><code class="html plain">&lt;</code><code class="html keyword">head</code><code class="html plain">&gt;</code></div>
<div class="line number7 index6 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp; </code><code class="html plain">&lt;</code><code class="html keyword">title</code><code class="html plain">&gt;jqGridImport&lt;/</code><code class="html keyword">title</code><code class="html plain">&gt;</code></div>
<div class="line number8 index7 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp; </code><code class="html plain">&lt;</code><code class="html keyword">link</code>
<code class="html color1">href</code><code class="html plain">=</code><code class="html string">&quot;@Url.Content(&quot;</code><code class="html plain">~/Content/themes/base/site.css&quot;)&quot;
</code><code class="html color1">rel</code><code class="html plain">=</code><code class="html string">&quot;Stylesheet&quot;</code>
<code class="html color1">type</code><code class="html plain">=</code><code class="html string">&quot;text/css&quot;</code>
<code class="html plain">/&gt;</code></div>
<div class="line number9 index8 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp; </code><code class="html plain">&lt;</code><code class="html keyword">link</code>
<code class="html color1">href</code><code class="html plain">=</code><code class="html string">&quot;@Url.Content(&quot;</code><code class="html plain">~/Content/themes/base/jquery.ui.css&quot;)&quot;
</code><code class="html color1">rel</code><code class="html plain">=</code><code class="html string">&quot;Stylesheet&quot;</code>
<code class="html color1">type</code><code class="html plain">=</code><code class="html string">&quot;text/css&quot;</code>
<code class="html plain">/&gt;</code></div>
<div class="line number10 index9 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp; </code><code class="html plain">&lt;</code><code class="html keyword">link</code>
<code class="html color1">href</code><code class="html plain">=</code><code class="html string">&quot;@Url.Content(&quot;</code><code class="html plain">~/Content/themes/base/jquery.jqgrid.css&quot;)&quot;
</code><code class="html color1">rel</code><code class="html plain">=</code><code class="html string">&quot;Stylesheet&quot;</code>
<code class="html color1">type</code><code class="html plain">=</code><code class="html string">&quot;text/css&quot;</code>
<code class="html plain">/&gt;</code></div>
<div class="line number11 index10 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp; </code><code class="html plain">&lt;</code><code class="html keyword">script</code>
<code class="html color1">src</code><code class="html plain">=</code><code class="html string">&quot;@Url.Content(&quot;</code><code class="html plain">~/Scripts/jquery.js&quot;)&quot;
</code><code class="html color1">type</code><code class="html plain">=</code><code class="html string">&quot;text/javascript&quot;</code><code class="html plain">&gt;&lt;/</code><code class="html keyword">script</code><code class="html plain">&gt;</code></div>
<div class="line number12 index11 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp; </code><code class="html plain">&lt;</code><code class="html keyword">script</code>
<code class="html color1">src</code><code class="html plain">=</code><code class="html string">&quot;@Url.Content(&quot;</code><code class="html plain">~/Scripts/jquery.ui.js&quot;)&quot;
</code><code class="html color1">type</code><code class="html plain">=</code><code class="html string">&quot;text/javascript&quot;</code><code class="html plain">&gt;&lt;/</code><code class="html keyword">script</code><code class="html plain">&gt;</code></div>
<div class="line number13 index12 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp; </code><code class="html plain">&lt;</code><code class="html keyword">script</code>
<code class="html color1">src</code><code class="html plain">=</code><code class="html string">&quot;@Url.Content(&quot;</code><code class="html plain">~/Scripts/i18n/grid.locale-cn.js&quot;)&quot;
</code><code class="html color1">type</code><code class="html plain">=</code><code class="html string">&quot;text/javascript&quot;</code><code class="html plain">&gt;&lt;/</code><code class="html keyword">script</code><code class="html plain">&gt;</code></div>
<div class="line number14 index13 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp; </code><code class="html plain">&lt;</code><code class="html keyword">script</code>
<code class="html color1">src</code><code class="html plain">=</code><code class="html string">&quot;@Url.Content(&quot;</code><code class="html plain">~/Scripts/jquery.jqgrid.js&quot;)&quot;
</code><code class="html color1">type</code><code class="html plain">=</code><code class="html string">&quot;text/javascript&quot;</code><code class="html plain">&gt;&lt;/</code><code class="html keyword">script</code><code class="html plain">&gt;</code></div>
<div class="line number15 index14 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp; </code><code class="html plain">&lt;</code><code class="html keyword">script</code>
<code class="html color1">type</code><code class="html plain">=</code><code class="html string">&quot;text/javascript&quot;</code><code class="html plain">&gt;</code></div>
<div class="line number16 index15 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code>
<code class="html plain">$(function () {</code></div>
<div class="line number17 index16 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code>
<code class="html plain">$('#grid').jqGridImport({</code></div>
<div class="line number18 index17 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</code><code class="html plain">imptype: 'json',</code></div>
<div class="line number19 index18 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</code><code class="html plain">impurl: '@Url.Action(&quot;Import&quot;, &quot;Home&quot;)',</code></div>
<div class="line number20 index19 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</code><code class="html plain">mtype: 'GET',</code></div>
<div class="line number21 index20 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</code><code class="html plain">jsonGrid: {</code></div>
<div class="line number22 index21 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</code><code class="html plain">config: 'configs'</code></div>
<div class="line number23 index22 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</code><code class="html plain">}</code></div>
<div class="line number24 index23 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code>
<code class="html plain">});</code></div>
<div class="line number25 index24 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code>
<code class="html plain">});</code></div>
<div class="line number26 index25 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp; </code><code class="html plain">&lt;/</code><code class="html keyword">script</code><code class="html plain">&gt;</code></div>
<div class="line number27 index26 alt2"><code class="html plain">&lt;/</code><code class="html keyword">head</code><code class="html plain">&gt;</code></div>
<div class="line number28 index27 alt1"><code class="html plain">&lt;</code><code class="html keyword">body</code>
<code class="html color1">style</code><code class="html plain">=</code><code class="html string">&quot;padding: 10px;&quot;</code><code class="html plain">&gt;</code></div>
<div class="line number29 index28 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp; </code><code class="html plain">&lt;</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div>
<div class="line number30 index29 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code>
<code class="html plain">&lt;</code><code class="html keyword">table</code> <code class="html color1">
id</code><code class="html plain">=</code><code class="html string">&quot;grid&quot;</code><code class="html plain">&gt;</code></div>
<div class="line number31 index30 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code>
<code class="html plain">&lt;/</code><code class="html keyword">table</code><code class="html plain">&gt;</code></div>
<div class="line number32 index31 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code>
<code class="html plain">&lt;</code><code class="html keyword">div</code> <code class="html color1">
id</code><code class="html plain">=</code><code class="html string">&quot;pager&quot;</code><code class="html plain">&gt;</code></div>
<div class="line number33 index32 alt2"><code class="html spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code>
<code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div>
<div class="line number34 index33 alt1"><code class="html spaces">&nbsp;&nbsp;&nbsp; </code><code class="html plain">&lt;/</code><code class="html keyword">div</code><code class="html plain">&gt;</code></div>
<div class="line number35 index34 alt2"><code class="html plain">&lt;/</code><code class="html keyword">body</code><code class="html plain">&gt;</code></div>
<div class="line number36 index35 alt1"><code class="html plain">&lt;/</code><code class="html keyword">html</code><code class="html plain">&gt;</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>这里我对代码中用到的几个选项做个说明，没有用到的请参考<a href="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:import_methods" target="_blank">这里</a>的文档</p>
<p>imptype:jqGrid导入&quot;模板&quot;(请允许我给它起了这么一个不伦不类的名称，下同)是json&#26684;式的，当然，还可以是xml&#26684;式的，但是我想一般也没有人用xml，就没有深究。</p>
<p>impurl:jqGrid导入&quot;模板&quot;是从该url获取的。</p>
<p>mtype:这个简单，是获取导入&quot;模板&quot;的http方法。</p>
<p>jsonGrid：从哪里获取json&#26684;式的导入&quot;模板&quot;配置选项，这里稍作解释，从impurl中获取的是一个对象,jsonGrid中的config指的是获取到的这个对象的哪个属性是配置选项，过会看了后台代码就比较好理解了。</p>
<p></p>
<p>OK，现在来看后台代码是啥样的吧：</p>
<div class="cnblogs_Highlighter">
<div>
<div id="highlighter_695508" class="syntaxhighlighter nogutter  csharp ie">
<div class="toolbar"><span><a class="toolbar_item command_help help" href="http://www.cnblogs.com/think8848/archive/2011/07/19/2110112.html#">?</a></span></div>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp plain">
ActionResult Import()</code></div>
<div class="line number2 index1 alt1"><code class="csharp plain">{</code></div>
<div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp; </code><code class="csharp plain">var configs =
</code><code class="csharp keyword">new</code></div>
<div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp; </code><code class="csharp plain">{</code></div>
<div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code>
<code class="csharp plain">url = </code><code class="csharp string">&quot;/User/Index&quot;</code><code class="csharp plain">,</code></div>
<div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code>
<code class="csharp plain">datatype = </code><code class="csharp string">&quot;json&quot;</code><code class="csharp plain">,</code></div>
<div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code>
<code class="csharp plain">mtype = </code><code class="csharp string">&quot;GET&quot;</code><code class="csharp plain">,</code></div>
<div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code>
<code class="csharp plain">colNames = </code><code class="csharp keyword">new</code><code class="csharp plain">[] {
</code><code class="csharp string">&quot;主键&quot;</code><code class="csharp plain">, </code>
<code class="csharp string">&quot;姓名&quot;</code><code class="csharp plain">, </code><code class="csharp string">&quot;邮箱&quot;</code>
<code class="csharp plain">},</code></div>
<div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code>
<code class="csharp plain">colModel = </code><code class="csharp keyword">new</code><code class="csharp plain">[] {
</code></div>
<div class="line number10 index9 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code>
<code class="csharp keyword">new</code> <code class="csharp plain">{ name = </code>
<code class="csharp string">&quot;ID&quot;</code><code class="csharp plain">, index = </code>
<code class="csharp string">&quot;ID&quot;</code><code class="csharp plain">, width = 200, hidden=</code><code class="csharp keyword">true</code><code class="csharp plain">, align =
</code><code class="csharp string">&quot;left&quot;</code> <code class="csharp plain">},</code></div>
<div class="line number11 index10 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code>
<code class="csharp keyword">new</code> <code class="csharp plain">{ name = </code>
<code class="csharp string">&quot;Name&quot;</code><code class="csharp plain">, index = </code>
<code class="csharp string">&quot;Name&quot;</code><code class="csharp plain">, width = 200,hidden=</code><code class="csharp keyword">false</code><code class="csharp plain">, align =
</code><code class="csharp string">&quot;left&quot;</code> <code class="csharp plain">},</code></div>
<div class="line number12 index11 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code>
<code class="csharp keyword">new</code> <code class="csharp plain">{ name = </code>
<code class="csharp string">&quot;Mail&quot;</code><code class="csharp plain">, index = </code>
<code class="csharp string">&quot;Mail&quot;</code><code class="csharp plain">, width = 200,hidden=</code><code class="csharp keyword">false</code><code class="csharp plain">, align =
</code><code class="csharp string">&quot;left&quot;</code> <code class="csharp plain">} </code>
</div>
<div class="line number13 index12 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code>
<code class="csharp plain">},</code></div>
<div class="line number14 index13 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code>
<code class="csharp plain">sortname = </code><code class="csharp string">&quot;Name&quot;</code><code class="csharp plain">,</code></div>
<div class="line number15 index14 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code>
<code class="csharp plain">sortorder = </code><code class="csharp string">&quot;asc&quot;</code><code class="csharp plain">,</code></div>
<div class="line number16 index15 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code>
<code class="csharp plain">rowNum = 10,</code></div>
<div class="line number17 index16 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code>
<code class="csharp plain">rowList = </code><code class="csharp keyword">new</code><code class="csharp plain">[] { 10, 15, 20 },</code></div>
<div class="line number18 index17 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code>
<code class="csharp plain">pager = </code><code class="csharp string">&quot;#pager&quot;</code><code class="csharp plain">,</code></div>
<div class="line number19 index18 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code>
<code class="csharp plain">viewrecords = </code><code class="csharp keyword">true</code><code class="csharp plain">,</code></div>
<div class="line number20 index19 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code>
<code class="csharp plain">height = </code><code class="csharp string">&quot;auto&quot;</code><code class="csharp plain">,</code></div>
<div class="line number21 index20 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code>
<code class="csharp plain">width = </code><code class="csharp string">&quot;auto&quot;</code></div>
<div class="line number22 index21 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp; </code><code class="csharp plain">};</code></div>
<div class="line number23 index22 alt2"></div>
<div class="line number24 index23 alt1"></div>
<div class="line number25 index24 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp; </code><code class="csharp keyword">return</code>
<code class="csharp plain">Json(</code><code class="csharp keyword">new</code> <code class="csharp plain">
{ configs = configs }, JsonRequestBehavior.AllowGet);</code></div>
<div class="line number26 index25 alt1"><code class="csharp plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>以上这个Action就是提供导入&quot;模板&quot;配置选项的服务，假设你的View名称为ImportDemo.cshtml的话，那么整个请求用到的代码还应该包括一个MVC打开视图的Action:</p>
<div class="cnblogs_Highlighter">
<div>
<div id="highlighter_524878" class="syntaxhighlighter nogutter  csharp ie">
<div class="toolbar"><span><a class="toolbar_item command_help help" href="http://www.cnblogs.com/think8848/archive/2011/07/19/2110112.html#">?</a></span></div>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="csharp keyword">public</code> <code class="csharp plain">
ActionResult ImportDemo()</code></div>
<div class="line number2 index1 alt1"><code class="csharp plain">{</code></div>
<div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp; </code><code class="csharp keyword">return</code>
<code class="csharp plain">View();</code></div>
<div class="line number4 index3 alt1"><code class="csharp plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>最终，只要你开启ImportDemo视图，就会自动到Import服务中获取&quot;模板&quot;</p>
<p><img alt="" src="http://pic002.cnblogs.com/images/2011/1781/2011071900184084.jpg"></p>
<p><a href="http://files.cnblogs.com/think8848/jqGridImport.rar">源代码下载</a></p>
<p>附官方文档，很是对不起，昨晚我说官方没有文档，今天早上来就发现了</p>
<h3 style="margin:0px 0px 0.3em; color:black; padding-top:0.5em; padding-bottom:0.17em; font-size:17px; font-weight:bold; border-bottom-style:none">
<a id="importing" name="importing" style="color:rgb(0,0,0); text-decoration:none">Importing</a></h3>
<div class="level3">
<p style="margin:0.4em 0px 0.5em; line-height:1.5em">This method reads the grid configuration according to the rules in options and constructs the grid. When constructing the grid for first time it is possible to pass data to it again with the configuration.
 This is done with jqGirdImport</p>
<pre class="code javascript">   jQuery<span class="br0" style="color:#66cc66">(</span><span class="st0" style="color:#ff00">&quot;#grid_id&quot;</span><span class="br0" style="color:#66cc66">)</span>.<span class="me1" style="color:#0660">jqGridImport</span><span class="br0" style="color:#66cc66">(</span>options<span class="br0" style="color:#66cc66">)</span>;</pre>
<p style="margin:0.4em 0px 0.5em; line-height:1.5em">Where</p>
<ul style="margin:0.3em 0px 0px 1.5em; padding:0px; line-height:1.5em; list-style-type:square">
<li class="level1" style="margin-bottom:0.1em">
<div class="li">grid_id is the id of the table element where the grid should be constructed</div>
</li><li class="level1" style="margin-bottom:0.1em">
<div class="li">options is array of pair name:value to set different configuration listed bellow</div>
</li></ul>
<table class="inline " style="">
<tbody>
<tr class="row0">
<th class="col0" style="padding:3px; border:1px solid rgb(140,172,187); background-color:rgb(222,231,236)">
Option</th>
<th class="col1" style="padding:3px; border:1px solid rgb(140,172,187); background-color:rgb(222,231,236)">
Type</th>
<th class="col2" style="padding:3px; border:1px solid rgb(140,172,187); background-color:rgb(222,231,236)">
Description</th>
<th class="col3" style="padding:3px; border:1px solid rgb(140,172,187); background-color:rgb(222,231,236)">
Default</th>
</tr>
<tr class="row1">
<td class="col0" style="padding:3px; border:1px solid rgb(140,172,187)">imptype</td>
<td class="col1" style="padding:3px; border:1px solid rgb(140,172,187)">string</td>
<td class="col2" style="padding:3px; border:1px solid rgb(140,172,187)">Determines the type of import Can be one of the following values xml, json, xmlstring, jsonstring</td>
<td class="col3" style="padding:3px; border:1px solid rgb(140,172,187)">xml</td>
</tr>
<tr class="row2">
<td class="col0" style="padding:3px; border:1px solid rgb(140,172,187)">impstring</td>
<td class="col1" style="padding:3px; border:1px solid rgb(140,172,187)">string</td>
<td class="col2" style="padding:3px; border:1px solid rgb(140,172,187)">in case of xmlstring or jsonstring this should be set</td>
<td class="col3" style="padding:3px; border:1px solid rgb(140,172,187)">&nbsp;</td>
</tr>
<tr class="row3">
<td class="col0" style="padding:3px; border:1px solid rgb(140,172,187)">impurl</td>
<td class="col1" style="padding:3px; border:1px solid rgb(140,172,187)">string</td>
<td class="col2" style="padding:3px; border:1px solid rgb(140,172,187)">valid url to the configuration when xml or json. The data is obtained via ajax request</td>
<td class="col3" style="padding:3px; border:1px solid rgb(140,172,187)">&nbsp;</td>
</tr>
<tr class="row4">
<td class="col0" style="padding:3px; border:1px solid rgb(140,172,187)">mtype</td>
<td class="col1" style="padding:3px; border:1px solid rgb(140,172,187)">string</td>
<td class="col2" style="padding:3px; border:1px solid rgb(140,172,187)">Determines the type of request. Can be GET or POST</td>
<td class="col3" style="padding:3px; border:1px solid rgb(140,172,187)">GET</td>
</tr>
<tr class="row5">
<td class="col0" style="padding:3px; border:1px solid rgb(140,172,187)">impData</td>
<td class="col1" style="padding:3px; border:1px solid rgb(140,172,187)">object</td>
<td class="col2" style="padding:3px; border:1px solid rgb(140,172,187)">additional data that can be passed to the url in pair name:value</td>
<td class="col3" style="padding:3px; border:1px solid rgb(140,172,187)">empty object {}</td>
</tr>
<tr class="row6">
<td class="col0" style="padding:3px; border:1px solid rgb(140,172,187)">xmlGrid</td>
<td class="col1" style="padding:3px; border:1px solid rgb(140,172,187)">object</td>
<td class="col2" style="padding:3px; border:1px solid rgb(140,172,187)">describes from where to read the xml configuration and from where the data if any. The option config describes the configuration tag. The option data describes the data tag</td>
<td class="col3" style="padding:3px; border:1px solid rgb(140,172,187)">config : “roots&gt;grid”,<br>
data: “roots&gt;rows”</td>
</tr>
<tr class="row7">
<td class="col0" style="padding:3px; border:1px solid rgb(140,172,187)">jsonGrid</td>
<td class="col1" style="padding:3px; border:1px solid rgb(140,172,187)">object</td>
<td class="col2" style="padding:3px; border:1px solid rgb(140,172,187)">describes from where to read the json configuration and from where the data if any. The option config describes the configuration tag. The option data describes the data tag</td>
<td class="col3" style="padding:3px; border:1px solid rgb(140,172,187)">config : “grid”,<br>
data: “data”</td>
</tr>
<tr class="row8">
<td class="col0" style="padding:3px; border:1px solid rgb(140,172,187)">ajaxOptions</td>
<td class="col1" style="padding:3px; border:1px solid rgb(140,172,187)">object</td>
<td class="col2" style="padding:3px; border:1px solid rgb(140,172,187)">Additional options which can be passed to the ajax request</td>
<td class="col3" style="padding:3px; border:1px solid rgb(140,172,187)">empty object {}</td>
</tr>
</tbody>
</table>
</div>
<h3 style="margin:0px 0px 0.3em; color:black; padding-top:0.5em; padding-bottom:0.17em; font-size:17px; font-weight:bold; border-bottom-style:none">
<a id="events" name="events" style="color:rgb(0,0,0); text-decoration:none">Events</a></h3>
<div class="level3">
<p style="margin:0.4em 0px 0.5em; line-height:1.5em">There is only one event which can be called in jqGridImport.</p>
<table class="inline " style="">
<tbody>
<tr class="row0">
<th class="col0" style="padding:3px; border:1px solid rgb(140,172,187); background-color:rgb(222,231,236)">
Event</th>
<th class="col1" style="padding:3px; border:1px solid rgb(140,172,187); background-color:rgb(222,231,236)">
Description</th>
</tr>
<tr class="row1">
<td class="col0" style="padding:3px; border:1px solid rgb(140,172,187)">importComplete</td>
<td class="col1" style="padding:3px; border:1px solid rgb(140,172,187)">This event is called after the successfully import and when the grid is constructed. To this event we pas the request from server. Use this event to set additional parameters in the grid
 or to construct the navigator</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="MySignature"></div>
<div id="blog_post_info_block">
<div id="blog_post_info">
<div id="BlogPostCategory">分类: <a href="http://www.cnblogs.com/think8848/category/222211.html">
jQuery</a></div>
</div>
</div>

            <div>
                作者：zgjsczwj 发表于2012/7/25 15:46:08 <a href="http://blog.csdn.net/zgjsczwj/article/details/7785120">原文链接</a>
            </div>
            <div>
            阅读：2392 评论：0 <a href="http://blog.csdn.net/zgjsczwj/article/details/7785120#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[转]jqGrid链接]]></title>
        <link>http://blog.csdn.net/zgjsczwj/article/details/7779991</link>
        <guid>http://blog.csdn.net/zgjsczwj/article/details/7779991</guid>
        <author>zgjsczwj</author>
        <pubDate>2012/7/24 14:46:55</pubDate>
        <description><![CDATA[
            
<p>jqGrid中自定义&#26684;式，URL&#26684;式</p>
<p>当官方自带的showlink用起来不是十分顺手，因此可以考虑自己定义url&#26684;式</p>
<p>自定义&#26684;式其实很简单，在formatter：处填写函数名</p>
<p>比如formatter:<span style="background-color:rgb(255,255,0)">makeURL</span></p>
<p>那么，可以创建一个makeURL函数。</p>
<p>该函数的签名必须遵循官方的约定，有3个参数。</p>
<p>function <span style="background-color:rgb(255,255,0)">makeURL</span>(cellvalue, options, rowObject ){</p>
<p>return urlstring;</p>
<p>}</p>
<p>cellvalue -就是要被&#26684;式化的&#20540;</p>
<p>options - 一个对象，包含的&#20540;是options : { rowId: rid, colModel: cm} rowId就是当前行的rowid，colModel就是jqgrid中定义的&#20540;</p>
<p>rowObject - 就是当前行的&#20540;。</p>
<p>各个&#20540;的赋&#20540;举例如下：</p>
<p>如果：colModel: [</p>
<p>{ name: &quot;filename&quot;, index: &quot;filename&quot;,&nbsp; 550, sorttype: &quot;string&quot;, sortable: true,formatter:<span style="background-color:rgb(255,255,0)">makeURL</span>},</p>
<p>{ name: &quot;datetime&quot;, index: &quot;datetime&quot;,&nbsp; 80, sorttype: &quot;string&quot;, formatter: &quot;string&quot;, sortable: true }</p>
<p>],</p>
<p>function <span style="background-color:rgb(255,255,0)">makeURL</span>(cellvalue, options, rowObject ){</p>
<p>alert(cellvalue);</p>
<p>alert(rowObject[&quot;test&quot;]);//此处的&#20540;为返回的json中对应的&#20540;。</p>
<p>alert(options[&quot;rowId&quot;]);</p>
<p>alert(options[&quot;colModel&quot;][&quot;name&quot;]);//此处返回的就是“filename”</p>
<p>}</p>
<p>有了这一招，返回一些自定义的URL就易如反掌，随便加什么参数都可以很容易的获得，只需要能从rowObject[&quot;test&quot;]之类的对象中取到数据即可。</p>
<p><span style="background-color:rgb(155,187,89)">还有一种更加简单直白的方式，就是直接在返回的json中，把要显示的字段直接用处理过的&lt;A&gt;这种&#26684;式处理。那样的话，直接在表&#26684;里显示的就是已经可以直接使用的链接了。</span></p>

            <div>
                作者：zgjsczwj 发表于2012/7/24 14:46:55 <a href="http://blog.csdn.net/zgjsczwj/article/details/7779991">原文链接</a>
            </div>
            <div>
            阅读：1848 评论：0 <a href="http://blog.csdn.net/zgjsczwj/article/details/7779991#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[转]jqGrid 属性说明]]></title>
        <link>http://blog.csdn.net/zgjsczwj/article/details/7779741</link>
        <guid>http://blog.csdn.net/zgjsczwj/article/details/7779741</guid>
        <author>zgjsczwj</author>
        <pubDate>2012/7/24 14:37:46</pubDate>
        <description><![CDATA[
            
<p>1.0 colModel :&nbsp;&nbsp; 要呈现字段的属性设置 <br>
1.1 align：定义数据相对单元&#26684;的对齐方式.string&nbsp; left <br>
1.2 datefmt: 日期&#26684;式，&nbsp;&nbsp;&nbsp;&nbsp; string&nbsp; Y-m-d <br>
1.3 editable: 定义字段是否可编辑 boolean false <br>
1.4 defval : 搜索字段的默认&#20540;,(只用于自定义搜索) string&nbsp; empty <br>
1.5 edittype: 该字段控件类型(text, textarea, select, checkbox, password, button, image , file) string&nbsp; text<br>
1.6 surl:只有在自定义搜索和edittype属性为select和描述的url得到select 的element%&nbsp; string empty <br>
1.7 editoptions:针对edittype配置的控件类型的属性设置 array&nbsp; empty array <br>
1.7.1 value: 依据edittype，配置属性%（详见: editoptions的value配置）mixed none <br>
1.7.2 dataUrl:这个属性只适用与edittype属性为select (指定select的数据源edittype:&quot;select&quot;,editoptions:{dataUrl:'test.txt', defaultValue:'Intime'})&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string&nbsp; empty<br>
1.7.3 dataInit:当控件被创建时仅触发1次 function&nbsp; null <br>
1.7.4 dataEvents: 给当前控件追加事件处理% array&nbsp; empty array <br>
1.7.5 defaultValue:默认&#20540;(可以是函数返回&#20540;) mixed&nbsp; none <br>
1.7.6 其他:可设置控件的任何有效属性editoptions:{size:10,maxlength:8}mixed none <br>
1.8 editrules: 设置编辑字段的控件的规则&nbsp; array&nbsp; empty array <br>
1.8.1 edithidden:该字段隐藏时, 此属性可以控制是否可编辑 boolean&nbsp; false <br>
1.8.2 required:是否验证空数据 boolean&nbsp; false <br>
1.8.3 number:是否验证数字 boolean&nbsp; false <br>
1.8.4 integer:是否验证整数 boolean&nbsp; false <br>
1.8.5 minValue:验证最小&#20540; number(integer)&nbsp; empty <br>
1.8.6 maxValue:验证最大&#20540; number(integer)&nbsp; empty <br>
1.8.7 email:是否验证email boolean&nbsp; false <br>
1.8.8 url:是否验证是有效的网址 boolean&nbsp; false <br>
1.8.9 date:是否验证日期 boolean&nbsp; false <br>
1.8.10 time:是否验证时间 boolean&nbsp; false <br>
如果此字段不是必填,如果填了才验证是否是email&nbsp; 那么应该配置 email:true, required:false <br>
1.9 formoptions:设置该字段相对表单中的相关设置 array&nbsp; empty array <br>
1.9.1 elmprefix:如果设置,则会在控件前面出现该设置 string&nbsp; empty&nbsp; <br>
1.9.2 elmsuffix:如果设置,则会在控件后面出现该设置 string&nbsp; empty <br>
1.9.3 label: 如果设置,则会替换colNames设置的名称 string&nbsp; empty <br>
1.9.4 rowpos:设置该字段所在行的位置,从1开始计数&nbsp; number empty <br>
1.9.5 colpos:设置该字段所在列的位置,从1开始计数 number empty <br>
1.10 formatoptions:设置特定列的&#26684;式,覆盖语言文件的默认&#20540; array&nbsp; empty array <br>
1.11 formatter:指定formatoptions设置&#26684;式的类型 mixed none <br>
1.11.1 integer:当formatter指定为此属性时, formatoptions可以设置以下属性. <br>
1.11.1.1 thousandsSeparator: 每千位分隔符 string empty <br>
1.11.1.2 defaulValue:在没有数据的情况下的默认&#20540; string empty <br>
1.11.2 number: 当formatter指定为此属性时, formatoptions可以设置以下属性. <br>
1.11.2.1 decimalSeparator: 小数位分隔符 string empty <br>
1.11.2.2 thousandsSeparator:每千位分隔符 string empty <br>
1.11.2.3 decimalPlaces:小数位数 string empty <br>
1.11.2.4 defaulValue:在没有数据的情况下的默认&#20540; string empty <br>
1.11.3 currency: 当formatter指定为此属性时, formatoptions可以设置以下属性. <br>
1.11.3.1 decimalSeparator: 小数位分隔符 string empty <br>
1.11.3.2 thousandsSeparator: 每千位分隔符 string empty <br>
1.11.3.3 decimalPlaces: 小数位数 string empty <br>
1.11.3.4 defaulValue: 在没有数据的情况下的默认&#20540; string empty <br>
1.11.3.5 prefix:在数据前面添加的文本比如货币符号”$” string empty <br>
1.11.3.6 suffix: 在数据后面添加的文本比如货币符号”$” string empty <br>
1.11.4 date: 当formatter指定为此属性时, formatoptions可以设置以下属性. <br>
1.11.4.1 srcformat:原&#26684;式 string empty <br>
1.11.4.2 newformat:新的输出&#26684;式 string empty <br>
1.11.5 email: 当formatter指定为 email类型,直接使这个email加href string empty <br>
1.11.6 link: 当formatter指定为此属性时, formatoptions可以设置以下属性. <br>
1.11.6.1 target:默认为empty如果设置,则创建一个以单元&#26684;的&#20540;和target属性的链接string empty <br>
1.11.7 showlink: 当formatter指定为此属性时, formatoptions可以设置以下属性. <br>
1.11.7.1 baseLinkUrl:链接. string empty <br>
1.11.7.2 showAction:附加&#20540;,在baseLinkUrl后面 . string empty <br>
1.11.7.3 addParam:额外参数. string empty <br>
1.11.7.4 target:如果设置,增加1条附加属性. string empty <br>
1.11.7.5 idName:是第1个参数,之后由showAction补充,默认情况下,这是id string empty <br>
1.11.8 checkbox: 当formatter指定为此属性时, formatoptions可以设置以下属性. <br>
1.11.8.1 disabled:默认true禁止改变状态,如果设置为false是可以改变的 boolean <br>
1.11.9 select: 当edittype ,formatter指定为此属性时, editoptions:{value:&quot;1:One;2:Two&quot;}&#20540;是1,2显示的则是one,two string empty<br>
colModel:[{name:'myname', edittype:'select', formatter:'select', formatoptions:{baseLinkUrl:'myrul.php', addParam: '&amp;action=edit', idName:'myid'}, ...}<br>
将会得到http://localhost/myrul.php?myid=123&amp;action=edit <br>
1.12 unformat:可以为formatter指定自定义&#26684;式的方法 function null <br>
1.13 hidedlg:如果设置为true在显示/隐藏字段功能中，该字段将不会出现% boolean false <br>
1.14 hidden:该字段是否隐藏 boolean false <br>
1.15 index:排序时, sidx的参数 string&nbsp; empty <br>
1.16 jsonmap:定义json映射这个字段时的json字符串 string empty <br>
1.17 xmlmap:定义xml文件映射这个字段时的xml字符串 string empty <br>
1.18 key:如果服务器端没有定义id,可以设置字段为行号,只有一个字段可以设置此属性,只认可第1个,其他的将被忽略. boolean false <br>
1.19 name:设置此字段的唯一名称,此属性是必须要设置的, string empty <br>
1.20 label:当colNames为空,则标题显示此设置.如果colNames数组和此设置同时为空,则标题显示name属性. string empty <br>
1.21 resizable:设置此字段是否可编辑 boolean true <br>
1.22 search:该字段是否允许搜索(查询) boolean true <br>
1.23 stype:设置搜索时的数据类型 string text <br>
1.24 searchoptions:配置搜索选项 array empty array <br>
1.24.1 dataUrl:该属性只适用于 stype:’select’&nbsp; string empty <br>
1.24.2 dataInit:等同于editoptions的dataInit function null <br>
1.24.3 dataEvents:等同于editoptions的dataEvents&nbsp; array empty array <br>
1.24.4 attr:可以设置创建的元素的有效属性 object null <br>
1.24.5 searchhidden:该字段隐藏时,此属性可控制是否可搜索 boolean false <br>
1.24.6 defaultValue:默认&#20540; string empty <br>
1.24.7 sopt:比较运算符,可任意组合('eq','ne','lt','le','gt','ge','bw','bn','in','ni','ew','en','cn','nc')array empty array<br>
等于&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; eq&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
不等于&nbsp;&nbsp;&nbsp; ne&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&gt; <br>
小于&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt; <br>
小于等于&nbsp;&nbsp; le&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;= <br>
大于&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt; <br>
大于等于&nbsp;&nbsp; ge&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt;= <br>
以*开头&nbsp;&nbsp;&nbsp; bw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; like <br>
不以*开头&nbsp; bn&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; not like <br>
在&nbsp;&nbsp;&nbsp; in&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; in <br>
不在&nbsp;&nbsp;&nbsp; ni&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; not in <br>
以*结尾&nbsp;&nbsp;&nbsp; ew&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; like <br>
不以*结尾&nbsp; en&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; not like <br>
包含&nbsp;&nbsp;&nbsp; cn&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; like <br>
不包含&nbsp;&nbsp;&nbsp; nc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; not like <br>
1.25 sortable:设置该字段是否进行排序 boolean true <br>
1.26 sorttype:排序的数据类型 string text <br>
1.27 width:宽度,不能设置百分比 number 150 </p>
<p><br>
2.0 navGrid:功能按钮(增删改查,搜,刷新)设置 <br>
2.1 top:距离顶端的象素 number(integer) 0 <br>
2.2 left:距离左边的象素 number(integer) 0 <br>
2.3 width:宽度 number(integer) 300 <br>
2.4 height:高度 number(integer) auto <br>
2.5 dataheight:表单内容距离按钮高度 number(integer) auto <br>
2.6 modal: 是否模态窗体 boolean false <br>
2.7 drag:是否可拖动 boolean true <br>
2.8 resize: 是否可改变大小 boolean true <br>
2.9 url:提交的URL,如果设置则替换editurl string empty <br>
2.10 mtype:请求类型post | get string post <br>
2.11 editData:提交到服务器的数据 array empty array <br>
2.12 recreateForm:每次操作是否创建新的表单 boolean false <br>
2.13 jqModal: 设置为true使用存在的jqModal插件的对话框。如果被设置为true和插件不存在jqGrid使用它自己的方式来创造对话框, 比如会影响到日期插件,true和false不同的效果 boolean true<br>
2.14 addedrow:% <br>
2.15 topinfo:头部信息 string empty <br>
2.16 bottominfo:底部信息 string empty <br>
2.17 saveicon:保存的图片,第一项启用/禁用的图片, 第二个项目告诉哪里放置图片到文本的左或右. 第三项对应的有效UI图片样式 [true,”left”,”ui-icon-disk”]<br>
2.18 closeicon:取消的图片同上 [true,”left”,”ui-icon-close”] <br>
2.19 savekey:保存的快捷键,默认回车 [false,13] <br>
2.20 navkeys:移动上个,下个的快捷键 ,默认上下箭头 [false,38,40] <br>
2.21 checkOnSubmit:保存时,是否弹出再次确认对话框,仅用在编辑模式 boolean false <br>
2.22 checkOnUpdate:取消时,是否弹出再次确定对话框,仅用在新增和编辑模式 boolean false <br>
2.23 closeAfterAdd:添加模式时,添加记录后是否关闭对话框 boolean false <br>
2.24 clearAfterAdd:添加数据时,是否清空上1次的数据 boolean true <br>
2.25 closeAfterEdit:编辑模式时,编辑完成后是否关闭对话框 boolean false <br>
2.26 reloadAfterSubmit:操作完成后,是否重新加载数据 boolean true <br>
2.27 closeOnEscape:是否关联esc键 boolean false <br>
2.28 ajaxEditOptions:% object empty object&nbsp;&nbsp;&nbsp; </p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&lt;!--StartFragment--&gt;colModel:[<br>
&nbsp;&nbsp; {name:'id',index:'id', width:55,formatter: 'integer'},<br>
&nbsp;&nbsp; {name:'invdate',index:'invdate', width:80,formatter:'date', formatoptions:{srcformat:&quot;Y-m-d&quot;,newformat:&quot;d-M-Y&quot;}},<br>
&nbsp;&nbsp; {name:'name',index:'name', width:90, formatter: 'link'},<br>
&nbsp;&nbsp; {name:'amount',index:'amount', width:60, align:&quot;right&quot;,formatter:'currency',formatoptions:{thousandsSeparator:&quot;,&quot;}},<br>
&nbsp;&nbsp; {name:'tax',index:'tax', width:60, align:&quot;right&quot;,formatter:'currency'},<br>
&nbsp;&nbsp; {name:'total',index:'total', width:60,align:&quot;right&quot;,formatter:'currency', formatoptions:{prefix:&quot;&amp;euro;&quot;}},<br>
{name:'closed',index:'closed',width:55,align:'center',formatter:'checkbox'},<br>
{name:'ship_via',index:'ship_via',width:70},<br>
&nbsp;&nbsp; {name:'note',index:'note', width:100, sortable:false} <br>
&nbsp;&nbsp; ],</p>

            <div>
                作者：zgjsczwj 发表于2012/7/24 14:37:46 <a href="http://blog.csdn.net/zgjsczwj/article/details/7779741">原文链接</a>
            </div>
            <div>
            阅读：615 评论：0 <a href="http://blog.csdn.net/zgjsczwj/article/details/7779741#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[转]jqgrid学习]]></title>
        <link>http://blog.csdn.net/zgjsczwj/article/details/7779565</link>
        <guid>http://blog.csdn.net/zgjsczwj/article/details/7779565</guid>
        <author>zgjsczwj</author>
        <pubDate>2012/7/24 14:05:55</pubDate>
        <description><![CDATA[
            
<span style="font-size:32px">jqGrid学习之 ------------- 安装<br>
</span>jqGrid安装很简单，只需把相应的css、js文件加入到页面中即可。 按照官网文档:<br>
/myproject/css/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ui.jqgrid.css&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /ui-lightness/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /images/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jquery-ui-1.7.2.custom.css
<br>
/myproject/js/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /i18n/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; grid.locale-bg.js&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; list of all language files&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;hellip;.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Changes.txt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jquery-1.3.2.min.js&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jquery.jqGrid.min.js<br>
<br>
在页面中写法：<br>
Java代码 <br>
&lt;em&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;&nbsp; &lt;/em&gt;<br>
&lt; em&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;en&quot; lang=&quot;en&quot;&gt;&nbsp; &lt;/em&gt;<br>
&lt; em&gt;&lt;head&gt;&nbsp; &lt;/em&gt;<br>
&lt; em&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&nbsp; &lt;/em&gt;<br>
&lt; em&gt;&lt;title&gt;My First Grid&lt;/title&gt;&nbsp; &lt;/em&gt;<br>
&lt; em&gt;&nbsp;&nbsp; &lt;/em&gt;<br>
&lt; em&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; href=&quot;css/ui-lightness/jquery-ui-1.7.1.custom.css&quot; /&gt;&nbsp; &lt;/em&gt;<br>
&lt; em&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; href=&quot;js/src/css/ui.jqgrid.css&quot; /&gt;&nbsp; &lt;/em&gt;<br>
&lt; em&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; href=&quot;js/src/css/jquery.searchFilter.css&quot; /&gt;&nbsp; &lt;/em&gt;<br>
&lt; em&gt;&lt;style&gt;&nbsp; &lt;/em&gt;<br>
&lt; em&gt;html, body {&nbsp; &lt;/em&gt;<br>
&lt; em&gt;&nbsp;&nbsp; margin: 0;&nbsp; &lt;/em&gt;<br>
&lt; em&gt;&nbsp;&nbsp;&nbsp; padding: 0;&nbsp; &lt;/em&gt;<br>
&lt; em&gt;&nbsp;&nbsp;&nbsp; font-size: 75%;&nbsp; &lt;/em&gt;<br>
&lt; em&gt;}&nbsp; &lt;/em&gt;<br>
&lt; em&gt;&lt;/style&gt;&nbsp; &lt;/em&gt;<br>
&lt; em&gt;&nbsp;&nbsp; &lt;/em&gt;<br>
&lt; em&gt;&lt;script src=&quot;js/jquery-1.3.2.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&nbsp; &lt;/em&gt;<br>
&lt; em&gt;&lt;script src=&quot;js/src/grid.loader.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&nbsp; &lt;/em&gt;<br>
&lt; em&gt;&nbsp;&nbsp; &lt;/em&gt;<br>
&lt; em&gt;&lt;/head&gt;&nbsp; &lt;/em&gt;<br>
&lt; em&gt;&lt;body&gt;&nbsp; &lt;/em&gt;<br>
&lt; em&gt;...&nbsp; &lt;/em&gt;<br>
&lt; em&gt;&lt;/body&gt;&nbsp; &lt;/em&gt;<br>
&lt; em&gt;&lt;/html&gt;&lt;/em&gt;&nbsp; <br>
需要说明的是，jquery-ui的字体大小与jqgrid字体大小不一致，故需要在页面上在加上一段 style来指定页面上文字大小。<br>
<br>
<br>
<span style="font-size:32px">jqGrid皮肤</span><br>
从3.5版本开始，jqGrid完全支持jquery UI的theme。我们可以从http://jqueryui.com/themeroller/下载我们所需要的theme。当然，你也可以编辑自己的theme。jqGrid 也并不需要把所有的css文件都引入进来，只需导入核心css文件&quot;ui.theme.css &quot; 以及&quot;ui.core.css&quot;即可，文件位于目录development-bundle/themes下。<br>
<span style="font-size:32px">jqGrid原理</span><br>
jqGrid是典型的B/S架构，服务器端只是提供数据管理，客户端只提供数据显示。换句话说，jqGrid可以以一种更加简单的方式来展现你数据库的信息，而且也可以把客户端数据传回给服务器端。 对于jqGrid我们所关心的就是：必须有一段代码把一些页面信息保存到数据库中，而且也能够把响应信息返回给客户端。jqGrid是用ajax来实现对请求与响应的处理。<br>
<span style="font-size:32px">jqGrid参数</span><br>
<table class="t_table " cellspacing="0">
<tbody>
<tr>
<td><br>
名称</td>
<td><br>
类型</td>
<td><br>
描述</td>
<td><br>
默认&#20540;</td>
<td><br>
可修改</td>
</tr>
<tr>
<td><br>
url</td>
<td><br>
string</td>
<td><br>
获取数据的地址</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td><br>
datatype</td>
<td><br>
string</td>
<td><br>
从服务器端返回的数据类型，默认xml。可选类型：xml，local，json，jsonnp，script，xmlstring，jsonstring，clientside</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td><br>
mtype</td>
<td><br>
string</td>
<td><br>
ajax提交方式。POST或者GET，默认GET</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td><br>
colNames</td>
<td><br>
Array</td>
<td><br>
列显示名称，是一个数组对象</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td><br>
colModel</td>
<td><br>
Array</td>
<td><br>
常用到的属性：<strong>name</strong>列显示的名称；<strong>index</strong>传到服务器端用来排序用的列名称；<strong>width</strong>列宽度；<strong>align</strong>对齐方式；<strong>sortable</strong> 是否可以排序</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td><br>
pager</td>
<td><br>
string</td>
<td><br>
定义翻页用的导航栏，必须是有效的html元素。翻页工具栏可以放置在html页面任意位置</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td><br>
rowNum</td>
<td><br>
int</td>
<td><br>
在grid上显示记录条数，这个参数是要被传递到后台</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td><br>
rowList</td>
<td><br>
array</td>
<td><br>
一个下拉选择框，用来改变显示记录数，当选择时会覆盖rowNum参数传递到后台</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td><br>
sortname</td>
<td><br>
string</td>
<td><br>
默认的排序列。可以是列名称或者是一个数字，这个参数会被提交到后台</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td><br>
viewrecords</td>
<td><br>
boolean</td>
<td><br>
定义是否要显示总记录数</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td><br>
caption</td>
<td><br>
string</td>
<td><br>
表&#26684;名称</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td><br>
&lt;a&gt;ajaxGridOptions&lt;/a&gt;ajaxGridOptions[a1]</td>
<td><br>
object</td>
<td><br>
对ajax参数进行全局设置，可以覆盖ajax事件</td>
<td><br>
null</td>
<td><br>
是</td>
</tr>
<tr>
<td><br>
&lt;a&gt;ajaxSelectOptions&lt;/a&gt;<a href="http://www.blogjava.net/ilovebabyfat/archive/2012/04/06/373456.html#_msocom_1" target="_blank">[/url][a2]<br>
</a></td>
<td><br>
object</td>
<td><br>
对ajax的select参数进行全局设置</td>
<td><br>
null</td>
<td><br>
是</td>
</tr>
<tr>
<td><br>
altclass</td>
<td><br>
String</td>
<td><br>
用来指定行显示的css，可以编辑自己的css文件，只有当altRows设为ture时起作用</td>
<td><br>
ui-priority-secondary</td>
<td>&nbsp;</td>
</tr>
<tr>
<td><br>
altRows</td>
<td><br>
boolean</td>
<td><br>
设置表&#26684; zebra-striped&#20540;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td><br>
autoencode</td>
<td><br>
boolean</td>
<td><br>
对url进行编码</td>
<td><br>
false</td>
<td><br>
是</td>
</tr>
<tr>
<td><br>
autowidth</td>
<td><br>
boolean</td>
<td><br>
如果为ture时，则当表&#26684;在首次被创建时会根据父元素比例重新调整表&#26684;宽度。如果父元素宽度改变，为了使表&#26684;宽度能够自动调整则需要实现函数：setGridWidth</td>
<td><br>
false</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
cellLayout</td>
<td><br>
integer</td>
<td><br>
定义了单元&#26684;padding &#43; border宽度。通常不必修改此&#20540;。初始&#20540;为</td>
<td><br>
5</td>
<td><br>
是</td>
</tr>
<tr>
<td><br>
cellEdit</td>
<td><br>
boolean</td>
<td><br>
启用或者禁用单元&#26684;编辑功能</td>
<td><br>
false</td>
<td><br>
是</td>
</tr>
<tr>
<td><br>
cellsubmit</td>
<td><br>
String</td>
<td><br>
定义了单元&#26684;内容保存位置</td>
<td><br>
&amp;lsquo;remote&amp;rsquo;</td>
<td><br>
是</td>
</tr>
<tr>
<td><br>
cellurl</td>
<td><br>
String</td>
<td><br>
单元&#26684;提交的url</td>
<td><br>
空&#20540;</td>
<td><br>
是</td>
</tr>
<tr>
<td><br>
datastr</td>
<td><br>
String</td>
<td><br>
xmlstring或者jsonstring</td>
<td><br>
空&#20540;</td>
<td><br>
是</td>
</tr>
<tr>
<td><br>
deselectAfterSort</td>
<td><br>
boolean</td>
<td><br>
只有当datatype为local时起作用。当排序时不选择当前行</td>
<td><br>
true</td>
<td><br>
是</td>
</tr>
<tr>
<td><br>
direction</td>
<td><br>
string</td>
<td><br>
表&#26684;中文字的显示方向，从左向右（ltr）或者从右向左（rtr）</td>
<td><br>
ltr</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
editurl</td>
<td><br>
string</td>
<td><br>
定义对form编辑时的url</td>
<td><br>
空&#20540;</td>
<td><br>
是</td>
</tr>
<tr>
<td><br>
emptyrecords</td>
<td><br>
string</td>
<td><br>
当返回的数据行数为0时显示的信息。只有当属性viewrecords 设置为ture时起作用</td>
<td>&nbsp;</td>
<td><br>
是</td>
</tr>
<tr>
<td><br>
ExpandColClick</td>
<td><br>
boolean</td>
<td><br>
当为true时，点击展开行的文本时，treeGrid就能展开或者收缩，不仅仅是点击图片</td>
<td><br>
true</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
ExpandColumn</td>
<td><br>
string</td>
<td><br>
指定那列来展开tree grid，默认为第一列，只有在treeGrid为true时起作用</td>
<td><br>
空&#20540;</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
&lt;a&gt;footerrow&lt;/a&gt;ajaxSelectOptions[a3]</td>
<td><br>
boolean</td>
<td><br>
当为true时，会在翻页栏之上增加一行</td>
<td><br>
false</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
forceFit</td>
<td><br>
boolean</td>
<td><br>
当为ture时，调整列宽度不会改变表&#26684;的宽度。当shrinkToFit为false时，此属性会被忽略</td>
<td><br>
false</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
gridstate</td>
<td><br>
string</td>
<td><br>
定义当前表&#26684;的状态：'visible' or 'hidden'</td>
<td><br>
visible</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
gridview</td>
<td><br>
boolean</td>
<td><br>
构造一行数据后添加到grid中，如果设为true则是将整个表&#26684;的数据都构造完成后再添加到grid中，但treeGrid, subGrid, or afterInsertRow 不能用</td>
<td><br>
false</td>
<td><br>
是</td>
</tr>
<tr>
<td><br>
height</td>
<td><br>
mixed</td>
<td><br>
表&#26684;高度，可以是数字，像素&#20540;或者百分比</td>
<td><br>
150</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
hiddengrid</td>
<td><br>
boolean</td>
<td><br>
当为ture时，表&#26684;不会被显示，只显示表&#26684;的标题。只有当点击显示表&#26684;的那个按钮时才会去初始化表&#26684;数据。</td>
<td><br>
false</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
hidegrid</td>
<td><br>
boolean</td>
<td><br>
启用或者禁用控制表&#26684;显示、隐藏的按钮，只有当caption属性不为空时起效</td>
<td><br>
true</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
hoverrows</td>
<td><br>
boolean</td>
<td><br>
当为false时mouse hovering会被禁用</td>
<td><br>
false</td>
<td><br>
是</td>
</tr>
<tr>
<td><br>
jsonReader</td>
<td><br>
array</td>
<td><br>
描述json数据&#26684;式的数组</td>
<td>&nbsp;</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
lastpage</td>
<td><br>
integer</td>
<td><br>
只读属性，定义了总页数</td>
<td><br>
0</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
lastsort</td>
<td><br>
integer</td>
<td><br>
只读属性，定义了最后排序列的索引，从0开始</td>
<td><br>
0</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
loadonce</td>
<td><br>
boolean</td>
<td><br>
如果为ture则数据只从服务器端抓取一次，之后所有操作都是在客户端执行，翻页功能会被禁用</td>
<td><br>
false</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
loadtext</td>
<td><br>
string</td>
<td><br>
当请求或者排序时所显示的文字内容</td>
<td><br>
Loading....</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
loadui</td>
<td><br>
string</td>
<td><br>
当执行ajax请求时要干什么。<strong>disable</strong>禁用ajax执行提示；<strong>enable</strong>默认，当执行ajax请求时的提示；<strong>block</strong>启用Loading提示，但是阻止其他操作</td>
<td><br>
enable</td>
<td><br>
是</td>
</tr>
<tr>
<td><br>
multikey</td>
<td><br>
string</td>
<td><br>
只有在multiselect设置为ture时起作用，定义使用那个key来做多选。<strong>shiftKey</strong>，<strong>altKey</strong>，<strong>ctrlKey</strong></td>
<td><br>
空&#20540;</td>
<td><br>
是</td>
</tr>
<tr>
<td><br>
multiboxonly</td>
<td><br>
boolean</td>
<td><br>
只有当multiselect = true.起作用，当multiboxonly为ture时只有选择checkbox才会起作用</td>
<td><br>
false</td>
<td><br>
是</td>
</tr>
<tr>
<td><br>
multiselect</td>
<td><br>
boolean</td>
<td><br>
定义是否可以多选</td>
<td><br>
false</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
multiselectWidth</td>
<td><br>
integer</td>
<td><br>
当multiselect为true时设置multiselect列宽度</td>
<td><br>
20</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
page</td>
<td><br>
integer</td>
<td><br>
设置初始的页码</td>
<td><br>
1</td>
<td><br>
是</td>
</tr>
<tr>
<td><br>
pagerpos</td>
<td><br>
string</td>
<td><br>
指定分页栏的位置</td>
<td><br>
center</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
pgbuttons</td>
<td><br>
boolean</td>
<td><br>
是否显示翻页按钮</td>
<td><br>
true</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
pginput</td>
<td><br>
boolean</td>
<td><br>
是否显示跳转页面的输入框</td>
<td><br>
true</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
pgtext</td>
<td><br>
string</td>
<td><br>
当前页信息</td>
<td>&nbsp;</td>
<td><br>
是</td>
</tr>
<tr>
<td><br>
prmNames</td>
<td><br>
array</td>
<td><br>
Default valuesprmNames: {page:&quot;page&quot;,rows:&quot;rows&quot;, sort: &quot;sidx&quot;,order: &quot;sord&quot;, search:&quot;_search&quot;, nd:&quot;nd&quot;, npage:null}当参数为null时不会被发到服务器端</td>
<td><br>
none</td>
<td><br>
是</td>
</tr>
<tr>
<td><br>
postData</td>
<td><br>
array</td>
<td><br>
此数组内容直接赋&#20540;到url上，参数类型：{name1:value1&amp;hellip;}</td>
<td><br>
空array</td>
<td><br>
是</td>
</tr>
<tr>
<td><br>
reccount</td>
<td><br>
integer</td>
<td><br>
只读属性，定义了grid中确切的行数。通常情况下与records属性相同，但有一种情况例外，假如rowNum=15，但是从服务器端返回的记录数是20，那么records&#20540;是20，但reccount&#20540;仍然为15，而且表&#26684;中也只显示15条记录。</td>
<td><br>
0</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
recordpos</td>
<td><br>
string</td>
<td><br>
定义了记录信息的位置： left, center, right</td>
<td><br>
right</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
records</td>
<td><br>
integer</td>
<td><br>
只读属性，定义了返回的记录数</td>
<td><br>
none</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
recordtext</td>
<td><br>
string</td>
<td><br>
显示记录数信息。{0}为记录数开始，{1}为记录数结束。 viewrecords为ture时才能起效，且总记录数大于0时才会显示此信息</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td><br>
resizeclass</td>
<td><br>
string</td>
<td><br>
定义一个class到一个列上用来显示列宽度调整时的效果</td>
<td><br>
空&#20540;</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
rowList</td>
<td><br>
array</td>
<td><br>
一个数组用来调整表&#26684;显示的记录数，此参数&#20540;会替代rowNum参数&#20540;传给服务器端。</td>
<td><br>
[]</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
rownumbers</td>
<td><br>
boolean</td>
<td><br>
如果为ture则会在表&#26684;左边新增一列，显示行顺序号，从1开始递增。此列名为'rn'.</td>
<td><br>
false</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
rownumWidth</td>
<td><br>
integer</td>
<td><br>
如果rownumbers为true，则可以设置column的宽度</td>
<td><br>
25</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
savedRow</td>
<td><br>
array</td>
<td><br>
只读属性，只用在编辑模式下保存数据</td>
<td><br>
空&#20540;</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
scroll</td>
<td><br>
boolean</td>
<td><br>
创建一个动态滚动的表&#26684;，当为true时，翻页栏被禁用，使用垂直滚动条加载数据，且在首次访问服务器端时将加载所有数据到客户端。当此参数为数字时，表&#26684;只控制可见的几行，所有数据都在这几行中加载</td>
<td><br>
false</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
scrollOffset</td>
<td><br>
integer</td>
<td><br>
设置垂直滚动条宽度</td>
<td><br>
18</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
scrollrows</td>
<td><br>
boolean</td>
<td><br>
当为true时让所选择的行可见</td>
<td><br>
false</td>
<td><br>
是</td>
</tr>
<tr>
<td><br>
selarrrow</td>
<td><br>
array</td>
<td><br>
只读属性，用来存放当前选择的行</td>
<td><br>
array</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
selrow</td>
<td><br>
string</td>
<td><br>
只读属性，最后选择行的id</td>
<td><br>
null</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
shrinkToFit</td>
<td><br>
boolean</td>
<td><br>
此属性用来说明当初始化列宽度时候的计算类型，如果为ture，则按比例初始化列宽度。如果为false，则列宽度使用colModel指定的宽度</td>
<td><br>
true</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
sortable</td>
<td><br>
boolean</td>
<td><br>
是否可排序</td>
<td><br>
false</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
sortname</td>
<td><br>
string</td>
<td><br>
排序列的名称，此参数会被传到后台</td>
<td><br>
空字符串</td>
<td><br>
是</td>
</tr>
<tr>
<td><br>
sortorder</td>
<td><br>
string</td>
<td><br>
排序顺序，升序或者降序（asc or desc）</td>
<td><br>
asc</td>
<td><br>
是</td>
</tr>
<tr>
<td><br>
subGrid</td>
<td><br>
boolean</td>
<td><br>
是否使用suggrid</td>
<td><br>
false</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
subGridModel</td>
<td><br>
array</td>
<td><br>
subgrid模型</td>
<td><br>
array</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
subGridType</td>
<td><br>
mixed</td>
<td><br>
如果为空则使用表&#26684;的dataType</td>
<td><br>
null</td>
<td><br>
是</td>
</tr>
<tr>
<td><br>
subGridUrl</td>
<td><br>
string</td>
<td><br>
加载subgrid数据的url，jqGrid会把每行的id&#20540;加到url中</td>
<td><br>
空&#20540;</td>
<td><br>
是</td>
</tr>
<tr>
<td><br>
subGridWidth</td>
<td><br>
integer</td>
<td><br>
subgrid列的宽度</td>
<td><br>
20</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
toolbar</td>
<td><br>
array</td>
<td><br>
表&#26684;的工具栏。数组中有两个&#20540;，第一个为是否启用，第二个指定工具栏位置（相对于body layer），如：[true,&quot;both&quot;]。工具栏位置可选&#20540;：&quot;top&quot;,&quot;bottom&quot;, &quot;both&quot;.如果工具栏在上面，则工具栏id为&quot;t_&quot;&#43;表&#26684;id；如果在下面则为&quot;tb_&quot;&#43;表&#26684;id；如果只有一个工具栏则为 &quot;t_&quot;&#43;表&#26684;id</td>
<td><br>
[false,'']</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
totaltime</td>
<td><br>
integer</td>
<td><br>
只读属性，计算加载数据的时间。目前支持xml跟json数据</td>
<td><br>
0</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
treedatatype</td>
<td><br>
mixed</td>
<td><br>
数据类型，通常情况下与datatype相同，不会变</td>
<td><br>
null</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
treeGrid</td>
<td><br>
boolean</td>
<td><br>
启用或者禁用treegrid模式</td>
<td><br>
false</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
treeGridModel</td>
<td><br>
string</td>
<td><br>
treeGrid所使用的方法</td>
<td><br>
Nested</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
treeIcons</td>
<td><br>
array</td>
<td><br>
树的图标，默认&#20540;：{plus:'ui-icon-triangle-1-e',minus:'ui-icon-triangle-1-s',leaf:'ui-icon-radio-off'}</td>
<td>&nbsp;</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
treeReader</td>
<td><br>
array</td>
<td><br>
扩展表&#26684;的colModel且加在colModel定义的后面</td>
<td>&nbsp;</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
tree_root_level</td>
<td><br>
numeric</td>
<td><br>
r oot元素的级别，</td>
<td><br>
0</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
userData</td>
<td><br>
array</td>
<td><br>
从request中取得的一些用户信息</td>
<td><br>
array</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
userDataOnFooter</td>
<td><br>
boolean</td>
<td><br>
当为true时把userData放到底部，用法：如果userData的&#20540;与colModel的&#20540;相同，那么此列就显示正确的&#20540;，如果不等那么此列就为空</td>
<td><br>
false</td>
<td><br>
是</td>
</tr>
<tr>
<td><br>
viewrecords</td>
<td><br>
boolean</td>
<td><br>
是否要显示总记录数</td>
<td><br>
false</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
viewsortcols</td>
<td><br>
array</td>
<td><br>
定义排序列的外观跟行为。数据&#26684;式：[false,'vertical',true].第一个参数是说，是否都要显示排序列的图标，false就是只显示当前排序列的图标；第二个参数是指图标如何显示，vertical：排序图标垂直放置，horizontal：排序图标水平放置；第三个参数指单击功能，true：单击列可排序，false：单击图标排序。说明：如果第三个参数为false则第一个参数必须为ture否则不能排序</td>
<td>&nbsp;</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
width</td>
<td><br>
number</td>
<td><br>
如果设置则按此设置为主，如果没有设置则按colModel中定义的宽度计算</td>
<td><br>
none</td>
<td><br>
否</td>
</tr>
<tr>
<td><br>
xmlReader</td>
<td><br>
array</td>
<td><br>
对xml数据结构的描述</td>
<td>&nbsp;</td>
<td><br>
否</td>
</tr>
</tbody>
</table>
<br>
<br>
<span style="font-size:32px">Jqgrid学习 -------ColModel API</span><br>
ColModel 是jqGrid里最重要的一个属性，设置表&#26684;列的属性。<br>
<table class="t_table " cellspacing="0">
<tbody>
<tr>
<td><br>
属性</td>
<td><br>
数据类型</td>
<td><br>
备注</td>
<td><br>
默认&#20540;</td>
</tr>
<tr>
<td><br>
align</td>
<td><br>
string</td>
<td><br>
left, center, right.</td>
<td><br>
left</td>
</tr>
<tr>
<td><br>
classes</td>
<td><br>
string</td>
<td><br>
设置列的css。多个class之间用空&#26684;分隔，如：'class1 class2' 。表&#26684;默认的css属性是ui-ellipsis</td>
<td><br>
empty string</td>
</tr>
<tr>
<td><br>
datefmt</td>
<td><br>
string</td>
<td><br>
&quot;/&quot;, &quot;-&quot;, and &quot;.&quot;都是有效的日期分隔符。y,Y,yyyy年YY, yy 月m,mm for monthsd,dd日.</td>
<td><br>
ISO Date (Y-m-d)</td>
</tr>
<tr>
<td><br>
defval</td>
<td><br>
string</td>
<td><br>
查询字段的默认&#20540;</td>
<td><br>
空</td>
</tr>
<tr>
<td><br>
editable</td>
<td><br>
boolean</td>
<td><br>
单元&#26684;是否可编辑</td>
<td><br>
false</td>
</tr>
<tr>
<td><br>
editoptions</td>
<td><br>
array</td>
<td><br>
编辑的一系列选项。{name:&amp;rsquo;__department_id&amp;rsquo;,index:&amp;rsquo;__department_id&amp;rsquo;,width:200,editable:true,edittype:&amp;rsquo;select&amp;rsquo;,editoptions: {dataUrl:&quot;${ctx}/admin/deplistforstu.action&quot;}},这个是演示动态从服务器端获取数据。</td>
<td><br>
empty</td>
</tr>
<tr>
<td><br>
editrules</td>
<td><br>
array</td>
<td><br>
编辑的规则{name:&amp;rsquo;age&amp;rsquo;,index:&amp;rsquo;age&amp;rsquo;, width:90,editable:true,editrules: {edithidden:true,required:true,number:true,minValue:10,maxValue:100}},设定年龄的最大&#20540;为100，最小&#20540;为10，而且为数字类型，并且为必输字段。</td>
<td><br>
empty</td>
</tr>
<tr>
<td><br>
edittype</td>
<td><br>
string</td>
<td><br>
可以编辑的类型。可选&#20540;：text, textarea, select, checkbox, password, button, image and file.</td>
<td><br>
text</td>
</tr>
<tr>
<td><br>
fixed</td>
<td><br>
boolean</td>
<td><br>
列宽度是否要固定不可变</td>
<td><br>
false</td>
</tr>
<tr>
<td><br>
formoptions</td>
<td><br>
array</td>
<td><br>
对于form进行编辑时的属性设置</td>
<td><br>
empty</td>
</tr>
<tr>
<td><br>
formatoptions</td>
<td><br>
array</td>
<td><br>
对某些列进行&#26684;式化的设置</td>
<td><br>
none</td>
</tr>
<tr>
<td><br>
formatter</td>
<td><br>
mixed</td>
<td><br>
对列进行&#26684;式化时设置的函数名或者类型<br>
{name:&amp;rsquo;sex&amp;rsquo;,index:&amp;rsquo;sex&amp;rsquo;, align:&amp;rsquo;center&amp;rsquo;,width:60,editable:true,edittype:&amp;rsquo;select&amp;rsquo;,editoptions: {value:&amp;rsquo;0:待定;1:男;2:女&amp;rsquo;},formatter:function(cellvalue, options, rowObject){ var temp = &quot;&lt;img src=&amp;rsquo;${ctx}/jquery-ui-1.7.2.custom/css/img/&quot;
 if(cellvalue==1){ temp = temp &#43;&quot;user-white.png&quot;; } else if(cellvalue==2){ temp = temp &#43;&quot;user-white-female.png&quot;; } else { temp = temp &#43; &quot;user-silhouette.png&quot;; } temp = temp &#43; &quot;&amp;lsquo; border=&amp;rsquo;0&amp;prime; /&gt;&quot; return temp; }},//返回性别的图标。</td>
<td><br>
none</td>
</tr>
<tr>
<td><br>
hidedlg</td>
<td><br>
boolean</td>
<td><br>
是否显示或者隐藏此列</td>
<td><br>
false</td>
</tr>
<tr>
<td><br>
hidden</td>
<td><br>
boolean</td>
<td><br>
在初始化表&#26684;时是否要隐藏此列</td>
<td><br>
false</td>
</tr>
<tr>
<td><br>
index</td>
<td><br>
string</td>
<td><br>
索引。其和后台交互的参数为sidx</td>
<td><br>
empty</td>
</tr>
<tr>
<td><br>
jsonmap</td>
<td><br>
string</td>
<td><br>
定义了返回的json数据映射</td>
<td><br>
none</td>
</tr>
<tr>
<td><br>
key</td>
<td><br>
boolean</td>
<td><br>
当从服务器端返回的数据中没有id时，将此作为唯一rowid使用只有一个列可以做这项设置。如果设置多于一个，那么只选取第一个，其他被忽略</td>
<td><br>
false</td>
</tr>
<tr>
<td><br>
label</td>
<td><br>
string</td>
<td><br>
如果colNames为空则用此&#20540;来作为列的显示名称，如果都没有设置则使用name&#20540;</td>
<td><br>
none</td>
</tr>
<tr>
<td><br>
name</td>
<td><br>
string</td>
<td><br>
表&#26684;列的名称，所有关键字，保留字都不能作为名称使用包括subgrid, cb and rn.</td>
<td><br>
Required</td>
</tr>
<tr>
<td><br>
resizable</td>
<td><br>
boolean</td>
<td><br>
是否可以被resizable</td>
<td><br>
true</td>
</tr>
<tr>
<td><br>
search</td>
<td><br>
boolean</td>
<td><br>
在搜索模式下，定义此列是否可以作为搜索列</td>
<td><br>
true</td>
</tr>
<tr>
<td><br>
searchoptions</td>
<td><br>
array</td>
<td><br>
设置搜索参数</td>
<td><br>
empty</td>
</tr>
<tr>
<td><br>
sortable</td>
<td><br>
boolean</td>
<td><br>
是否可排序</td>
<td><br>
true</td>
</tr>
<tr>
<td><br>
sorttype</td>
<td><br>
string</td>
<td><br>
用在当datatype为local时，定义搜索列的类型，可选&#20540;：int/integer - 对integer排序float/number/currency -排序数字date - 排序日期text - 排序文本</td>
<td><br>
text</td>
</tr>
<tr>
<td><br>
stype</td>
<td><br>
string</td>
<td><br>
定义搜索元素的类型</td>
<td><br>
text</td>
</tr>
<tr>
<td><br>
surl</td>
<td><br>
string</td>
<td><br>
搜索数据时的url</td>
<td><br>
empty</td>
</tr>
<tr>
<td><br>
width</td>
<td><br>
number</td>
<td><br>
默认列的宽度，只能是象素&#20540;，不能是百分比</td>
<td><br>
150</td>
</tr>
<tr>
<td><br>
xmlmap</td>
<td><br>
string</td>
<td><br>
定义当前列跟返回的xml数据之间的映射关系</td>
<td><br>
none</td>
</tr>
<tr>
<td><br>
unformat</td>
<td><br>
function</td>
<td><br>
&amp; lsquo;unformat&amp;rsquo;单元&#26684;&#20540;</td>
<td><br>
null</td>
</tr>
</tbody>
</table>
<br>
<br>
<span style="font-size:32px">Jqgrid学习 -------数据</span><br>
jqGrid可支持的数据类型：xml、json、jsonp、local or clientSide、xmlstring、jsonstring 、script、function (&amp;hellip;)。<br>
<span style="font-size:32px">Json数据</span><br>
需要定义jsonReader来跟服务器端返回的数据做对应，其默认&#20540;：<br>
&amp;middot; jsonReader : {&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; root: &quot;rows&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; page: &quot;page&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; total: &quot;total&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; records: &quot;records&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; repeatitems: true,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cell: &quot;cell&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; id: &quot;id&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; userdata: &quot;userdata&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; subgrid: {root:&quot;rows&quot;,&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; repeatitems: true,&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cell:&quot;cell&quot;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp; <br>
<br>
这样服务器端返回的数据&#26684;式：<br>
&amp;middot; {&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp; total: &quot;xxx&quot;,&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp; page: &quot;yyy&quot;,&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp; records: &quot;zzz&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp; rows : [&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; {id:&quot;1&quot;, cell:[&quot;cell11&quot;, &quot;cell12&quot;, &quot;cell13&quot;]},&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; {id:&quot;2&quot;, cell:[&quot;cell21&quot;, &quot;cell22&quot;, &quot;cell23&quot;]},&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp; ]&nbsp; <br>
&amp; middot; }<br>
jsonReader的属性<br>
<table class="t_table " cellspacing="0">
<tbody>
<tr>
<td><br>
total</td>
<td><br>
总页数</td>
</tr>
<tr>
<td><br>
page</td>
<td><br>
当前页</td>
</tr>
<tr>
<td><br>
records</td>
<td><br>
查询出的记录数</td>
</tr>
<tr>
<td><br>
rows</td>
<td><br>
包含实际数据的数组</td>
</tr>
<tr>
<td><br>
id</td>
<td><br>
行id</td>
</tr>
<tr>
<td><br>
cell</td>
<td><br>
当前行的所有单元&#26684;</td>
</tr>
</tbody>
</table>
<br>
<br>
自定义：<br>
&amp;middot; jQuery(&quot;#gridid&quot;).jqGrid({&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; jsonReader : {&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; root:&quot;invdata&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; page: &quot;currpage&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; total: &quot;totalpages&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; records: &quot;totalrecords&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cell: &quot;invrow&quot;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; },&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot; }); <br>
&amp; middot; totalpages: &quot;xxx&quot;,&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp; currpage: &quot;yyy&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp; totalrecords: &quot;zzz&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp; invdata : [&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; {id:&quot;1&quot;, invrow:[&quot;cell11&quot;, &quot;cell12&quot;, &quot;cell13&quot;]},&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; {id:&quot;2&quot;, invrow:[&quot;cell21&quot;, &quot;cell22&quot;, &quot;cell23&quot;]},&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp; ]&nbsp; <br>
repeatitems&nbsp;&nbsp; 指明每行的数据是可以重复的，如果设为false，则会从返回的数据中按名字来搜索元素，这个名字就是colModel中的名字<br>
&amp;middot; jsonReader : {&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; root:&quot;invdata&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; page: &quot;currpage&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; total: &quot;totalpages&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; records: &quot;totalrecords&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; repeatitems: false,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; id: &quot;0&quot;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; }<br>
&amp; middot;&nbsp; totalpages: &quot;xxx&quot;,&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp; currpage: &quot;yyy&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp; totalrecords: &quot;zzz&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp; invdata : [&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; {invid:&quot;1&quot;,invdate:&quot;cell11&quot;, amount:&quot;cell12&quot;, tax:&quot;cell13&quot;, total:&quot;1234&quot;, note:&quot;somenote&quot;},&nbsp;
<br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; {invid:&quot;2&quot;,invdate:&quot;cell21&quot;, amount:&quot;cell22&quot;, tax:&quot;cell23&quot;, total:&quot;2345&quot;, note:&quot;some note&quot;},&nbsp;
<br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp; ]&nbsp; <br>
此例中，id属性&#20540;为&quot;invid&quot;。 一旦当此属性设为false时，我们就不必把所有在colModel定义的name&#20540;都赋&#20540;。因为是按name来进行搜索元素的，所以他的排序也不是按colModel中指定的排序结果。<br>
用户数据（user data） 在某些情况下，我们需要从服务器端返回一些参数但并不想直接把他们显示到表&#26684;中，而是想在别的地方显示，那么我们就需要用到userdata标签<br>
&amp;middot; jsonReader: {&nbsp; <br>
&amp; middot;&nbsp;&nbsp; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp; userdata: &quot;userdata&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp; ...&nbsp; <br>
&amp; middot; } <br>
&amp; middot; {&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp; total: &quot;xxx&quot;,&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp; page: &quot;yyy&quot;,&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp; records: &quot;zzz&quot;,&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp; userdata: {totalinvoice:240.00, tax:40.00},&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp; rows : [&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; {id:&quot;1&quot;, cell:[&quot;cell11&quot;, &quot;cell12&quot;, &quot;cell13&quot;]},&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; {id:&quot;2&quot;, cell:[&quot;cell21&quot;, &quot;cell22&quot;, &quot;cell23&quot;]},&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; ...&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp; ]&nbsp;&nbsp; <br>
&amp; middot; }<br>
在客户端我们可以有下面两种方法得到这些额外信息：<br>
1.&nbsp;&nbsp;&nbsp;&nbsp; jQuery(&quot;grid_id&quot;).getGridParam('userData')&nbsp; <br>
2.&nbsp;&nbsp;&nbsp;&nbsp; jQuery(&quot;grid_id&quot;).getUserData()&nbsp; <br>
3.&nbsp;&nbsp;&nbsp;&nbsp; jQuery(&quot;grid_id&quot;).getUserDataItem( key )&nbsp; <br>
<span style="font-size:32px">Jqgrid学习 -------事件</span><br>
&amp;middot; var lastSel;&nbsp; <br>
&amp; middot; jQuery(&quot;#gridid&quot;).jqGrid({&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; onSelectRow: function(id){&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(id &amp;&amp; id!==lastSel){&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jQuery('#gridid').restoreRow(lastSel);&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lastSel=id;&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jQuery('#gridid').editRow(id, true);&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; },&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot; })<br>
<br>
<table class="t_table " cellspacing="0">
<tbody>
<tr>
<td><br>
事件</td>
<td><br>
参数</td>
<td><br>
备注</td>
</tr>
<tr>
<td><br>
afterInsertRow</td>
<td><br>
rowidrowdatarowelem</td>
<td><br>
当插入每行时触发。rowid插入当前行的id；rowdata插入行的数据，&#26684;式为name: value，name为colModel中的名字</td>
</tr>
<tr>
<td><br>
beforeRequest</td>
<td><br>
none</td>
<td><br>
向服务器端发起请求之前触发此事件但如果datatype是一个function时例外</td>
</tr>
<tr>
<td><br>
beforeSelectRow</td>
<td><br>
rowid, e</td>
<td><br>
当用户点击当前行在未选择此行时触发。rowid：此行id；e：事件对象。返回&#20540;为ture或者false。如果返回true则选择完成，如果返回false则不会选择此行也不会触发其他事件</td>
</tr>
<tr>
<td><br>
gridComplete</td>
<td><br>
none</td>
<td><br>
当表&#26684;所有数据都加载完成而且其他的处理也都完成时触发此事件，排序，翻页同样也会触发此事件</td>
</tr>
<tr>
<td><br>
loadComplete</td>
<td><br>
xhr</td>
<td><br>
当从服务器返回响应时执行，xhr：XMLHttpRequest对象</td>
</tr>
<tr>
<td><br>
loadError</td>
<td><br>
xhr,status,error</td>
<td><br>
如果请求服务器失败则调用此方法。xhr：XMLHttpRequest对象；satus：错误类型，字符串类型；error：exception对象</td>
</tr>
<tr>
<td><br>
onCellSelect</td>
<td><br>
rowid,iCol,cellcontent,e</td>
<td><br>
当点击单元&#26684;时触发。rowid：当前行id；iCol：当前单元&#26684;索引；cellContent：当前单元&#26684;内容；e：event对象</td>
</tr>
<tr>
<td><br>
ondblClickRow</td>
<td><br>
rowid,iRow,iCol,e</td>
<td><br>
双击行时触发。rowid：当前行id；iRow：当前行索引位置；iCol：当前单元&#26684;位置索引；e:event对象</td>
</tr>
<tr>
<td><br>
onHeaderClick</td>
<td><br>
gridstate</td>
<td><br>
当点击显示/隐藏表&#26684;的那个按钮时触发；gridstate：表&#26684;状态，可选&#20540;：visible or hidden</td>
</tr>
<tr>
<td><br>
onPaging</td>
<td><br>
pgButton</td>
<td><br>
点击翻页按钮填充数据之前触发此事件，同样当输入页码跳转页面时也会触发此事件</td>
</tr>
<tr>
<td><br>
onRightClickRow</td>
<td><br>
rowid,iRow,iCol,e</td>
<td><br>
在行上右击鼠标时触发此事件。rowid：当前行id；iRow：当前行位置索引；iCol：当前单元&#26684;位置索引；e：event对象</td>
</tr>
<tr>
<td><br>
onSelectAll</td>
<td><br>
aRowids,status</td>
<td><br>
multiselect为ture，且点击头部的checkbox时才会触发此事件。aRowids：所有选中行的id集合，为一个数组。status：boolean变量说明checkbox的选择状态，true选中false不选中。无论checkbox是否选择，aRowids始终有&#20540;</td>
</tr>
<tr>
<td><br>
onSelectRow</td>
<td><br>
rowid,status</td>
<td><br>
当选择行时触发此事件。rowid：当前行id；status：选择状态，当multiselect为true时此参数才可用</td>
</tr>
<tr>
<td><br>
onSortCol</td>
<td><br>
index,iCol,sortorder</td>
<td><br>
当点击排序列但是数据还未进行变化时触发此事件。index：name在colModel中位置索引；iCol：当前单元&#26684;位置索引；sortorder：排序状态：desc或者asc</td>
</tr>
<tr>
<td><br>
resizeStart</td>
<td><br>
event, index</td>
<td><br>
当开始改变一个列宽度时触发此事件。event：event对象；index：当前列在colModel中位置索引</td>
</tr>
<tr>
<td><br>
resizeStop</td>
<td><br>
newwidth, index</td>
<td><br>
当列宽度改变之后触发此事件。newwidth：列改变后的宽度；index：当前列在colModel中的位置索引</td>
</tr>
<tr>
<td><br>
serializeGridData</td>
<td><br>
postData</td>
<td><br>
向服务器发起请求时会把数据进行序列化，用户自定义数据也可以被提交到服务器端</td>
</tr>
</tbody>
</table>
<br>
<br>
<span style="font-size:32px">Jqgrid学习 -------方法</span><br>
jqGrid的方法，从3.6开始已经完全兼容jQuery UI库。<br>
jQuery(&quot;#grid_id&quot;).jqGridMethod( parameter1,...parameterN );<br>
jQuery(&quot;#grid_id&quot;).setGridParam({...}).hideCol(&quot;somecol&quot;).trigger(&quot;reloadGrid&quot;);<br>
如果使用新的API：<br>
jQuery(&quot;#grid_id&quot;).jqGrid('method', parameter1,...parameterN );<br>
jQuery(&quot;#grid_id&quot;).jqGrid('setGridParam',{...}).jqGrid('hideCol',&quot;somecol&quot;).trigger(&quot;reloadGrid&quot;);<br>
jqGrid配置使用新的api<br>
&amp; middot; &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;&nbsp;
<br>
&amp; middot; &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;en&quot; lang=&quot;en&quot;&gt;&nbsp; <br>
&amp; middot; &lt;head&gt;&nbsp; <br>
&amp; middot; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&nbsp; <br>
&amp; middot; &lt;title&gt;My First Grid&lt;/title&gt;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; <br>
&amp; middot; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; href=&quot;css/ui-lightness/jquery-ui-1.7.1.custom.css&quot; /&gt;&nbsp;
<br>
&amp; middot; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; href=&quot;css/ui.jqgrid.css&quot; /&gt;&nbsp;
<br>
&amp; middot;&nbsp;&nbsp;&nbsp; <br>
&amp; middot; &lt;script src=&quot;js/jquery-1.3.2.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&nbsp; <br>
&amp; middot; &lt;script src=&quot;js/i18n/grid.locale-en.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&nbsp;
<br>
&amp; middot; &lt;script type=&quot;text/javascript&quot;&gt;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; jQuery.jgrid.no_legacy_api = true;&nbsp; <br>
&amp; middot; &lt;/script&gt;&nbsp; <br>
&amp; middot; &lt;script src=&quot;js/jquery.jqGrid.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&nbsp;
<br>
&amp; middot;&nbsp;&nbsp;&nbsp; <br>
&amp; middot; &lt;/head&gt;&nbsp; <br>
&amp; middot; &lt;body&gt;&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot; &lt;/body&gt;&nbsp; <br>
&amp; middot; &lt;/html&gt;<br>
<br>
jqGrid方法<br>
<table class="t_table " cellspacing="0">
<tbody>
<tr>
<td><br>
方法名</td>
<td><br>
参数</td>
<td><br>
返回&#20540;</td>
<td><br>
说明</td>
</tr>
<tr>
<td><br>
addJSONData</td>
<td><br>
data</td>
<td><br>
none</td>
<td><br>
使用传来的data数据填充表&#26684;。使用方法：<br>
var mygrid = jQuery(&quot;#&quot;&#43;grid_id)[0];<br>
var myjsongrid = eval(&quot;(&quot;&#43;jsonresponse.responseText&#43;&quot;)&quot;); mygrid.addJSONData(myjsongrid);<br>
myjsongrid = null;<br>
jsonresponse =null;</td>
</tr>
<tr>
<td><br>
addRowData</td>
<td><br>
rowid,data, position, srcrowid</td>
<td><br>
成功为true,否则为false</td>
<td><br>
根据参数插入一行新的数据，rowid为新行的id，data为新行的数据，position为新增行的位置，srcrowid为新增行的参考位置。data数据&#26684;式：{name1:value1,name2: value2&amp;hellip;} name为在colModel中指定的名称</td>
</tr>
<tr>
<td><br>
addXMLData</td>
<td><br>
data</td>
<td><br>
none</td>
<td><br>
根据传来的数据填充表&#26684;。用法：var mygrid = jQuery(&quot;#&quot;&#43;grid_id)[0]; mygrid.addXmlData(xmlresponse.responseXML);</td>
</tr>
<tr>
<td><br>
clearGridData</td>
<td><br>
clearfooter</td>
<td><br>
jqGrid对象</td>
<td><br>
清除表&#26684;当前加载的数据。如果clearfooter为true时则此方法删除表&#26684;最后一行的数据</td>
</tr>
<tr>
<td><br>
delRowData</td>
<td><br>
rowid</td>
<td><br>
成功为true否则为false</td>
<td><br>
根据rowid删除行，但不会从服务器端删除数据</td>
</tr>
<tr>
<td><br>
footerData</td>
<td><br>
action,data, format</td>
<td><br>
jgGrid对象</td>
<td><br>
设置或者取得底部数据。action：&quot;get&quot;或者&quot;set&quot;，默认为&quot;get&quot;，如果为&quot;get&quot;返回&#20540;为name:value，name为colModel中名称。如果为&quot;set&quot;则&#20540;为name：value，name是colModel中的名称。format：默认为true，当为true时，在设置新&#20540;时会调用formatter&#26684;式化数&#20540;</td>
</tr>
<tr>
<td><br>
getCell</td>
<td><br>
rowid, iCol</td>
<td><br>
单元&#26684;内容</td>
<td><br>
返回指定rowid，iCol的单元&#26684;内容，iCol既可以是当前列在colModel中的位置索引也可以是name&#20540;。注意：在编辑行或者单元&#26684;时不能使用此方法，此时返回的并不是改变的&#20540;，而是原始&#20540;</td>
</tr>
<tr>
<td><br>
getCol</td>
<td><br>
colname, returntype, mathoperation</td>
<td><br>
array[] or value</td>
<td><br>
返回列的&#20540;。colname既可以是当前列在colModel中的位置索引也可以是name&#20540;。returntype指定返回数据的类型，默认为false。当为false时，返回的数组中只包含列的&#20540;，当为true时返回数组是对象数组，具体&#26684;式{id:rowid, value:cellvalue} ，id为行的id，value为列的&#20540;。如：[{id:1,value:1},{id:2,value:2}&amp;hellip;]。mathoperation可选&#20540;为'sum, 'avg', 'count'</td>
</tr>
<tr>
<td><br>
getDataIDs</td>
<td><br>
none</td>
<td><br>
array[]</td>
<td><br>
返回当前grid里所有数据的id</td>
</tr>
<tr>
<td><br>
getGridParam</td>
<td><br>
name</td>
<td><br>
mixed value</td>
<td><br>
返回请求的参数信息</td>
</tr>
<tr>
<td><br>
getInd</td>
<td><br>
rowid,rowcontent</td>
<td><br>
mixed</td>
<td><br>
如果rowcontent为false，返回行所在的索引位置，id为行id。rowcontent默认为false。如果rowconent为ture则返回的为行对象，如果找不到行则返回false</td>
</tr>
<tr>
<td><br>
getRowData</td>
<td><br>
rowid or none</td>
<td><br>
array[]</td>
<td><br>
返回指定行的数据，返回数据类型为name:value，name为colModel中的名称，value为所在行的列的&#20540;，如果根据rowid找不到则返回空。在编辑模式下不能用此方法来获取数据，它得到的并不是编辑后的&#20540;</td>
</tr>
<tr>
<td><br>
hideCol</td>
<td><br>
colnameor[colnames]</td>
<td><br>
jqGrid对象</td>
<td><br>
如果参数为一个列名则隐藏此列，如果给定的是数组则隐藏指定的所有列。&#26684;式： [&quot;name1&quot;,&quot;name2&quot;]</td>
</tr>
<tr>
<td><br>
remapColumns</td>
<td><br>
permutation, updateCells, keepHeader</td>
<td><br>
none</td>
<td><br>
调整表&#26684;列的显示顺序,permutation为当前列的顺序，假如&#20540;是[1,0,2]，那么第一列就会在第二位显示。如果updateCells为ture则是对单元&#26684;数据进行重新排序，如果keepHeader为true则对header数据显示位置进行调整</td>
</tr>
<tr>
<td><br>
resetSelection</td>
<td><br>
none</td>
<td><br>
jqGrid对象</td>
<td><br>
选择或者反选行数据，在多选模式下也同样起作用</td>
</tr>
<tr>
<td><br>
setCaption</td>
<td><br>
caption</td>
<td><br>
jqGrid对象</td>
<td><br>
设置表&#26684;的标题</td>
</tr>
<tr>
<td><br>
setCell</td>
<td><br>
rowid,colname, data, class, properties</td>
<td><br>
jqGrid对象</td>
<td><br>
改变单元&#26684;的&#20540;。rowid：当前行id；colname：列名称，也可以是列的位置索引，从0开始；data：改变单元&#26684;的内容，如果为空则不更新；class：如果是string则会使用addClass方法将其加入到单元&#26684;的css中，如果是array则会直接加到style属性中；properties：设置单元&#26684;属性</td>
</tr>
<tr>
<td><br>
setGridParam</td>
<td><br>
object</td>
<td><br>
jqGrid对象</td>
<td><br>
设置grid的参数。有些参数的修改必须要重新加载grid才可以生效，这个方法可以覆盖事件</td>
</tr>
<tr>
<td><br>
setGridHeight</td>
<td><br>
new_height</td>
<td><br>
jqGrid对象</td>
<td><br>
动态改变grid的高度，只能对单元&#26684;的高度进行设置而不能对表&#26684;的高度进行动态修改。new_height：可以是象素&#20540;，百分比或者&quot;auto&quot;</td>
</tr>
<tr>
<td><br>
setGridWidth</td>
<td><br>
new_width,shrink</td>
<td><br>
jqGrid对象</td>
<td><br>
动态改变表&#26684;的宽度。new_width:表&#26684;宽度，象素&#20540;；shrink：true或者false，作用同shrinkToFit</td>
</tr>
<tr>
<td><br>
setLabel</td>
<td><br>
colname, data, class, properties</td>
<td><br>
jqGrid对象</td>
<td><br>
给指定列设置一个新的显示名称。colname：列名称，也可以是列的位置索引，从0开始；data：列显示名称，如果为空则不修改；class：如果是string则会使用addClass方法将其加入到单元&#26684;的css中，如果是array则会直接加到style属性中；properties：设置label的属性</td>
</tr>
<tr>
<td><br>
setRowData</td>
<td><br>
rowid,data, cssprop</td>
<td><br>
成功true否则false</td>
<td><br>
更新行的&#20540;，rowid为行id。data&#20540;&#26684;式：{name1:value1,name2: value2&amp;hellip;} name为colModel中名称；cssprop：如果是string则会使用addClass方法将其加入到行的css中，如果是array或者对象则会直接加到style属性中</td>
</tr>
<tr>
<td><br>
setSelection</td>
<td><br>
rowid,onselectrow</td>
<td><br>
jqGrid对象</td>
<td><br>
选择或反选指定行。如果onselectrow为ture则会触发事件onSelectRow，onselectrow默认为ture</td>
</tr>
<tr>
<td><br>
showCol</td>
<td><br>
colname</td>
<td><br>
jqGrid</td>
<td><br>
显示列。colname可以是数组[&quot;name1&quot;,&quot;name2&quot;],但是name1或者name2必须是colModel中的name</td>
</tr>
<tr>
<td><br>
trigger(&quot;reloadGrid&quot;)</td>
<td><br>
none</td>
<td><br>
jqGrid对象</td>
<td><br>
重新加载当前表&#26684;，也会向服务器发起新的请求</td>
</tr>
<tr>
<td><br>
updateColumns</td>
<td><br>
none</td>
<td><br>
none</td>
<td><br>
同步表&#26684;的宽度，用在表&#26684;拖拽时，用法：var mygrid=jQuery(&quot;#grid_id&quot;)[0];mygrid.updateColumns();</td>
</tr>
</tbody>
</table>
<br>
jqGrid的通用方法和设置 这些方法并不和jqGrid对象绑定，可以随意使用：<br>
jQuery.jgrid.jqGridFunction( parameter1,...parameterN );<br>
<table class="t_table " cellspacing="0">
<tbody>
<tr>
<td><br>
函数名</td>
<td><br>
参数</td>
<td><br>
返回&#20540;</td>
<td><br>
说明</td>
</tr>
<tr>
<td><br>
ajaxOptions</td>
<td><br>
空对象</td>
<td><br>
none</td>
<td><br>
这个函数可以改变jqgrid中用到的ajax请求参数，这个函数可以覆盖当前所有ajax请求设置。从3.6版本开始起有3个级别的ajax设置：第一个级别就是在模块中设置ajax请求；第二个级别就是通过此函数设置；第三级别的设置是控制全局ajax请求的设置：jQuery.extend(jQuery.ajax({method specific options}, ajaxOptions, ThirdLevelajaxSettinds));当然我们也可以单独设置ajax的参数</td>
</tr>
<tr>
<td><br>
jqID</td>
<td><br>
string</td>
<td><br>
解析后的string</td>
<td><br>
转义字符串，把两个反斜杠(\\)转化为单个反斜杠(\)</td>
</tr>
<tr>
<td><br>
jgrid.htmlDecode</td>
<td><br>
string</td>
<td><br>
转换后string</td>
<td><br>
把转码后的字符串还原</td>
</tr>
<tr>
<td><br>
jgrid.htmlEncode</td>
<td><br>
string</td>
<td><br>
编码后的string</td>
<td><br>
把字符串编码</td>
</tr>
<tr>
<td><br>
jgrid.format</td>
<td><br>
string</td>
<td><br>
&#26684;式化后string</td>
<td><br>
简单字符串模板。用法：Example jQuery.jqgformat(&quot;Please enter a value between {0} and {1}.&quot;, 4,result : &quot;Please enter a value between 4 and 8.&quot;</td>
</tr>
<tr>
<td><br>
jgrid.getCellIndex</td>
<td><br>
cell</td>
<td><br>
index</td>
<td><br>
这个方法是用来修复在ie7里的一个bug</td>
</tr>
<tr>
<td><br>
jgrid.stringToDoc</td>
<td><br>
xmlstring</td>
<td><br>
xmlDoc</td>
<td><br>
把xmlstring转换为dom对象</td>
</tr>
<tr>
<td><br>
jgrid.stripHtml</td>
<td><br>
content</td>
<td><br>
new_content</td>
<td><br>
去掉html标签返回标签中内容</td>
</tr>
<tr>
<td><br>
jgrid.parse</td>
<td><br>
jsonstring</td>
<td><br>
对象</td>
<td><br>
把一个jsonstring转换为json对象</td>
</tr>
</tbody>
</table>
<br>
<br>
<br>
jqGrid的方法<br>
<table class="t_table " cellspacing="0">
<tbody>
<tr>
<td><br>
方法名</td>
<td><br>
参数</td>
<td><br>
返回&#20540;</td>
<td><br>
说明</td>
</tr>
<tr>
<td><br>
filterGrid</td>
<td><br>
grid_id,params</td>
<td><br>
HTML对象</td>
<td><br>
构造jqGrid的查询界面。grid_id:表&#26684;id；params：参数</td>
</tr>
<tr>
<td><br>
filterToolbar</td>
<td><br>
params</td>
<td><br>
jqGrid对象</td>
<td><br>
同上。不同的是搜索输入框在header层下方</td>
</tr>
<tr>
<td><br>
getColProp</td>
<td><br>
colname</td>
<td><br>
array</td>
<td><br>
返回指定列的属性集合。name为colModel中名称</td>
</tr>
<tr>
<td><br>
GridDestroy</td>
<td><br>
grid_id</td>
<td><br>
boolean</td>
<td><br>
从dom上删除此grid</td>
</tr>
<tr>
<td><br>
GridUnload</td>
<td><br>
grid_id</td>
<td><br>
boolean</td>
<td><br>
跟GridDestroy不同的是table对象跟pager对象并不会被删除，以便下次使用</td>
</tr>
<tr>
<td><br>
setGridState</td>
<td><br>
state</td>
<td><br>
jqGrid对象</td>
<td><br>
设置grid的状态，显示或者隐藏。这个方法不会触发onHeaderClick事件。</td>
</tr>
<tr>
<td><br>
setColProp</td>
<td><br>
colname, properties</td>
<td><br>
jqGrid对象</td>
<td><br>
设置新的属性，对于动态改变列属性是非常有用的，但是有些属性的修改并不会起效。用法：jQuery(&quot;#grid_id&quot;).setColProp('colname',{editoptions:{value:&quot;True:False&quot;}});</td>
</tr>
<tr>
<td><br>
sortGrid</td>
<td><br>
colname, reload</td>
<td><br>
jqGrid对象</td>
<td><br>
按指定列进行排序。效果同setGridParam({sortname:'myname'}).trigger('reloadGrid').如果reload为true则会重新加载数据</td>
</tr>
<tr>
<td><br>
updateGridRows</td>
<td><br>
data,rowidname,jsonreader</td>
<td><br>
boolean</td>
<td><br>
修改表&#26684;中某行的数据，data数据&#26684;式：[{name:value,name1:value1&amp;hellip;}, {name:value,name2:value2&amp;hellip;}]，name为colModel中的名称；rowidname某行的名称。jsonreader：boolean&#20540;，默认false。如果为true则是定义数据的&#26684;式，data的&#20540;并不是name：value形式而只是value</td>
</tr>
</tbody>
</table>
<br>
<span style="font-size:32px">Jqgrid学习 -------配置 json</span><br>
IE8，FF3以及Chrome 3已经支持JSON，配置：<br>
&amp;middot; &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;&nbsp;
<br>
&amp; middot; &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;en&quot; lang=&quot;en&quot;&gt;&nbsp; <br>
&amp; middot; &lt;head&gt;&nbsp; <br>
&amp; middot; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&nbsp; <br>
&amp; middot; &lt;title&gt;My First Grid&lt;/title&gt;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; <br>
&amp; middot; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; href=&quot;css/ui-lightness/jquery-ui-1.7.1.custom.css&quot; /&gt;&nbsp;
<br>
&amp; middot; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; href=&quot;css/ui.jqgrid.css&quot; /&gt;&nbsp;
<br>
&amp; middot;&nbsp;&nbsp;&nbsp; <br>
&amp; middot; &lt;script src=&quot;js/jquery-1.3.2.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&nbsp; <br>
&amp; middot; &lt;script src=&quot;js/i18n/grid.locale-en.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&nbsp;
<br>
&amp; middot; &lt;script type=&quot;text/javascript&quot;&gt;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; jQuery.jgrid.useJSON = true;&nbsp; <br>
&amp; middot; &lt;/script&gt;&nbsp; <br>
&amp; middot; &lt;script src=&quot;js/jquery.jqGrid.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&nbsp;
<br>
&amp; middot;&nbsp;&nbsp;&nbsp; <br>
&amp; middot; &lt;/head&gt;&nbsp; <br>
&amp; middot; &lt;body&gt;&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot; &lt;/body&gt;&nbsp; <br>
&amp; middot; &lt;/html&gt;<br>
这段代码要放到语言包之后jqGrid.js文件之前。 如果浏览器不支持JSON，那么我们只能用eval函数解析json。<br>
除了jqGrid本身提供对json的类库外，我们可以使用JSON.parse来处理JSON，配置如下：<br>
&amp;middot; &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;&nbsp;
<br>
&amp; middot; &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;en&quot; lang=&quot;en&quot;&gt;&nbsp; <br>
&amp; middot; &lt;head&gt;&nbsp; <br>
&amp; middot; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&nbsp; <br>
&amp; middot; &lt;title&gt;My First Grid&lt;/title&gt;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; <br>
&amp; middot; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; href=&quot;css/ui-lightness/jquery-ui-1.7.1.custom.css&quot; /&gt;&nbsp;
<br>
&amp; middot; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; href=&quot;css/ui.jqgrid.css&quot; /&gt;&nbsp;
<br>
&amp; middot;&nbsp;&nbsp;&nbsp; <br>
&amp; middot; &lt;script src=&quot;js/json2.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&nbsp; <br>
&amp; middot; &lt;script src=&quot;js/jquery-1.3.2.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&nbsp; <br>
&amp; middot; &lt;script src=&quot;js/i18n/grid.locale-en.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&nbsp;
<br>
&amp; middot; &lt;script src=&quot;js/jquery.jqGrid.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&nbsp;
<br>
&amp; middot; &lt;script type=&quot;text/javascript&quot;&gt;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; jQuery.extend(jQuery.jgrid,{&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; parse:function(jsstring) {&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return JSON.parse(jsstring);&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; });&nbsp; <br>
&amp; middot; &lt;/script&gt;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; <br>
&amp; middot; &lt;/head&gt;&nbsp; <br>
&amp; middot; &lt;body&gt;&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot; &lt;/body&gt;&nbsp; <br>
&amp; middot; &lt;/html&gt;<br>
<br>
<span style="font-size:32px">Jqgrid学习 -------翻页</span><br>
jqGrid的翻页要定义在html里，通常是在grid的下面，且是一个div对象：<br>
&amp;middot; &lt;table id=&quot;list&quot;&gt;&lt;/table&gt;&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; &lt;div id=&quot;gridpager&quot;&gt;&lt;/div&gt;<br>
&amp; middot; jQuery(&quot;#grid_id&quot;).jqGrid({&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; pager : '#gridpager',&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot; });<br>
不必给翻页设置任何的css属性。在jqGrid里定义的翻页可以是：:pager : '#gridpager', pager : 'gridpager' or pager : jQuery('#gridpager'). 推荐使用前两个，当使用其他方式时jqGrid的导入导出功能时会引起错误。<br>
导航栏的属性：<br>
&amp;middot; $.jgrid = {&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; defaults : {&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; recordtext: &quot;View {0} - {1} of {2}&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; emptyrecords: &quot;No records to view&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; loadtext: &quot;Loading...&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pgtext : &quot;Page {0} of {1}&quot;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; },&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot; }<br>
如果想改变这些设置：<br>
1．&nbsp; jQuery.extend(jQuery.jgrid.defaults,{emptyrecords: &quot;Nothing to display&quot;,...});<br>
<br>
2．&nbsp;&nbsp; jQuery(&quot;#grid_id&quot;).jqGrid({&nbsp; <br>
...&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pager : '#gridpager',&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; emptyrecords: &quot;Nothing to display&quot;,&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });<br>
导航栏的属性：<br>
<table class="t_table " cellspacing="0">
<tbody>
<tr>
<td><br>
属性名</td>
<td><br>
类型</td>
<td><br>
说明</td>
<td><br>
默认&#20540;</td>
<td><br>
是否可以被修改</td>
</tr>
<tr>
<td><br>
lastpage</td>
<td><br>
integer</td>
<td><br>
只读属性，总页数</td>
<td><br>
0</td>
<td><br>
NO</td>
</tr>
<tr>
<td><br>
pager</td>
<td><br>
mixed</td>
<td><br>
导航栏对象，必须是一个有效的html元素，位置可以随意</td>
<td><br>
空字符串</td>
<td><br>
NO</td>
</tr>
<tr>
<td><br>
pagerpos</td>
<td><br>
string</td>
<td><br>
定义导航栏的位置，默认分为三部分：翻页，导航工具及记录信息</td>
<td><br>
center</td>
<td><br>
NO</td>
</tr>
<tr>
<td><br>
pgbuttons</td>
<td><br>
boolean</td>
<td><br>
是否显示翻页按钮</td>
<td><br>
true</td>
<td><br>
NO</td>
</tr>
<tr>
<td><br>
pginput</td>
<td><br>
boolean</td>
<td><br>
是否显示跳转页面的输入框</td>
<td><br>
true</td>
<td><br>
NO</td>
</tr>
<tr>
<td><br>
pgtext</td>
<td><br>
string</td>
<td><br>
页面信息，第一个&#20540;是当前页第二个&#20540;是总页数</td>
<td><br>
语言包</td>
<td><br>
YES</td>
</tr>
<tr>
<td><br>
reccount</td>
<td><br>
integer</td>
<td><br>
只读属性，实际记录数，千万不能跟records参数搞混了，通常情况下他们是相同的，假如我们定义rowNum=15，但我们从服务器端返回的记录为20即records=20，而reccount=15，表&#26684;中也显示15条记录</td>
<td><br>
0</td>
<td><br>
NO</td>
</tr>
<tr>
<td><br>
recordpos</td>
<td><br>
string</td>
<td><br>
定义记录信息的位置，可选&#20540;：left, center, right</td>
<td><br>
right</td>
<td><br>
NO</td>
</tr>
<tr>
<td><br>
records</td>
<td><br>
integer</td>
<td><br>
只读属性，从服务器端返回的记录数</td>
<td><br>
none</td>
<td><br>
NO</td>
</tr>
<tr>
<td><br>
recordtext</td>
<td><br>
string</td>
<td><br>
显示记录的信息，只有当viewrecords为true时起效，且记录数必须大于0</td>
<td><br>
语言包</td>
<td><br>
yes</td>
</tr>
<tr>
<td><br>
rowList</td>
<td><br>
array</td>
<td><br>
可以改变表&#26684;可以显示的记录数，&#26684;式为[10,20,30]</td>
<td><br>
array</td>
<td><br>
no</td>
</tr>
<tr>
<td><br>
rowNum</td>
<td><br>
integer</td>
<td><br>
设置表&#26684;可以显示的记录数</td>
<td><br>
20</td>
<td><br>
yes</td>
</tr>
<tr>
<td><br>
viewrecords</td>
<td><br>
boolean</td>
<td><br>
是否要显示总记录数信息</td>
<td><br>
false</td>
<td><br>
no</td>
</tr>
</tbody>
</table>
<br>
jQuery(&quot;#grid_id&quot;).setGridParam({rowNum:10}).trigger(&quot;reloadGrid&quot;);&nbsp; <br>
跟翻页相关的事件只有一个：onPaging<br>
<table class="t_table " cellspacing="0">
<tbody>
<tr>
<td><br>
onPaging</td>
<td><br>
pgButton</td>
<td><br>
当点击翻页按钮但还为展现数据时触发此事件，当然这跳转栏输入页码改变页时也同样触发此事件。参数pgButton可选&#20540;：first,last,prev,next</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
<br>
jqGrid的翻页导航是一个方法，你可以事先定义一些其他操作，比如：编辑、新增、删除及搜索。也可以增加自定义的函数。导航工具栏是定义到翻页控件上的。定义如下：<br>
&amp;middot; &lt;body&gt;&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; &lt;table id=&quot;list&quot;&gt;&lt;/table&gt;&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; &lt;div id=&quot;gridpager&quot;&gt;&lt;/div&gt;&nbsp;&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot; &lt;/body&gt;<br>
<br>
&amp; middot; jQuery(&quot;#grid_id&quot;).jqGrid({&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; pager : '#gridpager',&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot; });&nbsp; <br>
&amp; middot; jQuery(&quot;#grid_id&quot;).navGrid('#gridpager',{parameters},prmEdit, prmAdd, prmDel, prmSearch, prmView);&nbsp;
<br>
<br>
&amp; middot; jQuery(&quot;#grid_id&quot;).jqGrid({&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; pager : '#gridpager',&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot; });&nbsp; <br>
&amp; middot; jQuery(&quot;#grid_id&quot;).jqGrid('navGrid','#gridpager',{parameters},prmEdit, prmAdd, prmDel, prmSearch, prmView);&nbsp;
<br>
&amp; middot; jQuery(&quot;#grid_id&quot;).jqGrid({&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; pager : '#gridpager',&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot; }).navGrid('#gridpager',{parameters}, prmEdit, prmAdd, prmDel, prmSearch, prmView);&nbsp;
<br>
&amp; middot; ...<br>
<br>
grid_id ：表&#26684;id gridpager ：导航栏id parameters ：参数列表 prmEdit, prmAdd, prmDel, prmSearch, prmView ：事件<br>
&amp;middot; $.jgrid = {&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; search : {&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; caption: &quot;Search...&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Find: &quot;Find&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Reset: &quot;Reset&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; odata : ['equal', 'not equal', 'less', 'less or equal','greater','greater or equal', 'begins with','does not begin with','is in','is not in','ends with','does not end with','contains','does not contain'],&nbsp;
<br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groupOps: [ { op: &quot;AND&quot;, text: &quot;all&quot; }, { op: &quot;OR&quot;, text: &quot;any&quot; } ],&nbsp;
<br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; matchText: &quot; match&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rulesText: &quot; rules&quot;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; },&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; edit : {&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addCaption: &quot;Add Record&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; editCaption: &quot;Edit Record&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bSubmit: &quot;Submit&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bCancel: &quot;Cancel&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bClose: &quot;Close&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; saveData: &quot;Data has been changed! Save changes?&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bYes : &quot;Yes&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bNo : &quot;No&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bExit : &quot;Cancel&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp; },&nbsp; <br>
&amp; middot;&nbsp;&nbsp; view : {&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; caption: &quot;View Record&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; bClose: &quot;Close&quot;&nbsp; <br>
&amp; middot;&nbsp;&nbsp; },&nbsp; <br>
&amp; middot;&nbsp;&nbsp; del : {&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; caption: &quot;Delete&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; msg: &quot;Delete selected record(s)?&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; bSubmit: &quot;Delete&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; bCancel: &quot;Cancel&quot;&nbsp; <br>
&amp; middot;&nbsp;&nbsp; },&nbsp; <br>
&amp; middot;&nbsp;&nbsp; nav : {&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; edittext: &quot;&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; edittitle: &quot;Edit selected row&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; addtext:&quot;&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; addtitle: &quot;Add new row&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; deltext: &quot;&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; deltitle: &quot;Delete selected row&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; searchtext: &quot;&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; searchtitle: &quot;Find records&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; refreshtext: &quot;&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; refreshtitle: &quot;Reload Grid&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; alertcap: &quot;Warning&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; alerttext: &quot;Please, select row&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; viewtext: &quot;&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; viewtitle: &quot;View selected row&quot;&nbsp; <br>
&amp; middot;&nbsp;&nbsp; },&nbsp; <br>
&amp; middot; ...<br>
<table class="t_table " cellspacing="0">
<tbody>
<tr>
<td><br>
属性</td>
<td><br>
类型</td>
<td><br>
说明</td>
<td><br>
默认&#20540;</td>
</tr>
<tr>
<td><br>
add</td>
<td><br>
boolean</td>
<td><br>
是否启用新增功能，当点击按钮时会触发editGridRow事件</td>
<td><br>
true</td>
</tr>
<tr>
<td><br>
addicon</td>
<td><br>
string</td>
<td><br>
给新增功能设置图标，只有UI theme里的图标才可以使用</td>
<td><br>
ui-icon-plus</td>
</tr>
<tr>
<td><br>
addtext</td>
<td><br>
string</td>
<td><br>
新增按钮上的文字</td>
<td><br>
空</td>
</tr>
<tr>
<td><br>
addtitle</td>
<td><br>
string</td>
<td><br>
当鼠标移到新增按钮上时显示的提示</td>
<td><br>
新增一行</td>
</tr>
<tr>
<td><br>
alertcap</td>
<td><br>
string</td>
<td><br>
当我们edit,delete or view一行记录时出现的提示信息</td>
<td><br>
警告</td>
</tr>
<tr>
<td><br>
alerttext</td>
<td><br>
string</td>
<td><br>
当edit,delete or view一行记录时的文本提示</td>
<td><br>
请选择一行记录</td>
</tr>
<tr>
<td><br>
closeOnEscape</td>
<td><br>
boolean</td>
<td><br>
是否可以使用esc键关闭对话框</td>
<td><br>
true</td>
</tr>
<tr>
<td><br>
del</td>
<td><br>
boolean</td>
<td><br>
是否启用删除功能，启用时会触发事件delGridRow</td>
<td><br>
true</td>
</tr>
<tr>
<td><br>
delicon</td>
<td><br>
string</td>
<td><br>
设置删除按钮的图标，只有UI theme里的图标才可以使用</td>
<td><br>
ui-icon-trash</td>
</tr>
<tr>
<td><br>
deltext</td>
<td><br>
string</td>
<td><br>
设置到删除按钮上的文字信息</td>
<td><br>
空</td>
</tr>
<tr>
<td><br>
deltitle</td>
<td><br>
string</td>
<td><br>
当鼠标移到删除按钮上时出现的提示</td>
<td><br>
删除锁选择的行</td>
</tr>
<tr>
<td><br>
edit</td>
<td><br>
boolean</td>
<td><br>
是否启用可编辑功能，当编辑时会触发事件editGridRow</td>
<td><br>
true</td>
</tr>
<tr>
<td><br>
editicon</td>
<td><br>
string</td>
<td><br>
设置编辑按钮的图标，只有UI theme里的图标才可以使用</td>
<td><br>
ui-icon-pencil</td>
</tr>
<tr>
<td><br>
edittext</td>
<td><br>
string</td>
<td><br>
编辑按钮上文字</td>
<td><br>
空</td>
</tr>
<tr>
<td><br>
edittitle</td>
<td><br>
string</td>
<td><br>
当鼠标移到编辑按钮上出现的提示信息</td>
<td><br>
编辑所选择的行</td>
</tr>
<tr>
<td><br>
position</td>
<td><br>
string</td>
<td><br>
定义按钮位置，可选&#20540;left, center and right.</td>
<td><br>
left</td>
</tr>
<tr>
<td><br>
refresh</td>
<td><br>
boolean</td>
<td><br>
是否启用刷新按钮，当点击刷新按钮时会触发trigger(&quot;reloadGrid&quot;)事件，而且会清空搜索条件&#20540;</td>
<td><br>
true</td>
</tr>
<tr>
<td><br>
refreshicon</td>
<td><br>
string</td>
<td><br>
设置刷新图标，只有UI theme里的图标才可以使用</td>
<td><br>
ui-icon-refresh</td>
</tr>
<tr>
<td><br>
refreshtext</td>
<td><br>
string</td>
<td><br>
刷新按钮上文字信息</td>
<td><br>
空</td>
</tr>
<tr>
<td><br>
refreshtitle</td>
<td><br>
string</td>
<td><br>
当鼠标移到刷新按钮上的提示信息</td>
<td><br>
重新加载</td>
</tr>
<tr>
<td><br>
refreshstate</td>
<td><br>
string</td>
<td><br>
指明表&#26684;如何刷新。firstpage：从第一页开始刷新；current：只刷新当前页内容</td>
<td><br>
firstpage</td>
</tr>
<tr>
<td><br>
afterRefresh</td>
<td><br>
function</td>
<td><br>
当点击刷新按钮之后触发此事件</td>
<td><br>
null</td>
</tr>
<tr>
<td><br>
search</td>
<td><br>
boolean</td>
<td><br>
是否启用搜索按钮，会触发searchGrid事件</td>
<td><br>
true</td>
</tr>
<tr>
<td><br>
searchhicon</td>
<td><br>
string</td>
<td><br>
设置搜索按钮的图标，只有UI theme里的图标才可以使用</td>
<td><br>
ui-icon-search</td>
</tr>
<tr>
<td><br>
searchtext</td>
<td><br>
string</td>
<td><br>
搜索按钮上的文字</td>
<td><br>
空</td>
</tr>
<tr>
<td><br>
searchtitle</td>
<td><br>
string</td>
<td><br>
当鼠标移到搜索按钮上的提示信息</td>
<td><br>
搜索</td>
</tr>
<tr>
<td><br>
view</td>
<td><br>
boolean</td>
<td><br>
是否启用查看按钮，会触发事件viewGridRow</td>
<td><br>
false</td>
</tr>
<tr>
<td><br>
viewicon</td>
<td><br>
string</td>
<td><br>
设置查看按钮的图标，只有UI theme里的图标才可以使用</td>
<td><br>
ui-icon-document</td>
</tr>
<tr>
<td><br>
viewtext</td>
<td><br>
string</td>
<td><br>
查看按钮上文字</td>
<td><br>
空</td>
</tr>
<tr>
<td><br>
viewtitle</td>
<td><br>
string</td>
<td><br>
当鼠标移到查看按钮上的提示信息</td>
<td><br>
查看所选记录</td>
</tr>
</tbody>
</table>
<br>
<br>
&amp; middot; jQuery(&quot;#grid_id&quot;).jqGrid({&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; pager : '#gridpager',&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot; }).navGrid('#gridpager',{view:true, del:false},&nbsp;&nbsp; <br>
&amp; middot; {}, // use default settings for edit&nbsp; <br>
&amp; middot; {}, // use default settings for add&nbsp; <br>
&amp; middot; {},&nbsp; // delete instead that del:false we need this&nbsp; <br>
&amp; middot; {multipleSearch : true}, // enable the advanced searching&nbsp; <br>
&amp; middot; {closeOnEscape:true} /* allow the view dialog to be closed when user press ESC key*/&nbsp;
<br>
&amp; middot; );<br>
<span style="font-size:32px">Jqgrid学习 -------自定义按钮</span><br>
jQuery(&quot;#grid_id&quot;).navGrid(&quot;#pager&quot;,...).navButtonAdd(&quot;#pager&quot;,{parameters});<br>
jQuery(&quot;#grid_id&quot;).jqGrid('navGrid',&quot;#pager&quot;,...).jqGrid('navButtonAdd',&quot;#pager&quot;,{parameters});<br>
{ caption:&quot;NewButton&quot;, buttonicon:&quot;ui-icon-newwin&quot;, onClickButton:null, position: &quot;last&quot;, title:&quot;&quot;, cursor: &quot;pointer&quot;}&nbsp;
<br>
caption：按钮名称，可以为空，string类型 buttonicon：按钮的图标，string类型，必须为UI theme图标 onClickButton：按钮事件，function类型，默认null position：first或者last，按钮位置 title：string类型，按钮的提示信息 cursor：string类型，光标类型，默认为pointer id：string类型，按钮id<br>
如果设置多个按钮：<br>
&amp;middot; jQuery(&quot;#grid_id&quot;)&nbsp; <br>
&amp; middot; .navGrid('#pager',{edit:false,add:false,del:false,search:false})&nbsp; <br>
&amp; middot; .navButtonAdd('#pager',{&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; caption:&quot;Add&quot;,&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; buttonicon:&quot;ui-icon-add&quot;,&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; onClickButton: function(){&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert(&quot;Adding Row&quot;);&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; },&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; position:&quot;last&quot;&nbsp; <br>
&amp; middot; })&nbsp; <br>
&amp; middot; .navButtonAdd('#pager',{&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; caption:&quot;Del&quot;,&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; buttonicon:&quot;ui-icon-del&quot;,&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; onClickButton: function(){&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert(&quot;Deleting Row&quot;);&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; },&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; position:&quot;last&quot;&nbsp; <br>
&amp; middot; });<br>
按钮间的分隔<br>
jQuery(&quot;#grid_id&quot;).navGrid(&quot;#pager&quot;,...).navButtonAdd(&quot;#pager&quot;,{parameters}).navSeparatorAdd(&quot;#pager&quot;,{separator_parameters}};<br>
默认参数：<br>
{sepclass : &quot;ui-separator&quot;,sepcontent: ''}<br>
<br>
sepclass：ui-jqgrid的属性名 sepcontent：分隔符的内容.<br>
<span style="font-size:32px">Jqgrid学习 -------&#26684;式化</span><br>
jqGrid的&#26684;式化是定义在语言包中<br>
&amp;middot; $jgrid = {&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; formatter : {&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; integer : {thousandsSeparator: &quot; &quot;, defaultValue: '0'},&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; number : {decimalSeparator:&quot;.&quot;, thousandsSeparator: &quot; &quot;, decimalPlaces: 2, defaultValue: '0.00'},&nbsp;
<br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; currency : {decimalSeparator:&quot;.&quot;, thousandsSeparator: &quot; &quot;, decimalPlaces: 2, prefix: &quot;&quot;, suffix:&quot;&quot;, defaultValue: '0.00'},&nbsp;
<br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; date : {&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dayNames: [&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Sun&quot;, &quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thr&quot;, &quot;Fri&quot;, &quot;Sat&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;&nbsp;
<br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ],&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; monthNames: [&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;,&nbsp;
<br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;&nbsp;
<br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ],&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AmPm : [&quot;am&quot;,&quot;pm&quot;,&quot;AM&quot;,&quot;PM&quot;],&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; S: function (j) {return j &lt; 11 || j &gt; 13 ? ['st', 'nd', 'rd', 'th'][Math.min((j - 1) % 10, 3)] : 'th'},&nbsp;
<br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; srcformat: 'Y-m-d',&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newformat: 'd/m/Y',&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; masks : {&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ISO8601Long:&quot;Y-m-d H:i:s&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ISO8601Short:&quot;Y-m-d&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ShortDate: &quot;n/j/Y&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LongDate: &quot;l, F d, Y&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FullDateTime: &quot;l, F d, Y g:i:s A&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MonthDay: &quot;F d&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ShortTime: &quot;g:i A&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LongTime: &quot;g:i:s A&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SortableDateTime: &quot;Y-m-d\\TH:i:s&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UniversalSortableDateTime: &quot;Y-m-d H:i:sO&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; YearMonth: &quot;F, Y&quot;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; reformatAfterEdit : false&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; baseLinkUrl: '',&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; showAction: '',&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; target: '',&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; checkbox : {disabled:true},&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; idName : 'id'&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; }&nbsp; <br>
&amp; middot; ...<br>
这些设置可以通过colModel中的formatoptions参数修改<br>
&amp;middot; jQuery(&quot;#grid_id&quot;).jqGrid({&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; colModel : [&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {name:'myname', ... formatter:'number', ...},&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; ],&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot; });<br>
此实例是对名为&quot;myname&quot;的列进行&#26684;式化，&#26684;式化类是&quot;number&quot;，假如初始&#20540;为&quot;1234.1&quot;则&#26684;式化后显示为&quot;1 234.10&quot; 。<br>
如果给某列进行&#26684;式化：<br>
&amp;middot; jQuery(&quot;#grid_id&quot;).jqGrid({&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; colModel : [&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {name:'myname', ... formatter:'currency', formatoptions:{decimalSeparator:&quot;,&quot;, thousandsSeparator: &quot;,&quot;, decimalPlaces: 2, prefix: &quot;$ &quot;} } ,&nbsp;
<br>
&amp; middot;&nbsp;&nbsp;&nbsp; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; ],&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot; });<br>
这个设置会覆盖语言包中的设置。<br>
<br>
select类型的&#26684;式化实例：<br>
原始数据<br>
&amp;middot; jQuery(&quot;#grid_id&quot;).jqGrid({&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; colModel : [ {name:'myname', edittype:'select', editoptions:{value:&quot;1:One;2:Two&quot;}} ... ],&nbsp;
<br>
&amp; middot; ...&nbsp; <br>
&amp; middot; });<br>
使用&#26684;式化后<br>
&amp;middot; jQuery(&quot;#grid_id&quot;).jqGrid({&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; colModel : [ {name:'myname', edittype:'select', formatter:'select', editoptions:{value:&quot;1:One;2:Two&quot;}} ... ]&nbsp;
<br>
&amp; middot; ...&nbsp; <br>
&amp; middot; });<br>
结果是，表&#26684;的数据&#20540;为1或者2但是现实的是One或者Two。<br>
对超链接使用select类型的&#26684;式化：<br>
&amp;middot; jQuery(&quot;#grid_id&quot;).jqGrid({&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; colModel: [ {name:'myname', edittype:'select', formatter:'select', formatoptions:{baseLinkUrl:'someurl.php', addParam: '&amp;action=edit'}, ...}&nbsp;&nbsp;
<br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; ]&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot; });<br>
得到[url=http://www.blogjava.net/ilovebabyfat/archive/2012/04/06/373456.html#_msocom_2]<br>
如果想改变id&#20540;则<br>
&amp;middot; jQuery(&quot;#grid_id&quot;).jqGrid({&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; colModel: [ {name:'myname', edittype:'select', formatter:'select', formatoptions:{baseLinkUrl:'someurl.php', addParam: '&amp;action=edit', idName:'myid'}, ...}&nbsp;&nbsp;
<br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; ]&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot; });<br>
得到footerrow<br>
<br>
<span style="font-size:32px">Jqgrid学习 -------自定义&#26684;式化</span><br>
&amp;middot; jQuery(&quot;#grid_id&quot;).jqGrid({&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; colModel: [&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {name:'price', index:'price', width:60, align:&quot;center&quot;, editable: true, formatter:currencyFmatter},&nbsp;
<br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; ]&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot; });&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; <br>
&amp; middot; function currencyFmatter (cellvalue, options, rowObject)&nbsp; <br>
&amp; middot; {&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; // do something here&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; return new_format_value&nbsp; <br>
&amp; middot; }<br>
cellvalue：要被&#26684;式化的&#20540; options：对数据进行&#26684;式化时的参数设置，&#26684;式为： { rowId: rid, colModel: cm} rowObject：行数据<br>
<br>
数据的反&#26684;式化跟&#26684;式化用法相&#20284;.<br>
&amp;middot; jQuery(&quot;#grid_id&quot;).jqGrid({&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; colModel: [&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {name:'price', index:'price', width:60, align:&quot;center&quot;, editable: true, formatter:currencyFmatter, unformat:unformatCurrency},&nbsp;
<br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; ]&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot; });&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; <br>
&amp; middot; function currencyFmatter (cellvalue, options, rowObject)&nbsp; <br>
&amp; middot; {&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; return &quot;$&quot;&#43;cellvalue;&nbsp; <br>
&amp; middot; }&nbsp; <br>
&amp; middot; function&nbsp; unformatCurrency (cellvalue, options)&nbsp; <br>
&amp; middot; {&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; return cellvalue.replace(&quot;$&quot;,&quot;&quot;);&nbsp; <br>
&amp; middot; }&nbsp; <br>
表&#26684;中数据实际&#20540;为123.00，但是显示的是$123.00; 我们使用getRowData ，getCell 方法取得的&#20540;是123.00。 创建通用的&#26684;式化函数<br>
&amp;middot; &lt;script type=&quot;text/javascript&quot;&gt;&nbsp; <br>
&amp; middot; jQuery.extend($.fn.fmatter , {&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; currencyFmatter : function(cellvalue, options, rowdata) {&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; return &quot;$&quot;&#43;cellvalue;&nbsp; <br>
&amp; middot; }&nbsp; <br>
&amp; middot; });&nbsp; <br>
&amp; middot; jQuery.extend($.fn.fmatter.currencyFmatter , {&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; unformat : function(cellvalue, options) {&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp; return cellvalue.replace(&quot;$&quot;,&quot;&quot;);&nbsp; <br>
&amp; middot; }&nbsp; <br>
&amp; middot; });&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; <br>
&amp; middot; &lt;/script&gt;<br>
具体使用：<br>
&amp;middot; jQuery(&quot;#grid_id&quot;).jqGrid({&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; colModel: [&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {name:'price', index:'price', width:60, align:&quot;center&quot;, editable: true, formatter:currencyFmatter},&nbsp;
<br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; ]&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot; })<br>
<span style="font-size:32px">Jqgrid学习 -------搜索</span><br>
表&#26684;中所有的列都可以作为搜索条件。 所用到的语言包文件<br>
&amp;middot; $.jgrid = {&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; search : {&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; caption: &quot;Search...&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Find: &quot;Find&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Reset: &quot;Reset&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; odata : ['equal', 'not equal', 'less', 'less or equal','greater','greater or equal', 'begins with','does not begin with','is in','is not in','ends with','does not end with','contains','does not contain'],&nbsp;
<br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groupOps: [ { op: &quot;AND&quot;, text: &quot;all&quot; }, { op: &quot;OR&quot;, text: &quot;any&quot; } ],&nbsp;
<br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; matchText: &quot; match&quot;,&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rulesText: &quot; rules&quot;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; }<br>
colModel 设置<br>
<table class="t_table " cellspacing="0">
<tbody>
<tr>
<td><br>
可选参数</td>
<td><br>
类型</td>
<td><br>
说明</td>
<td><br>
默认&#20540;</td>
</tr>
<tr>
<td><br>
search</td>
<td><br>
boolean</td>
<td><br>
是否是搜索列</td>
<td><br>
true</td>
</tr>
<tr>
<td><br>
stype</td>
<td><br>
string</td>
<td><br>
搜索类型，text类型或者select类型</td>
<td><br>
text</td>
</tr>
<tr>
<td><br>
searchoptions</td>
<td><br>
object</td>
<td><br>
对搜索条件进行一些设置</td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
<br>
<br>
searchoptions 参数<br>
<table class="t_table " cellspacing="0">
<tbody>
<tr>
<td><br>
属性</td>
<td><br>
类型</td>
<td><br>
说明</td>
</tr>
<tr>
<td><br>
dataUrl</td>
<td><br>
string</td>
<td><br>
只有当搜索类型为select才起效</td>
</tr>
<tr>
<td><br>
buildSelect</td>
<td><br>
function</td>
<td><br>
只有当dataUrl设置时此参数才起效，通过一个function来构建下拉框</td>
</tr>
<tr>
<td><br>
dataInit</td>
<td><br>
function</td>
<td><br>
初始化时调用，用法：dataInit: function(elem) {do something}通常用在日期的选择上. Example:dataInit : function (elem) {$(elem).datepicker();}</td>
</tr>
<tr>
<td><br>
dataEvents</td>
<td><br>
array</td>
<td><br>
事件列表，用法：dataEvents: [{ type: 'click', data: { i: 7 }, fn: function(e) { console.log(e.data.i); }},{ type: 'keypress', fn: function(e) { console.log('keypress'); } }]</td>
</tr>
<tr>
<td><br>
attr</td>
<td><br>
object</td>
<td><br>
设置属性&#20540;。attr : { title: &quot;Some title&quot; }</td>
</tr>
<tr>
<td><br>
searchhidden</td>
<td><br>
boolean</td>
<td><br>
默认情况下，隐藏&#20540;不是搜索列。为了使隐藏&#20540;可以作为搜索列则将此设为true</td>
</tr>
<tr>
<td><br>
sopt</td>
<td><br>
array</td>
<td><br>
此参数只用到单列搜索上，说明搜索条件。可用&#20540;： ['eq','ne','lt','le','gt','ge','bw','bn','in','ni','ew','en','cn','nc']意思为['equal','not equal', 'less', 'less or equal','greater','greater or equal', 'begins with','does not begin with','is in','is not in','ends with','does not end with','contains','does
 not contain']</td>
</tr>
<tr>
<td><br>
defaultValue</td>
<td><br>
string</td>
<td><br>
默认&#20540;</td>
</tr>
<tr>
<td><br>
value</td>
<td><br>
mixed</td>
<td><br>
只用在搜索类型为select下。可以是string或者object，如果为string则&#26684;式为value:label，且以&quot;；&quot;结尾；如果为object&#26684;式为editoptions:{value:{1:'One';2:'Two'}}</td>
</tr>
</tbody>
</table>
<br>
&amp; middot; jQuery(&quot;#grid_id&quot;).jqGrid({&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; colModel: [&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...&nbsp;&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {name:'price', index:'price', width:60, search:true, stype:'text', searchoptions:{dataInit:datePick, attr:{title:'Select Date'}} },&nbsp;
<br>
&amp; middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; ]&nbsp; <br>
&amp; middot; ...&nbsp; <br>
&amp; middot; });&nbsp; <br>
&amp; middot; datePick = function(elem)&nbsp; <br>
&amp; middot; {&nbsp; <br>
&amp; middot;&nbsp;&nbsp;&nbsp; jQuery(elem).datepicker();&nbsp; <br>
&amp; middot; }<br>
需要说明的： 所有的搜索都是使用url来到服务器端查询数据。 当执行搜索时会用查询数据填充postData array 发送到服务器端搜索字符串的名称为_search 当点击刷新按钮时不会使用搜索条件 每个搜索方法都有自己的数据清空方法<br>
<span style="font-size:32px">Jqgrid学习 -------搜索工具栏</span><br>
搜索工具栏只是在列标题下面构造一个输入框。且使用表&#26684;的url进行搜索记录，发到服务器端数据&#26684;式为name:value，而且是附加在postData之后。<br>
jQuery(&quot;#grid_id&quot;).filterToolbar(options);&nbsp; <br>
jQuery(&quot;#grid_id&quot;).jqGrid('filterToolbar',options);&nbsp; <br>
options：参数<br>
<table class="t_table " cellspacing="0">
<tbody>
<tr>
<td><br>
可选参数</td>
<td><br>
类型</td>
<td><br>
描述</td>
<td><br>
默认&#20540;</td>
</tr>
<tr>
<td><br>
autosearch</td>
<td><br>
boolean</td>
<td><br>
查询规则，如果是text类型则是当按下回车键才去执行查询；如果是select类型的查询则当&#20540;改变时就去执行查询</td>
<td><br>
true</td>
</tr>
<tr>
<td><br>
beforeSearch</td>
<td><br>
function</td>
<td><br>
执行查询之前触发此事件</td>
<td><br>
null</td>
</tr>
<tr>
<td><br>
afterSearch</td>
<td><br>
function</td>
<td><br>
查询完成后触发事件</td>
<td><br>
null</td>
</tr>
<tr>
<td><br>
beforeClear</td>
<td><br>
function</td>
<td><br>
清空查询条件&#20540;时触发事件</td>
<td><br>
null</td>
</tr>
<tr>
<td><br>
afterClear</td>
<td><br>
function</td>
<td><br>
清空查询条件后触发事件</td>
<td><br>
null</td>
</tr>
</tbody>
</table>
<br>
方法：<br>
<table class="t_table " cellspacing="0">
<tbody>
<tr>
<td><br>
方法</td>
<td><br>
描述</td>
</tr>
<tr>
<td><br>
triggerToolbar</td>
<td><br>
执行查询时调用此方法</td>
</tr>
<tr>
<td><br>
clearToolbar</td>
<td><br>
当清空查询条件&#20540;时触发此函数</td>
</tr>
<tr>
<td><br>
toggleToolbar</td>
<td><br>
Toggeles工具栏</td>
</tr>
</tbody>
</table>
<br>
<span style="font-size:32px">Jqgrid学习 -------自定义搜索</span><br>
&lt;div id=&quot;mysearch&quot;&gt;&lt;/div&gt;<br>
jQuery(&quot;#mysearch&quot;).filterGrid('#grid_id',options);<br>
options：参数<br>
<table class="t_table " cellspacing="0">
<tbody>
<tr>
<td><br>
参数</td>
<td><br>
描述</td>
<td><br>
默认&#20540;</td>
</tr>
<tr>
<td><br>
gridModel</td>
<td><br>
当为ture我们会使用colModel中的属性构造查询条件，所用到的参数：name, index, edittype, editoptions, search.还有一个参数：defval：查询条件的默认&#20540;；surl：当edittype:'select'时获取select数据的url，&#26684; 式：&lt;select&gt;&lt;option value='val1'&gt; Value1 &lt;/option&gt;&lt;option value='val2'&gt; Value2 &lt;/option&gt;&amp;hellip;&lt;option value='valn'&gt;
 ValueN &lt;/option&gt;&lt;/select&gt;</td>
<td><br>
false</td>
</tr>
<tr>
<td><br>
gridNames</td>
<td><br>
gridModel为true时起效，设置查询列的名称</td>
<td><br>
false</td>
</tr>
<tr>
<td><br>
filterModel</td>
<td><br>
gridModel为false时起效，&#26684;式：{label:'LableFild', name: 'colname', stype: 'select', defval: 'default_value', surl: 'someurl', sopt:{optins for the select}}。label：字段显示名称；name：列名；stype：输入框类型，text或者select；surl：获取select数据的地 址，要求的内容为html&#26684;式：&lt;select&gt;&lt;option value='val1'&gt;
 Value1 &lt;/option&gt;&lt;option value='val2'&gt; Value2 &lt;/option&gt;&amp;hellip;&lt;option value='valn'&gt; ValueN &lt;/option&gt;&lt;/select&gt;；sopt：同editoptions
</td>
<td><br>
[]</td>
</tr>
<tr>
<td><br>
formtype</td>
<td><br>
定义表单如何被构造，'horizontal' or 'vertical'</td>
<td>&nbsp;</td>
</tr>
<tr>
<td><br>
autosearch</td>
<td><br>
如果为true:当点击回车键触发查询；当select&#20540;变化时触发查询</td>
<td>&nbsp;</td>
</tr>
<tr>
<td><br>
formclass</td>
<td><br>
可以使用的css</td>
<td><br>
filterform</td>
</tr>
<tr>
<td><br>
tableclass</td>
<td><br>
可以使用到table上的css</td>
<td><br>
filtertable</td>
</tr>
<tr>
<td><br>
buttonclass</td>
<td><br>
按钮上使用的css</td>
<td><br>
filterbutton</td>
</tr>
<tr>
<td><br>
searchButton</td>
<td><br>
搜索按钮</td>
<td><br>
Search</td>
</tr>
<tr>
<td><br>
clearButton</td>
<td><br>
清空数据的按钮</td>
<td><br>
Clear</td>
</tr>
<tr>
<td><br>
enableSearch</td>
<td><br>
启用禁用搜索按钮</td>
<td><br>
false</td>
</tr>
<tr>
<td><br>
enableClear</td>
<td><br>
启用禁用清空按钮</td>
<td><br>
false</td>
</tr>
<tr>
<td><br>
beforeSearch</td>
<td><br>
搜索之前触发的事件</td>
<td><br>
null</td>
</tr>
<tr>
<td><br>
afterSearch</td>
<td><br>
搜索完成之后触发的事件</td>
<td><br>
null</td>
</tr>
<tr>
<td><br>
beforeClear</td>
<td><br>
清空数据之前触发的事件</td>
<td><br>
null</td>
</tr>
<tr>
<td><br>
afterClear</td>
<td><br>
清空数据之后触发事件</td>
<td><br>
null</td>
</tr>
<tr>
<td><br>
url</td>
<td><br>
搜索数据的url</td>
<td><br>
&amp; lsquo;&amp;rsquo;</td>
</tr>
<tr>
<td><br>
marksearched</td>
<td><br>
当为true时，每次查询之后所有查询的列都标记为可查询列</td>
<td><br>
true</td>
</tr>
</tbody>
</table>

            <div>
                作者：zgjsczwj 发表于2012/7/24 14:05:55 <a href="http://blog.csdn.net/zgjsczwj/article/details/7779565">原文链接</a>
            </div>
            <div>
            阅读：1179 评论：0 <a href="http://blog.csdn.net/zgjsczwj/article/details/7779565#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[转]jqgrid的级联组合框]]></title>
        <link>http://blog.csdn.net/zgjsczwj/article/details/7779528</link>
        <guid>http://blog.csdn.net/zgjsczwj/article/details/7779528</guid>
        <author>zgjsczwj</author>
        <pubDate>2012/7/24 13:57:37</pubDate>
        <description><![CDATA[
            
如何实现jqgrid的级联组合框呢?就是类&#20284;:先选中&quot;国家&quot;组合框、&quot;城市&quot;组合框的内容根据&quot;国家&quot;组合框的内容而改变。在网上查了一下、有人提出来过、但无人解决。想了半天终于解决了。<br>
&nbsp;&nbsp; 基本思路:<br>
&nbsp; 1 国家对应的城市肯定要用一个变量保存起来。类如:<br>
&nbsp;&nbsp;&nbsp; var citys={<br>
&nbsp;&nbsp;&nbsp; {'contry':'china',<br>
&nbsp;&nbsp;&nbsp;&nbsp; 'city':'beijing'<br>
&nbsp;&nbsp;&nbsp; },<br>
&nbsp;&nbsp;&nbsp; {'contry':'china',<br>
&nbsp;&nbsp;&nbsp;&nbsp; 'city':'shanghai'<br>
&nbsp;&nbsp;&nbsp; },<br>
&nbsp;&nbsp;&nbsp; {'contry':'china',<br>
&nbsp;&nbsp;&nbsp;&nbsp; 'city':'lanjing'<br>
&nbsp;&nbsp;&nbsp; },<br>
&nbsp;&nbsp;&nbsp; {'contry':'americal',<br>
&nbsp;&nbsp;&nbsp;&nbsp; 'city':'newyouk'<br>
&nbsp;&nbsp;&nbsp; },<br>
&nbsp;&nbsp;&nbsp; {'contry':'americal',<br>
&nbsp;&nbsp;&nbsp;&nbsp; 'city':'warshonton'<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }&nbsp;&nbsp; <br>
&nbsp;&nbsp; 2 jqgrid点击城市单元&#26684;时、肯定要先根据columnModel中的editoptions中的value属性(也就是select的选项)生成select组合框。要在select控件生成之前改变editoptions的value属性、select中的选项&#20540;也就改变了。用调试跟踪的方法、我发现这个功能在jqgrid中的editCell函数中。修改这个函数<br>
原来的函数:<br>
$.jgrid.extend({<br>
&nbsp; editCell : function (iRow,iCol, ed){<br>
&nbsp;&nbsp;&nbsp;&nbsp; return this.each(function (){<br>
var $t = this, nm, tmp,cc, cm;<br>
if (!$t.grid || $t.p.cellEdit !== true|| ) {return;}<br>
改为:<br>
$.jgrid.extend({<br>
&nbsp; editCell : function (iRow,iCol, ed){<br>
&nbsp;&nbsp;&nbsp;&nbsp; return this.each(function (){<br>
var $t = this, nm, tmp,cc, cm,<span style="color:red">flg</span>;<br>
<span style="color:red">if (beforeFocus !='undefind'){<br>
&nbsp;&nbsp; flg=beforeFocus(iRow,iCol);<br>
}</span>if (!$t.grid || $t.p.cellEdit !== true||<span style="color:red"> !flg </span>
) {return;}<br>
说明:<br>
&nbsp; 1 增加了一个flg变量、用来保存自定义函数beforeFocus的返回&#20540;、假如没有选中国家<br>
则editCell函数返回、城市组合框就不能输入了<br>
&nbsp; 2修改colunmModel的任务就交给beforeFocus函数了。<br>
再来看beforeFocus函数<br>
function beforeFocus(iRow,iCol){<br>
&nbsp; if (iCol==2){<br>
&nbsp;&nbsp;&nbsp;&nbsp; var ids=$(&quot;#gridTable&quot;).getDataIDs();<br>
&nbsp;&nbsp;&nbsp;&nbsp; //取得选择行的数据<br>
&nbsp;&nbsp;&nbsp;&nbsp; var rdata=$(&quot;#gridTable&quot;).getRowData (ids[iRow])[0];<br>
&nbsp;&nbsp;&nbsp; //取得选择的国家&#20540;<br>
&nbsp;&nbsp;&nbsp;&nbsp; var v_country=rdata.country <br>
&nbsp;&nbsp;&nbsp;&nbsp; if (v_country==&quot;&quot;){<br>
alert(&quot;请首先输入国家!&quot;) <br>
return false;<br>
&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp; //生成columnModel的editoptions的value的字符串<br>
&nbsp;&nbsp;&nbsp;&nbsp; var selectStr=&quot;&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp; $.each(citys,function(i,rowdt){<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if&nbsp; (rowdt.country==v_country){<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; selectStr&#43;=&quot;;&quot;&#43;rowdt.city;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp; });<br>
&nbsp;&nbsp;&nbsp;&nbsp; //设置columnModel<br>
&nbsp;&nbsp;&nbsp;&nbsp; $(&quot;#gridTable&quot;).setColProp(&quot;city&quot;,{editoptions:{value:selectStr.substr(1)}});<br>
}<br>
&nbsp; return true;<br>
}<br>
测试ok!

            <div>
                作者：zgjsczwj 发表于2012/7/24 13:57:37 <a href="http://blog.csdn.net/zgjsczwj/article/details/7779528">原文链接</a>
            </div>
            <div>
            阅读：1400 评论：0 <a href="http://blog.csdn.net/zgjsczwj/article/details/7779528#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[转]jqGrid选项(Option)]]></title>
        <link>http://blog.csdn.net/zgjsczwj/article/details/7779146</link>
        <guid>http://blog.csdn.net/zgjsczwj/article/details/7779146</guid>
        <author>zgjsczwj</author>
        <pubDate>2012/7/24 11:55:29</pubDate>
        <description><![CDATA[
            
<p>jqGrid提供了大量的选项设置，开发者可以通过设置选项对应&#20540;来控制jqGrid，比如表&#26684;的宽度、高度、数据类型以及列名称等等都是通过选项 设置来完成的。jqGrid的选项一般是名称：&#20540;（name:value）的形式，也可以是对象(object)及数组（array）的形式配置。</p>
<h4>jqGrid选项(Option)</h4>
<p>调用jqGrid只需要执行以下代码:</p>
<pre><code class="js">jQuery(<span class="js__string">&quot;#grid_id&quot;</span>
).jqGrid(options); 
</code>
</pre>
<p>options即jqGrid的选项设置，请参照以下表&#26684;。</p>
<table class="main_table " width="100%">
<tbody>
<tr class="table_title">
<td width="15%">属性</td>
<td width="10%">类型</td>
<td>描述</td>
<td width="10%">默认&#20540;</td>
</tr>
<tr>
<td>ajaxGridOptions</td>
<td>object</td>
<td>此项用于设置当表&#26684;设置获得数据时，ajax的全局属性，注意此项可能覆盖所有当前的ajax设置（包括error, complete和beforeSend 事件）。</td>
<td>empty</td>
</tr>
<tr>
<td>ajaxSelectOptions</td>
<td>object</td>
<td>此项用于设置在editoptions或searchoptions对象中通过dataUrl选择元素时， ajax的全局属性。</td>
<td>empty</td>
</tr>
<tr>
<td>altclass</td>
<td>string</td>
<td>交替行的类。 此项仅当altRows设置为true时有效。</td>
<td>ui-priority-secondary</td>
</tr>
<tr>
<td>altRows</td>
<td>boolean</td>
<td>设置为交替行表&#26684;</td>
<td>false</td>
</tr>
<tr>
<td>autoencode</td>
<td>boolean</td>
<td>当设置为true时，对来自服务器的数据和提交数据进行encodes编码。如&lt; 将被转换为&amp;lt;</td>
<td>false</td>
</tr>
<tr>
<td>autowidth</td>
<td>boolean</td>
<td>当设置为true时，表&#26684;宽度将自动匹配到父元素的宽度。这个匹配只在表&#26684;建立时进行，为了使表&#26684;在父元素宽度变化时也随之变化，可以使用setGridWidth方法</td>
<td>false</td>
</tr>
<tr>
<td>caption</td>
<td>string</td>
<td>表&#26684;的标题。显示在Header上。若为空时将不会显示。</td>
<td>empty</td>
</tr>
<tr>
<td>cellLayout</td>
<td>integer</td>
<td>
<p>该属性确定单元&#26684;的padding &#43; border 宽度。通常不修改该属性，但若表&#26684;的CSS中改变了td元素，该属性需要修改。 缺省&#20540;5表示paddingLef(2) &#43; paddingRight(2) &#43; borderLeft(1)=5</p>
</td>
<td>5</td>
</tr>
<tr>
<td>cellEdit</td>
<td>boolean</td>
<td>是否允许单元&#26684;编辑。</td>
<td>false</td>
</tr>
<tr>
<td>cellsubmit</td>
<td>string</td>
<td>确定单元&#26684;内容保存方式是remote还是clientArray 。</td>
<td>'remote'</td>
</tr>
<tr>
<td>cellurl</td>
<td>string</td>
<td>单元&#26684;保存的url。</td>
<td>null</td>
</tr>
<tr>
<td>colModel</td>
<td>array</td>
<td>描述列参数数组。这是表&#26684;最重要的部分，详见<a href="http://www.helloweba.com/view-blog-162.html#col">colModel API</a>.</td>
<td>null</td>
</tr>
<tr>
<td>colNames</td>
<td>array[]</td>
<td>列名称数组。该名称将在Header中显示。名称以逗号分隔，数量应与colModel 数组数量相等</td>
<td>empty</td>
</tr>
<tr>
<td>data</td>
<td>array</td>
<td>以数组的形式保存本地数据。</td>
<td>empty</td>
</tr>
<tr>
<td>datastr</td>
<td>string</td>
<td>当datatype被设置为xmlstring或jsonstring时，为数据串。</td>
<td>null</td>
</tr>
<tr>
<td>datatype</td>
<td>string</td>
<td>定义表&#26684;希望获得的数据的类型，有效&#20540;有：<br>
Xml —xml数据<br>
xmlstring—xml字符串<br>
json—JSON数据<br>
jsonstring—JSON字符串<br>
local—客户端数据（数组）<br>
javascript—javascript数据<br>
function—函数返回数据</td>
<td>xml</td>
</tr>
<tr>
<td>deselectAfterSort</td>
<td>boolean</td>
<td>只适用于当datatype为local时。当一个排序被应用时取消当前选定行。</td>
<td>true</td>
</tr>
<tr>
<td>direction</td>
<td>string</td>
<td>表&#26684;中的书写方向。“ltr”从左到右(缺省&#20540;)，“rtl”从右到左</td>
<td>ltr</td>
</tr>
<tr>
<td>editurl</td>
<td>string</td>
<td>定义行内编辑地址URL</td>
<td>null</td>
</tr>
<tr>
<td>emptyrecords</td>
<td>string</td>
<td>当返回(或当前)数量为零时显示的信息此项只用当viewrecords 设置为true时才有效。</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>ExpandColClick</td>
<td>boolean</td>
<td>true时，点击展开行的文字，treeGrid展开或收拢</td>
<td>true</td>
</tr>
<tr>
<td>ExpandColumn</td>
<td>string</td>
<td>指定用于张开treeGrid的列（名称来自colModel），未设置即用第一列。此项只有当treeGrid为true时有效.</td>
<td>null</td>
</tr>
<tr>
<td>footerrow</td>
<td>boolean</td>
<td>如果设置为true时，将生成一个表脚行，列数等于colModel</td>
<td>false</td>
</tr>
<tr>
<td>forceFit</td>
<td>boolean</td>
<td>如果设置为true，改变列宽，相邻列也将调整以适应整体表&#26684;，将不会出现水平滚动条。</td>
<td>false</td>
</tr>
<tr>
<td>gridstate</td>
<td>string</td>
<td>表&#26684;的当前状态。有visible或hidden</td>
<td>visible</td>
</tr>
<tr>
<td>gridview</td>
<td>boolean</td>
<td>设置为true将提高5~10倍的显示速度。但不能再使用treeGrid, subGrid, 或afterInsertRow事件</td>
<td>false</td>
</tr>
<tr>
<td>grouping</td>
<td>boolean</td>
<td>是否设置表&#26684;组</td>
<td>false</td>
</tr>
<tr>
<td>height</td>
<td>mixed</td>
<td>表&#26684;高度。可为数&#20540;、百分比或auto</td>
<td>150</td>
</tr>
<tr>
<td>hiddengrid</td>
<td>boolean</td>
<td>如果设置为true，表&#26684;开始被隐藏，数据不被载入，只显示标题。当第一次点击显示/隐藏按钮显示表&#26684;，数据从服务器载入。</td>
<td>false</td>
</tr>
<tr>
<td>hidegrid</td>
<td>boolean</td>
<td>是否允许显示/隐藏按钮可用。只有标题不为空时可用。</td>
<td>true</td>
</tr>
<tr>
<td>hoverrows</td>
<td>boolean</td>
<td>表行是否有鼠标悬停效果</td>
<td>true</td>
</tr>
<tr>
<td>jsonReader</td>
<td>array</td>
<td>JSON数据结构数组</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>lastpage</td>
<td>integer</td>
<td>请求返回的总页数</td>
<td>0</td>
</tr>
<tr>
<td>lastsort</td>
<td>integer</td>
<td>排序的列号（0开始）</td>
<td>0</td>
</tr>
<tr>
<td>loadonce</td>
<td>boolean</td>
<td>设置为true时，表&#26684;只一次读取服务器数据（使用适当datatype），之后，datatype 自动变为local ，所有进一步操作都在客户端完成，pager功能（若存在）将失效。</td>
<td>false</td>
</tr>
<tr>
<td>loadtext</td>
<td>string</td>
<td>数据请求和排序时显示的文本</td>
<td>Loading…</td>
</tr>
<tr>
<td>loadui</td>
<td>string</td>
<td>此项控制ajax进程进行时的动作。Disable—取消jqGrid的进程指示，可使用自定义的指示。 enable (缺省)—表&#26684;中间显示loading。 block – 显示“Loading”信息，禁用页面上的所有功能，直到数据装入完成。</td>
<td>enable</td>
</tr>
<tr>
<td>mtype</td>
<td>string</td>
<td>定义提交类型POST或GET</td>
<td>GET</td>
</tr>
<tr>
<td>multikey</td>
<td>string</td>
<td>此属性只有当multiselect为true时有效，定义多选时的组合键，可选&#20540;有： shiftKey ，altKey，ctrlKey</td>
<td>empty</td>
</tr>
<tr>
<td>multiboxonly</td>
<td>boolean</td>
<td>此属性只有当multiselect为true时有效，. Multiboxonly设置为true时，只有点击checkbox时该行才被选中，点击其他列，将清除当前行的选中。</td>
<td>false</td>
</tr>
<tr>
<td>multiselect</td>
<td>boolean</td>
<td>此属性设为true时启用多行选择，出现复选框</td>
<td>false</td>
</tr>
<tr>
<td>multiselectWidth</td>
<td>integer</td>
<td>若multiselect 为true时，定义多选列的宽度。</td>
<td>20</td>
</tr>
<tr>
<td>page</td>
<td>integer</td>
<td>设置请求初始页的数量，此参数通过URL从服务器接受数据</td>
<td>1</td>
</tr>
<tr>
<td>pager</td>
<td>mixed</td>
<td>定义分页浏览导航条。必须是一个HTML元素，如&lt;div id=&quot;page&quot;&gt;&lt;/div&gt;</td>
<td>empty</td>
</tr>
<tr>
<td>pagerpos</td>
<td>string</td>
<td>定义表&#26684;浏览导航条的位置，缺省情况下建立一个包括3部分的导航条：页码，导航按钮和记录信息。</td>
<td>center</td>
</tr>
<tr>
<td>pgbuttons</td>
<td>boolean</td>
<td>定义导航激活时导航按钮是否显示。</td>
<td>true</td>
</tr>
<tr>
<td>pginput</td>
<td>boolean</td>
<td>定义导航栏是否有页码输入框。</td>
<td>true</td>
</tr>
<tr>
<td>pgtext</td>
<td>string</td>
<td>当前页信息。第一个量为当前页，第二个量为总页数。</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>prmNames</td>
<td>array</td>
<td>缺省情况下prmNames: { page:“page”,rows:“rows”, sort: “sidx”,order: “sord”, search:“_search”, nd:“nd”, npage:null} 以POST方式发送到服务器，字段为： page，rows，sidx，sord，search，nd 例如要将sidx改为mysort，可写成： prmNames: {sort: “mysort”}. 这样提交到服务器的字符串就变为： page=1&amp;rows=10&amp;mysort=myindex&amp;sord=asc
 若将一些参数设为null，这些参数将不再发往服务器。例如prmNames: { nd:null} 则nd参数将不被发送。 Npage参数参见scroll option.</td>
<td>none</td>
</tr>
<tr>
<td>postData</td>
<td>array</td>
<td>此数组能直接传递到url。这个数组可使用这种形式{name1:value1…}。</td>
<td>empty</td>
</tr>
<tr>
<td>reccount</td>
<td>integer</td>
<td>只读属性。定义表&#26684;显示的行数。切勿与records混淆。</td>
<td>0</td>
</tr>
<tr>
<td>recordpos</td>
<td>string</td>
<td>定义页中记录信息的位置，可以是left，center，right。</td>
<td>right</td>
</tr>
<tr>
<td>recordpos</td>
<td>object</td>
<td>交替行的类</td>
<td>true</td>
</tr>
<tr>
<td>records</td>
<td>integer</td>
<td>只读属性。定义从请求中获得的记录数</td>
<td>none</td>
</tr>
<tr>
<td>recordtext</td>
<td>string</td>
<td>可在页面上显示的提示信息，此文字只在viewrecords 为true是有效，并且当记录总数大于0时才显示。<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 此文字中{}中的内容表示：<br>
{0} 该页显示的第一个记录的记录号<br>
{1} 该页显示的最后一个记录的记录号<br>
{2} 获得的记录总数</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>resizeclass</td>
<td>string</td>
<td>列可变大小时的类</td>
<td>empty</td>
</tr>
<tr>
<td>rowList</td>
<td>array[]</td>
<td>用于改变显示行数的下拉列表框的元素数组。</td>
<td>empty</td>
</tr>
<tr>
<td>rownumbers</td>
<td>boolean</td>
<td>若此属性为true，表&#26684;左侧将添加一用于显示行数（从1开始）的列。此时colModel自动扩展出一个名为rn的元素。所以在colModel中不要定义rn。</td>
<td>false</td>
</tr>
<tr>
<td>rowNum</td>
<td>integer</td>
<td>表&#26684;中可见的记录数。此参数通过url传递给服务器供检索数据用。注意：若此参数设置为10，而服务器返回15条记录，将只有10条记录被装入。若此参数被设置为-1，则此检查失效</td>
<td>20</td>
</tr>
<tr>
<td>rownumWidth</td>
<td>integer</td>
<td>当rownumbers为true时，定义显示行数的列的宽度。</td>
<td>25</td>
</tr>
<tr>
<td>savedRow</td>
<td>array</td>
<td>只读属性。用于行编辑和单元&#26684;编辑保存数据之前</td>
<td>empty</td>
</tr>
<tr>
<td>scroll</td>
<td>boolean or integer</td>
<td>创建动态滚动表&#26684;。当设为启用时，pager被禁用，可使用垂直滚动条来装入数据。</td>
<td>false</td>
</tr>
<tr>
<td>scrollOffset</td>
<td>integer</td>
<td>定义垂直滚动条的宽度。</td>
<td>18</td>
</tr>
<tr>
<td>scrollrows</td>
<td>boolean</td>
<td>该项启用时，用setSelection 选定一行，表&#26684;将滚动到被选行可见。</td>
<td>false</td>
</tr>
<tr>
<td>selarrrow</td>
<td>array-[]</td>
<td>只读属性。当multiselect 为true时，包含当前选定的行。此为一维数组，&#20540;为表&#26684;中选定行的ID。</td>
<td>empty</td>
</tr>
<tr>
<td>selrow</td>
<td>string</td>
<td>只读属性。内容是最后选定行的ID。如火应用了排序或pagging，该&#20540;为null。</td>
<td>null</td>
</tr>
<tr>
<td>shrinkToFit</td>
<td>boolean or integer</td>
<td>该项描述计算每列相对于表&#26684;宽度的初始宽度的类型。<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 若为true，并且设置了列宽度，则每列的宽度根据定义宽度缩放。<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 若为false，并且设置了列宽度，表&#26684;宽度为设置宽度，列宽度不会重新计算，使用colModel中定义的&#20540;</td>
<td>true</td>
</tr>
<tr>
<td>sortable</td>
<td>object</td>
<td>启用此项，允许使用鼠标重新排序列。</td>
<td>true</td>
</tr>
<tr>
<td>sortname</td>
<td>string</td>
<td>从服务器读取XML或JSON数据时初始的排序名，此名被加到URL中。</td>
<td>empty</td>
</tr>
<tr>
<td>sortorder</td>
<td>string</td>
<td>从服务器读取XML或JSON数据时初始的排序类型，此类型被加到URL中。可选&#20540;为asc或desc。</td>
<td>asc</td>
</tr>
<tr>
<td>subGrid</td>
<td>boolean</td>
<td>设置为true，可使用子表&#26684;。启用子表&#26684;，将在基本表的左边将添加一列，并包含一个“&#43;”图像，用户可以点击扩展行。</td>
<td>false</td>
</tr>
<tr>
<td>subGridModel</td>
<td>array-[]</td>
<td>该属性用于描述子表&#26684;的模式，只有subGrid 为true时有效。它是一个用于描述子表&#26684;列的数组。</td>
<td>empty</td>
</tr>
<tr>
<td>subGridType</td>
<td>mixed</td>
<td>用于定义子表&#26684;装入的数据类型，若不定义，则使用与父表&#26684;同样的数据类型。</td>
<td>null</td>
</tr>
<tr>
<td>subGridUrl</td>
<td>string</td>
<td>该属性用于定义子表&#26684;获得数据的URL。行的ID将键入此URL中，若要添加其他参数，可使用subGridModel 中的选项。</td>
<td>empty</td>
</tr>
<tr>
<td>subGridWidth</td>
<td>integer</td>
<td>定义子表&#26684;的列宽</td>
<td>20</td>
</tr>
<tr>
<td>toolbar</td>
<td>array</td>
<td>该参数定义表&#26684;的工具栏。参数是一个包含两个&#20540;的数组，第一个&#20540;使工具栏有效，第二个&#20540;相对位置（可以是top、bottom、both）。例如：设置toolbar为 [true,”both”]，将在表&#26684;的头部和底部建立两个工具栏，两个工具栏位两个DIV元素，头部DIV元素的ID为“t_表&#26684;ID”，底部DIV元 素的ID为“tb_表&#26684;ID”。若只有一个工具栏（top或bottom）时，DIV的ID为“t_表&#26684;ID”。</td>
<td>[false,'']</td>
</tr>
<tr>
<td>toppager</td>
<td>boolean</td>
<td>是否在表&#26684;上部显示分页条。</td>
<td>false</td>
</tr>
<tr>
<td>totaltime</td>
<td>integer</td>
<td>只读参数。用于记录装入XML和JSON数据的时间。</td>
<td>0</td>
</tr>
<tr>
<td>treedatatype</td>
<td>mixed</td>
<td>定义初始数据类型</td>
<td>null</td>
</tr>
<tr>
<td>treeGrid</td>
<td>boolean</td>
<td>启用（禁用）TreeGrid。</td>
<td>false</td>
</tr>
<tr>
<td>treeGridModel</td>
<td>string</td>
<td>定义TreeGrid的方法。可以是nested或adjacency。</td>
<td>nested</td>
</tr>
<tr>
<td>treeIcons</td>
<td>array</td>
<td>此数组设置TreeGrid中使用的图标。图标应是UI theme中的有效图标。缺省为 {plus:'ui-icon-triangle-1-e',minus:'ui-icon-triangle-1-s',leaf:'ui-icon-radio-off'}</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>treeReader</td>
<td>array</td>
<td>扩展表&#26684;的colModel。这里定义的字段将添加到colModel的尾部并隐藏。服务器将返回这些字段的&#20540;。</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>tree_root_level</td>
<td>numeric</td>
<td>确定treeGrid相对于根元素的级别。</td>
<td>0</td>
</tr>
<tr>
<td>url</td>
<td>string</td>
<td>请求数据的url地址</td>
<td>null</td>
</tr>
<tr>
<td>userData</td>
<td>array</td>
<td>此数组保存请求的自定义信息，可随时使用</td>
<td>empty</td>
</tr>
<tr>
<td>userDataOnFooter</td>
<td>boolean</td>
<td>到为true时， userData直接放置在页脚。</td>
<td>false</td>
</tr>
<tr>
<td>viewrecords</td>
<td>boolean</td>
<td>是否在浏览导航栏显示记录总数</td>
<td>false</td>
</tr>
<tr>
<td>viewsortcols</td>
<td>array</td>
<td>定义表头中排序图标的外观和行为。缺省为[false,'vertical',true]。<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 第一个参数设定是否显示所有定义了排序的列旁显示图标。缺省的false表示只有当前排序列旁的图标显示。设为true可使所有可排序列都显示图标。<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 第二个参数设定排序图标如何放置。vertical为垂直放置，horizontal为水平放置。<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 第三个参数设定点击功能。True表示表头点击排序，false表示只点击排序图标排序。若将此参数设为false时，请确保第一个参数为true，否则将无法排序。</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>width</td>
<td>number</td>
<td>若为设置，表&#26684;的宽度为colModel 中定义的所有列宽度的总和。若设置了该项，每列的初始宽度按照shrinkToFit 设置的&#20540;</td>
<td>none</td>
</tr>
<tr>
<td>xmlReader</td>
<td>array</td>
<td>描述预期的XML数据结构的数组。</td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
<h4>ColModel API</h4>
<p>colModel属性以数组的形式定义各个表&#26684;列。这是jqGrid中很重要的部分。语法为：</p>
<pre><code class="js">jQuery(<span class="js__string">&quot;#gridid&quot;</span>
).jqGrid(<span class="js__brace">{</span>
 
... 
   colModel: [ <span class="js__brace">{</span>
name:<span class="js__string">'name1'</span>
, index:<span class="js__string">'index1'</span>
...<span class="js__brace">}</span>
, <span class="js__brace">{</span>
...<span class="js__brace">}</span>
, ... ], 
... 
<span class="js__brace">}</span>
); 
</code></pre>
<pre><code class="js"></code>&nbsp;</pre>
<pre><code class="js"></code>&nbsp;</pre>
<pre><code class="js"></code>&nbsp;</pre>
<pre><code class="js"></code><table class="main_table " width="100%"><tbody><tr class="table_title"><td width="15%">属性</td><td width="10%">类型</td><td>描述</td><td width="10%">默认&#20540;</td></tr><tr><td>align</td><td>string</td><td>定义表&#26684;单元&#26684;（非表头）的对齐方式，可取&#20540;：left, center,
 right.</td><td>left</td></tr><tr><td>classes</td><td>string</td><td>此属性用于定义列的类名，当有多个类名时，用空&#26684;间隔，例如：“class1 class2”。在表&#26684;的CSS中，有一个预定义的类ui-ellipsis用于定义特定的行</td><td>empty</td></tr><tr><td>datefmt</td><td>string</td><td>日期&#26684;式，可用/，-和.。作为间隔符。y、Y、yyyy用于4位年，YY、yy用于2位的月，d、dd用于日期</td><td>Y-m-d</td></tr><tr><td>defval</td><td>string</td><td>搜索字段的缺省&#20540;，此参数只用于自定义搜索是的初始&#20540;。</td><td>empty</td></tr><tr><td>editable</td><td>boolean</td><td>定义字段是否可编辑，用于单元&#26684;编辑、行编辑和表单模式</td><td>false</td></tr><tr><td>editoptions</td><td>array</td><td>根据edittype
 参数定义可用的&#20540;数组</td><td>empty</td></tr><tr><td>editrules</td><td>array</td><td>设置可编辑字段的补充规则</td><td>empty</td></tr><tr><td>edittype</td><td>string</td><td>定义行编辑和表单模式的编辑类型，可以是text、textarea、select、checkbox、 password、button、image和file。</td><td>text</td></tr><tr><td>fixed</td><td>boolean</td><td>若设为true，即使shrinkToFit设置为true，列宽也不允许重新计算。GridWidth方法改变表&#26684;宽度时，列宽也不会改变。</td><td>false</td></tr><tr><td>formoptions</td><td>array</td><td>定义表单编辑的各种选项</td><td>empty</td></tr><tr><td>hidedlg</td><td>boolean</td><td>若设置为true，该列将不出现在模式对话框中，用户可以此控制列的显示或隐藏</td><td>false</td></tr><tr><td>hidden</td><td>boolean</td><td>定义初始化时，列是否隐藏。</td><td>false</td></tr><tr><td>index</td><td>string</td><td>通过sidx参数设置排序时的索引名。</td><td>empty</td></tr><tr><td>key</td><td>boolean</td><td>在未从服务器获得ID的情况下，该列可设置为行ID。只有一列可设置该属性，若出现多列，表&#26684;只采用将第一个设置了该属性的列，其他列忽略。</td><td>false</td></tr><tr><td>label</td><td>string</td><td>当colNames数组为空时，定义此列的标题。若colNames数组和此属性都为空，标题为该列的name属性&#20540;。</td><td>none</td></tr><tr><td>name</td><td>string</td><td>设置列在表&#26684;中的唯一名称，此属性是必须的。或者使用保留字subgrid、cb和rn.</td><td>Required</td></tr><tr><td>resizable</td><td>boolean</td><td>定义是否可变列宽</td><td>true</td></tr><tr><td>sortable</td><td>boolean</td><td>定义是否可以排序</td><td>true</td></tr><tr><td>sorttype</td><td>mixed</td><td>当datatype为local时，用于定义排序列类型。可取int/integer（整数）、float/number/currency（小数）、date（日期）、text（文本）</td><td>text</td></tr><tr><td>title</td><td>boolean</td><td>当设置为false时，鼠标滑向单元&#26684;时不显示title属性</td><td>true</td></tr><tr><td>width</td><td>number</td><td>设置列的初始宽度，可用pixels和百分比</td><td>150</td></tr></tbody></table> 
</pre>

            <div>
                作者：zgjsczwj 发表于2012/7/24 11:55:29 <a href="http://blog.csdn.net/zgjsczwj/article/details/7779146">原文链接</a>
            </div>
            <div>
            阅读：1764 评论：0 <a href="http://blog.csdn.net/zgjsczwj/article/details/7779146#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[转]jqGrid]]></title>
        <link>http://blog.csdn.net/zgjsczwj/article/details/7779052</link>
        <guid>http://blog.csdn.net/zgjsczwj/article/details/7779052</guid>
        <author>zgjsczwj</author>
        <pubDate>2012/7/24 11:33:55</pubDate>
        <description><![CDATA[
            
<p>1. 初始化的时候不加载数据设置<span style="color:#ff00">datatype: 'local'</span></p>
<div class="code">
<div class="cnblogs_code">
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码" href=""><img alt="复制代码" src="http://common.cnblogs.com/images/copycode.gif"></a></span></div>
<pre><span style="color:#08080">1</span> $(&quot;#grid&quot;<span style="color:#000000">).jqGrid({
</span><span style="color:#08080">2</span> url:&quot;http://www.8qiu.cn&quot;<span style="color:#000000">,
</span><span style="color:#08080">3</span> datatype:&quot;local&quot;<span style="color:#000000">,
</span><span style="color:#08080">4</span> <span style="color:#0800">//</span><span style="color:#0800">other options</span>
<span style="color:#08080">5</span> });</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码" href=""><img alt="复制代码" src="http://common.cnblogs.com/images/copycode.gif"></a></span></div>
</div>
<p>2. 当要加载数据的时候把datatype改成json或者XML:</p>
</div>
<div class="code">
<div class="cnblogs_code">
<pre><span style="color:#08080">1</span> $(&quot;#list&quot;).jqGrid('setGridParam',{datatype:'json'}).trigger('reloadGrid');</pre>
</div>
<p>3.如果不要jqgrid表头上的点击排序可以把对应的colModel中加属性<span style="color:#ff00">sortable : false.</span></p>
</div>
<div class="code"></div>
<div class="code">4.如果要给pager上的按钮加id(这样可以动态的hide,show此按钮)具体的方法就是</div>
<div class="code">
<div class="cnblogs_code">
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码" href=""><img alt="复制代码" src="http://common.cnblogs.com/images/copycode.gif"></a></span></div>
<pre>jQuery(&quot;#list&quot;).jqGrid('navButtonAdd', '#pager'<span style="color:#000000">, 
{
caption : </span>&quot;导出&quot;<span style="color:#000000">,
title : </span>&quot;Excel&quot;<span style="color:#000000">,
position : </span>&quot;first&quot;<span style="color:#000000">,
id :</span>'storeExp'<span style="color:#000000">,
buttonicon :</span>'ui-icon-calculator'<span style="color:#000000">,

onClickButton : </span><span style="color:#00ff">function</span><span style="color:#000000"> ()
{

}

});</span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码" href=""><img alt="复制代码" src="http://common.cnblogs.com/images/copycode.gif"></a></span></div>
</div>
<p>5.如果要想显示jqgrid中的caption可以在css样式中加入如下(你可以发现.ui-jqgrid .ui-jqgrid-titlebar 的div块display是none,所以没显示)</p>
<div class="cnblogs_code">
<pre><span style="color:#08080">1</span> <span style="color:#8000">.ui-jqgrid .ui-jqgrid-titlebar
</span><span style="color:#08080">2</span> {
<span style="color:#08080">3</span> <span style="color:#ff00">display</span>:<span style="color:#00ff">block</span>;
<span style="color:#08080">4</span> }</pre>
</div>
<p></p>
<p><span style="color:#000000">6.如果要使用jqgrid中caption中文字居中显示</span></p>
<div class="cnblogs_code">
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码" href=""><img alt="复制代码" src="http://common.cnblogs.com/images/copycode.gif"></a></span></div>
<pre><span style="color:#08080">1</span> gridComplete: <span style="color:#00ff">function</span><span style="color:#000000">(){
</span><span style="color:#08080">2</span>              $('#list').closest(&quot;div.ui-jqgrid-view&quot;<span style="color:#000000">)
</span><span style="color:#08080">3</span>                 .children(&quot;div.ui-jqgrid-titlebar&quot;<span style="color:#000000">)
</span><span style="color:#08080">4</span>                 .css(&quot;text-align&quot;, &quot;center&quot;<span style="color:#000000">)
</span><span style="color:#08080">5</span>                 .children(&quot;span.ui-jqgrid-title&quot;<span style="color:#000000">)
</span><span style="color:#08080">6</span>                 .css(&quot;float&quot;, &quot;none&quot;<span style="color:#000000">);
</span><span style="color:#08080">7</span>         }</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码" href=""><img alt="复制代码" src="http://common.cnblogs.com/images/copycode.gif"></a></span></div>
</div>
<p>7.当浏览器的大小改变时,jqgrid的宽度作为相应的改变</p>
<div class="cnblogs_code">
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码" href=""><img alt="复制代码" src="http://common.cnblogs.com/images/copycode.gif"></a></span></div>
<pre><span style="color:#08080">1</span> gridComplete: <span style="color:#00ff">function</span><span style="color:#000000">(){
</span><span style="color:#08080">2</span>             $(window).resize(<span style="color:#00ff">function</span><span style="color:#000000">(){ 
</span><span style="color:#08080">3</span>                 <span style="color:#00ff">var</span> winwidth=$(window).width()*0.5; <span style="color:#0800">//</span><span style="color:#0800">这里的0.5可以自己定</span>
<span style="color:#08080">4</span>             $(&quot;#list&quot;<span style="color:#000000">).setGridWidth(winwidth);
</span><span style="color:#08080">5</span> <span style="color:#000000">            });
</span><span style="color:#08080">6</span>             
<span style="color:#08080">7</span>         }</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码" href=""><img alt="复制代码" src="http://common.cnblogs.com/images/copycode.gif"></a></span></div>
</div>
<p>8.在jqgrid后给每一行加超链接如下图所示</p>
<p><img title="jgrid每行加入链接" alt="jgrid每行加入链接" src="http://pic002.cnblogs.com/images/2012/318356/2012071023234954.png" width="800" height="113"></p>
<p>代码描述如下:</p>
<div class="cnblogs_code">
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码" href=""><img alt="复制代码" src="http://common.cnblogs.com/images/copycode.gif"></a></span></div>
<pre><span style="color:#08080"> 1</span> jqGridAdapter(&quot;#an&quot;<span style="color:#000000">);
</span><span style="color:#08080"> 2</span>     jQuery(&quot;#an&quot;<span style="color:#000000">).jqGrid({
</span><span style="color:#08080"> 3</span>         url : '../ListServlet?className=announcement'<span style="color:#000000">,
</span><span style="color:#08080"> 4</span>         datatype : &quot;json&quot;<span style="color:#000000">,
</span><span style="color:#08080"> 5</span>         colNames : ['ID', '公告标题', '更新时间', '覆盖区域','操作'<span style="color:#000000">],
</span><span style="color:#08080"> 6</span> <span style="color:#000000">        colModel : [{
</span><span style="color:#08080"> 7</span>                     name : 'ID'<span style="color:#000000">,
</span><span style="color:#08080"> 8</span>                     index : 'ID'<span style="color:#000000">,
</span><span style="color:#08080"> 9</span>                     hidden : <span style="color:#00ff">true</span><span style="color:#000000">,
</span><span style="color:#08080">10</span>                     width : '55px'
<span style="color:#08080">11</span> <span style="color:#000000">                }, {
</span><span style="color:#08080">12</span>                     name : 'ANNOUNCEMENT_TITLE'<span style="color:#000000">,
</span><span style="color:#08080">13</span>                     index : 'ANNOUNCEMENT_TITLE'<span style="color:#000000">,
</span><span style="color:#08080">14</span>                     width : '100px'<span style="color:#000000">,
</span><span style="color:#08080">15</span>                     align : 'left'<span style="color:#000000">,
</span><span style="color:#08080">16</span>                     sortable:<span style="color:#00ff">false</span>
<span style="color:#08080">17</span> <span style="color:#000000">                }, {
</span><span style="color:#08080">18</span>                     name : 'UPDATE_DATE'<span style="color:#000000">,
</span><span style="color:#08080">19</span>                     index : 'UPDATE_DATE'<span style="color:#000000">,
</span><span style="color:#08080">20</span>                     width : '100px'<span style="color:#000000">,
</span><span style="color:#08080">21</span>                     align: 'left'<span style="color:#000000">,
</span><span style="color:#08080">22</span>                     <span style="color:#ff00">formatter:'date',
</span><span style="color:#08080">23</span>                     <span style="color:#ff00">formatoptions:{srcformat:'Y-m-d H:i',newformat:'Y-m-d'},
</span><span style="color:#08080">24</span>                     sortable:<span style="color:#00ff">false</span>
<span style="color:#08080">25</span> <span style="color:#000000">                }, {
</span><span style="color:#08080">26</span>                     name : 'ANNOUNCEMENT_REGION'<span style="color:#000000">,
</span><span style="color:#08080">27</span>                     index : 'ANNOUNCEMENT_REGION'<span style="color:#000000">,
</span><span style="color:#08080">28</span>                     width : '100px'<span style="color:#000000">,
</span><span style="color:#08080">29</span>                     align: 'center'<span style="color:#000000">,
</span><span style="color:#08080">30</span>                     sortable:<span style="color:#00ff">false</span>
<span style="color:#08080">31</span> <span style="color:#000000">                }, {
</span><span style="color:#08080">32</span>                     name : 'LOOK'<span style="color:#000000">,
</span><span style="color:#08080">33</span>                     index : 'LOOK'<span style="color:#000000">,
</span><span style="color:#08080">34</span>                     width : '50px'<span style="color:#000000">,
</span><span style="color:#08080">35</span>                     align: 'center'<span style="color:#000000">,
</span><span style="color:#08080">36</span>                     sortable:<span style="color:#00ff">false</span>
<span style="color:#08080">37</span> <span style="color:#000000">                }
</span><span style="color:#08080">38</span> <span style="color:#000000">                ],
</span><span style="color:#08080">39</span>                 rowNum :15<span style="color:#000000">,
</span><span style="color:#08080">40</span>                 rowList : [15, 25, 30,50,100<span style="color:#000000">],
</span><span style="color:#08080">41</span>                 pager : '#an_pager'<span style="color:#000000">,
</span><span style="color:#08080">42</span>                 viewrecords : <span style="color:#00ff">true</span><span style="color:#000000">,
</span><span style="color:#08080">43</span>                 sortname : 'update_date'<span style="color:#000000">,
</span><span style="color:#08080">44</span>                 autowidth:<span style="color:#00ff">true</span><span style="color:#000000">,
</span><span style="color:#08080">45</span>                 sortorder : &quot;desc&quot;<span style="color:#000000">,
</span><span style="color:#08080">46</span>                 caption : &quot;ca&quot;<span style="color:#000000">,
</span><span style="color:#08080">47</span>                 multiselect : <span style="color:#00ff">false</span><span style="color:#000000">,
</span><span style="color:#08080">48</span>                 rownumbers : <span style="color:#00ff">true</span><span style="color:#000000">,
</span><span style="color:#08080">49</span> <span style="color:#000000">        jsonReader : {
</span><span style="color:#08080">50</span>             id : 'ID'<span style="color:#000000">,
</span><span style="color:#08080">51</span>             repeatitems : <span style="color:#00ff">false</span>
<span style="color:#08080">52</span> <span style="color:#000000">        },
</span><span style="color:#08080">53</span>         gridComplete:<span style="color:#00ff">function</span><span style="color:#000000">()
</span><span style="color:#08080">54</span> <span style="color:#000000">        {
</span><span style="color:#08080">55</span> 　　　　　　<span style="color:#ff00">　var ids=jQuery(&quot;#an&quot;).jqGrid('getDataIDs');
56            for(var i=0; i&lt;ids.length; i&#43;&#43;){
57                 var id=ids[i];   
58                focusNum = &quot;&lt;a href='#' style='color:#f60' alt='点击查看详细' onclick='showannouncement(&quot; &#43; id &#43; &quot;)'&gt;查看&lt;/a&gt;&quot;;
59                 jQuery(&quot;#an&quot;).jqGrid('setRowData', ids[i], { LOOK: focusNum});
61             }
</span><span style="color:#08080">62　　　　</span> <span style="color:#000000">},
</span><span style="color:#08080">63</span>         height : 'auto'
<span style="color:#08080">64</span>     });</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码" href=""><img alt="复制代码" src="http://common.cnblogs.com/images/copycode.gif"></a></span></div>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"></span>&nbsp;</div>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"></span>&nbsp;</div>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"></span>&nbsp;</div>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"></span>&nbsp;</div>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"></span>
<p><strong>9.单元&#26684;内的文本自动换行</strong> ：</p>
<p style="padding-left:30px">加入样式：</p>
<p style="padding-left:30px"></p>
<p style="padding-left:30px">.ui-jqgrid tr.jqgrow td {<br>
white-space: normal !important;<br>
height:auto;<br>
vertical-align:text-top;<br>
padding-top:2px;<br>
}</p>
<table>
<tbody>
<tr>
<td class="content"><code class="jscript plain">colModel : [{ name : </code><code class="jscript string">'CommentID'</code><code class="jscript plain">,index :</code><code class="jscript string">'CommentID'</code><code class="jscript plain">,sorttype :</code><code class="jscript string">&quot;int&quot;</code><code class="jscript plain">,</code></td>
</tr>
</tbody>
</table>
<div class="line alt2">
<table>
<tbody>
<tr>
<td class="number"><code>2</code></td>
<td class="content"><code class="spaces"></code><code class="jscript plain">formatter: cLink,width : 60}],</code></td>
</tr>
</tbody>
</table>
</div>
<div class="line alt1">
<table>
<tbody>
<tr>
<td class="number"><code>3</code></td>
<td class="content"><code class="jscript comments">//其中的cLink就是自定义函数名</code></td>
</tr>
</tbody>
</table>
</div>
<div class="line alt2">
<table>
<tbody>
<tr>
<td class="number"><code>4</code></td>
<td class="content"><code class="jscript keyword">function</code> <code class="jscript plain">
cLink(cellvalue, options, rowObject){</code></td>
</tr>
</tbody>
</table>
</div>
<div class="line alt1">
<table>
<tbody>
<tr>
<td class="number"><code>5</code></td>
<td class="content"><code class="jscript keyword">return</code> <code class="jscript string">
'&lt;a href='</code><code class="jscript plain">&#43;rowObject.CommentID&#43;</code><code class="jscript string">'&gt;编辑&lt;/a&gt;'</code><code class="jscript plain">;</code></td>
</tr>
</tbody>
</table>
</div>
<div class="line alt2">
<table>
<tbody>
<tr>
<td class="number"><code>6</code></td>
<td class="content"><code class="jscript plain">}</code></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"></span>&nbsp;</div>
<div class="cnblogs_code_toolbar">&nbsp;</div>
<div class="cnblogs_code_toolbar">10.获取列宽改变后的列宽&#20540;，用于保存移动后的列宽</div>
<div class="cnblogs_code_toolbar">var test = $('#list2').jqGrid('getColProp', 'Name');<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert(test.width);</div>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"></span>&nbsp;</div>
</div>
<p>9.jqgrid关于日期&#26684;式化在colModel中添加</p>
<div class="cnblogs_code">
<pre><span style="color:#08080">1</span> formatter:'date'<span style="color:#000000">,
</span><span style="color:#08080">2</span> formatoptions:{srcformat:'Y-m-d H:i',newformat:'Y-m-d'}</pre>
</div>
</div>

            <div>
                作者：zgjsczwj 发表于2012/7/24 11:33:55 <a href="http://blog.csdn.net/zgjsczwj/article/details/7779052">原文链接</a>
            </div>
            <div>
            阅读：5442 评论：0 <a href="http://blog.csdn.net/zgjsczwj/article/details/7779052#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[转]jqGrid中的事件]]></title>
        <link>http://blog.csdn.net/zgjsczwj/article/details/7779013</link>
        <guid>http://blog.csdn.net/zgjsczwj/article/details/7779013</guid>
        <author>zgjsczwj</author>
        <pubDate>2012/7/24 11:27:35</pubDate>
        <description><![CDATA[
            
<p>jqGrid中的事件：<br>
<br>
语法：</p>
<p>var lastSel;<br>
jQuery(&quot;#gridid&quot;).jqGrid({<br>
...<br>
&nbsp;&nbsp; onSelectRow: function(id){ <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(id &amp;&amp; id!==lastSel){ <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jQuery('#gridid').restoreRow(lastSel); <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lastSel=id; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jQuery('#gridid').editRow(id, true); <br>
&nbsp;&nbsp; },<br>
...<br>
});<br>
</p>
<p>&nbsp;</p>
<table class="bbcode  ">
<tbody>
<tr>
<td>备注</td>
</tr>
<tr>
<td>afterInsertRow</td>
<td>rowidrowdatarowelem</td>
<td>当插入每行时触发。rowid插入当前行的id；rowdata插入行的数据，&#26684;式为name: value，name为colModel中的名字</td>
</tr>
<tr>
<td>beforeRequest</td>
<td>none</td>
<td>向服务器端发起请求之前触发此事件但如果datatype是一个function时例外</td>
</tr>
<tr>
<td>beforeSelectRow</td>
<td>rowid, e</td>
<td>当用户点击当前行在未选择此行时触发。rowid：此行id；e：事件对象。返回&#20540;为ture或者false。如果返回true则选择完成，如果返回false则不会选择此行也不会触发其他事件</td>
</tr>
<tr>
<td>gridComplete</td>
<td>none</td>
<td>当表&#26684;所有数据都加载完成而且其他的处理也都完成时触发此事件，排序，翻页同样也会触发此事件</td>
</tr>
<tr>
<td>loadComplete</td>
<td>xhr</td>
<td>当从服务器返回响应时执行，xhr：XMLHttpRequest 对象</td>
</tr>
<tr>
<td>loadError</td>
<td>xhr,status,error</td>
<td>如果请求服务器失败则调用此方法。xhr：XMLHttpRequest 对象；satus：错误类型，字符串类型；error：exception对象</td>
</tr>
<tr>
<td>onCellSelect</td>
<td>rowid,iCol,cellcontent,e</td>
<td>当点击单元&#26684;时触发。rowid：当前行id；iCol：当前单元&#26684;索引；cellContent：当前单元&#26684;内容；e：event对象</td>
</tr>
<tr>
<td>ondblClickRow</td>
<td>rowid,iRow,iCol,e</td>
<td>双击行时触发。rowid：当前行id；iRow：当前行索引位置；iCol：当前单元&#26684;位置索引；e:event对象</td>
</tr>
<tr>
<td>onHeaderClick</td>
<td>gridstate</td>
<td>当点击显示/隐藏表&#26684;的那个按钮时触发；gridstate：表&#26684;状态，可选&#20540;：visible or hidden</td>
</tr>
<tr>
<td>onPaging</td>
<td>pgButton</td>
<td>点击翻页按钮填充数据之前触发此事件，同样当输入页码跳转页面时也会触发此事件</td>
</tr>
<tr>
<td>onRightClickRow</td>
<td>rowid,iRow,iCol,e</td>
<td>在行上右击鼠标时触发此事件。rowid：当前行id；iRow：当前行位置索引；iCol：当前单元&#26684;位置索引；e：event对象。此事件不支持opera游览器</td>
</tr>
<tr>
<td>onSelectAll</td>
<td>aRowids,status</td>
<td>multiselect为ture，且点击头部的checkbox时才会触发此事件。aRowids：所有选中行的id集合，为一个数组。status：boolean变量说明checkbox的选择状态，true选中false不选中。无论checkbox是否选择，aRowids始终有&#20540;</td>
</tr>
<tr>
<td>onSelectRow</td>
<td>rowid,status</td>
<td>当选择行时触发此事件。rowid：当前行id；status：选择状态，当multiselect 为true时此参数才可用</td>
</tr>
<tr>
<td>onSortCol</td>
<td>index,iCol,sortorder</td>
<td>当点击排序列但是数据还未进行变化时触发此事件。index：name在colModel中位置索引；iCol：当前单元&#26684;位置索引；sortorder：排序状态：desc或者asc</td>
</tr>
<tr>
<td>resizeStart</td>
<td>event, index</td>
<td>当开始改变一个列宽度时触发此事件。event：event对象；index：当前列在colModel中位置索引</td>
</tr>
<tr>
<td>resizeStop</td>
<td>newwidth, index</td>
<td>当列宽度改变之后触发此事件。newwidth：列改变后的宽度；index：当前列在colModel中的位置索引</td>
</tr>
<tr>
<td>serializeGridData</td>
<td>postData</td>
<td>向服务器发起请求时会把数据进行序列化，用户自定义数据也可以被提交到服务器端</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>

            <div>
                作者：zgjsczwj 发表于2012/7/24 11:27:35 <a href="http://blog.csdn.net/zgjsczwj/article/details/7779013">原文链接</a>
            </div>
            <div>
            阅读：4698 评论：1 <a href="http://blog.csdn.net/zgjsczwj/article/details/7779013#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[转]jqGrid的编辑——基础知识]]></title>
        <link>http://blog.csdn.net/zgjsczwj/article/details/7779004</link>
        <guid>http://blog.csdn.net/zgjsczwj/article/details/7779004</guid>
        <author>zgjsczwj</author>
        <pubDate>2012/7/24 11:25:29</pubDate>
        <description><![CDATA[
            
<p>使用jqGrid修改数据</p>
<p>jqGrid可以有三种方式，让我们来修改显示在jqGrid中的数据。这三种方式分别是：<br>
Cell Editing——只允许修改某一个单元&#26684;内容.（所有图片均来自jqGrid的wiki或者jqGrid的Demo截图）</p>
<p><br>
Inline Editing——允许在jqGrid中直接修改某一行的数据</p>
<p><br>
Form Editing——弹出一个新的编辑窗口进行编辑和新增</p>
<p><br>
暂时先不管这三种方式，我们来看看如何让一个jqGrid的数据能够进行编辑呢？<br>
其实很简单，就是在jqGrid的colModel属性中，设置几个属性：<br>
<strong><span style="color:#ff00">editable</span></strong><br>
可选&#20540;是true或者false，默认是false。用来说明这个列的数据是否可编辑。特别要注意的是，jqGrid的隐藏字段就算设置了这个属性为true，一样不能被编辑。在Cell Editing以及Inline Editing模式下，只能通过把这些字段设置为可见来修改。在Form Editing模式下，可以通过editoptions参数来设置是否可以修改隐藏列。<br>
<span style="color:#ff00"><strong>edittype</strong></span><br>
可选的&#20540;是'text', 'textarea', 'select', 'checkbox', 'password', 'button', 'image', 'file'以及'custom'。默认&#20540;是text。<br>
&nbsp;&nbsp;&nbsp; 根据名字就可以看出来，这个属性是设置编辑框的HTML样式的。比如，设置为text&#20540;，并且可以在editoptions中设置size以及maxlength等属性。这样生成的HTML样式有点类&#20284;&lt;input type=&quot;text&quot; size=&quot;10&quot; maxlength=&quot;15&quot;/&gt;这样。<br>
&nbsp;&nbsp;&nbsp; 其中有几个要注意：<br>
&nbsp;&nbsp;&nbsp; 设置checkbox的时候，需要在editoptions中指定value&#20540;，第一个&#20540;应该是checked的时候的&#20540;。比如editoptions:{value:&quot;Yes:No&quot;}会设定这个checkbox编辑框，选中的时候，&#20540;是Yes，没选中的时候&#20540;是No。建议最好都设定一下这个&#20540;。<br>
&nbsp;&nbsp;&nbsp; 设置select的时候，editoptions中需要设定select下拉框的&#20540;。<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 一种方式是用字符串设置editoptions的value属性，像这样editoption: { value: “FE:FedEx; IN:InTime; TN:TNT” }，这就为下拉框设置了三个可选&#20540;。注意，冒号前面的代表的是&#20540;，冒号后面代表的是显示&#20540;。<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 第二种方式是用对象来设置editoptions的value属性，这个时候，value&#20540;要用{}包括起来，像这样： editoptions:{value:{1:'One',2:'Two'}}。<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 第三种方式，是为editoptions设置dataUrl参数。意思就是select的&#20540;，是通过一个URL来获取的，比如一个Ajax请求的返回&#20540;。特别需要注意的是，在这种情况下，URL的返回&#20540;必须是包括select以及option这些HTML标签的。就像这样：&lt;select&gt;&lt;option value=&quot;1&quot;&gt;One&lt;/option&gt;&lt;option value=&quot;2&quot;&gt;Two&lt;/option&gt;&lt;/select&gt;.这种情况下，还可以在editoptions中设置是否允许多选，size等等。<br>
&nbsp;&nbsp;&nbsp; 设置image的时候，editoptions的src属性用来指定图片的地址。<br>
custom类型就是通过一个函数来指定需要编辑的元素，并返回需要提交的&#20540;。<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 函数的定义在editoptions中说明，分别是custom_element用来指定哪一个函数用来创建编辑框，注意这里函数必须返回一个新的DOM元素，函数的参数一个是&#20540;Value，另外一个是colModel的editoptions&#20540;。<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 另外一个是custom_value，这个函数用来在编辑完成之后返回本编辑框的&#20540;，这个函数的参数是元素对象。大概的调用&#26684;式如下：<br>
&lt;script&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //创建一个input输入框<br>
function myelem (value, options) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var el = document.createElement(&quot;input&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; el.type=&quot;text&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; el.value = value;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return el;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //获取&#20540;<br>
function myvalue(elem) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return $(elem).val();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jQuery(&quot;#grid_id&quot;).jqGrid({<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; colModel: [ <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ... <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {name:'price', ..., editable:true, edittype:'custom', editoptions:{custom_element: myelem, custom_value:myvalue} },<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/script&gt;</p>
<p><span style="color:#ff00"><strong>editoptions</strong></span><br>
除了上面介绍的editoptions选项外，我们还可以设置defaultValue等等，更复杂的东西，比如dataEvents就不介绍了。<br>
<span style="color:#ff00"><strong>editrules</strong></span><br>
&nbsp;&nbsp;&nbsp; editrules是用来设置一些可用于可编辑列的colModel的额外属性的。大多数的时候是用来在提交到服务器之前验证用户的输入合法性的。比如editrules:{edithidden:true, required:true....}。<br>
&nbsp;&nbsp;&nbsp; 可选的属性包括：<br>
edithidden：只在Form Editing模式下有效，设置为true，就可以让隐藏字段也可以修改。<br>
required：设置编辑的时候是否可以为空（是否是必须的）。<br>
number：设置为true，如果输入&#20540;不是数字或者为空，则会报错。<br>
integer：<br>
minValue：<br>
maxValue：<br>
email：<br>
url：检查是不是合法的URL地址。<br>
date：<br>
time：<br>
custom：设置为true，则会通过一个自定义的js函数来验证。函数定义在custom_func中。<br>
custom_func:传递给函数的&#20540;一个是需要验证value，另一个是定义在colModel中的name属性&#20540;。函数必须返回一个数组，一个是验证的结果，true或者false，另外一个是验证错误时候的提示字符串。形如[false,”Please enter valid value”]这样。<br>
&nbsp;&nbsp;&nbsp; 自定义验证的例子：<br>
<span style="color:#ff00"><span style="color:#000000">&lt;script&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; function mypricecheck(value, colname) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (value &lt; 0 &amp;&amp; value &gt;20) <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return [false,&quot;Please enter value between 0 and 20&quot;];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return [true,&quot;&quot;];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></span></p>
<p><span style="color:#ff00"><span style="color:#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jQuery(&quot;#grid_id&quot;).jqGrid({<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; colModel: [ <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ... <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {name:'price', ..., editrules:{custom:true, custom_func:mypricecheck....}, editable:true },<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });<br>
&nbsp;&nbsp;&nbsp; &lt;/script&gt;&nbsp;&nbsp;&nbsp; &lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; function mypricecheck(value, colname) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (value &lt; 0 &amp;&amp; value &gt;20)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return [false,&quot;Please enter value between 0 and 20&quot;];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return [true,&quot;&quot;];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jQuery(&quot;#grid_id&quot;).jqGrid({&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 ...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; colModel: [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {name:'price', ..., editrules:{custom:true, custom_func:mypricecheck....}, editable:true },&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // &gt;</span></span></p>
<p><span style="color:#ff00"><strong>formoptions</strong></span>（只在Form Editing方式下有效），他的主要作用是用来重新排序Form中的编辑元素，同时可以在编辑元素前或者编辑元素后增加一些信息（比如，一些提示信息，或者一个红色的*表示必须要填写等等）。<br>
&nbsp;&nbsp;&nbsp; 可选的属性如下：<br>
elmprefix：字符串&#20540;，如果设置了，则会在编辑框之后出现一些内容(可能是HTML的内容)<br>
elmsuffix：字符串&#20540;，如果设置了，则会在编辑框之前出现一些内容(可能是HTML的内容)<br>
label：字符串&#20540;，如果设置了，则这个&#20540;会替换掉colNames中的&#20540;出现作为该编辑框的标签显示<br>
rowpos：数字&#20540;，决定元素行在Form中的位置（相对于文本标签again with the text-label）<br>
colpos：数字&#20540;，决定元素列在Form中的位置（相对于标签again with the label）<br>
&nbsp;&nbsp;&nbsp; 两个编辑框可以有相同的rowpos&#20540;，但是colpos&#20540;不同，这会把这两个编辑框放到Form的同一行中。<br>
&nbsp;&nbsp;&nbsp; 特别注意：如果设置了rowpos以及colpos的&#20540;，强烈推荐为所有的其他编辑元素都设置这些&#20540;。</p>
<p></p>
<p>----本文只是doc文档的解释，没有太多自己的东西。</p>
<p>来自开源中国</p>

            <div>
                作者：zgjsczwj 发表于2012/7/24 11:25:29 <a href="http://blog.csdn.net/zgjsczwj/article/details/7779004">原文链接</a>
            </div>
            <div>
            阅读：843 评论：0 <a href="http://blog.csdn.net/zgjsczwj/article/details/7779004#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[转]jqGrid基本]]></title>
        <link>http://blog.csdn.net/zgjsczwj/article/details/7778958</link>
        <guid>http://blog.csdn.net/zgjsczwj/article/details/7778958</guid>
        <author>zgjsczwj</author>
        <pubDate>2012/7/24 11:16:58</pubDate>
        <description><![CDATA[
            
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; font-size:10px"><span style="line-height:19px; white-space:pre">//指定请求数据时的ContentType，我使用了json</span></span></p>
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; font-size:10px"><span style="line-height:19px; white-space:pre"></span></span><span style="font-family:Verdana,Arial,Helvetica,sans-serif; line-height:19px; font-size:13px; white-space:pre">ajaxGridOptions:
 { contentType: &quot;&quot;application/json; charset=utf-8&quot;&quot; },</span></p>
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; line-height:19px; font-size:13px; white-space:pre">//返回数据&#26684;式为json</span></p>
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; line-height:19px; font-size:13px; white-space:pre">datatype: &quot;&quot;json&quot;&quot;,</span></p>
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; font-size:10px"><span style="line-height:19px; white-space:pre">//Http方法为GET</span></span></p>
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; line-height:19px; font-size:13px; white-space:pre">mtype: &quot;&quot;GET&quot;&quot;,</span></p>
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; line-height:19px; font-size:13px; white-space:pre">//隐藏Grid的头</span></p>
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; line-height:19px; font-size:13px; white-space:pre">hidegrid: false,</span></p>
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; line-height:19px; font-size:13px; white-space:pre">//是否显示行号</span></p>
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; line-height:19px; font-size:13px; white-space:pre">rownumbers: true,</span></p>
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; line-height:19px; font-size:13px; white-space:pre">//默认显示数据行的个数</span></p>
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; line-height:19px; font-size:13px; white-space:pre">rowNum: 10,</span></p>
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; line-height:19px; font-size:13px; white-space:pre">//允许显示数据行个数的选项</span></p>
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; line-height:19px; font-size:13px; white-space:pre">rowList: [10, 15, 20],</span></p>
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; line-height:19px; font-size:13px; white-space:pre">//默认排序策略(升序)</span></p>
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; line-height:19px; font-size:13px; white-space:pre">sortorder: &quot;&quot;asc&quot;&quot;,</span></p>
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; line-height:19px; font-size:13px; white-space:pre">//是否显示表脚，即翻页所在的那行</span></p>
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; line-height:19px; font-size:13px; white-space:pre">viewrecords: true,</span></p>
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; line-height:19px; font-size:13px; white-space:pre">//页脚的容器</span></p>
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; line-height:19px; font-size:13px; white-space:pre">pager: $(&quot;&quot;#pager&quot;&quot;),</span></p>
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; line-height:19px; font-size:13px; white-space:pre">//Grid高度自动调整</span></p>
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; line-height:19px; font-size:13px; white-space:pre">hieght: &quot;&quot;auto&quot;&quot;,</span></p>
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; line-height:19px; font-size:13px; white-space:pre">//这是我自定义的一个功能，后面会提到</span></p>
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; line-height:19px; font-size:13px; white-space:pre">editfunc: function (id, data) { return false; },</span></p>
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; font-size:10px"><span style="line-height:19px; white-space:pre">//自定义功能，同上</span></span></p>
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; line-height:19px; font-size:13px; white-space:pre">delfunc: function (id, data) { return false; },</span></p>
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; line-height:19px; font-size:13px; white-space:pre">//自定义功能，同上</span></p>
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; line-height:19px; font-size:13px; white-space:pre">cleverjqgridactions: &quot;&quot;clever_jqgrid_actions&quot;&quot;,</span></p>
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; font-size:10px"><span style="line-height:19px; white-space:pre">//自定义功能，同上</span></span></p>
<p><span style="font-family:Verdana,Arial,Helvetica,sans-serif; line-height:19px; font-size:13px; white-space:pre">colActionsTitle: &quot;&quot;操作&quot;&quot;</span></p>

            <div>
                作者：zgjsczwj 发表于2012/7/24 11:16:58 <a href="http://blog.csdn.net/zgjsczwj/article/details/7778958">原文链接</a>
            </div>
            <div>
            阅读：615 评论：0 <a href="http://blog.csdn.net/zgjsczwj/article/details/7778958#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[转]jqgrid中单元格的formatter]]></title>
        <link>http://blog.csdn.net/zgjsczwj/article/details/7778757</link>
        <guid>http://blog.csdn.net/zgjsczwj/article/details/7778757</guid>
        <author>zgjsczwj</author>
        <pubDate>2012/7/24 10:46:14</pubDate>
        <description><![CDATA[
            
<p>jqgrid列方法：可采用自带的formatter:’select’和stype:’select’，此为编辑时下拉列表框</p>
<p>如：colModel:[</p>
<p>{name:'', index:'', width:50, formatter:'select', formatoptions:{value:{ '-1':'已取消',0:'作废', 1:'已提交', 2:'已确认', 3:'等待收货', 4:'已收货'}}, edittype:'select', editoptions:{value:{ '-1':'已取消',0:'作废', 1:'已提交', 2:'已确认', 3:'等待收货', 4:'已收货'}, size:32}, align:&quot;left&quot; },....]</p>

            <div>
                作者：zgjsczwj 发表于2012/7/24 10:46:14 <a href="http://blog.csdn.net/zgjsczwj/article/details/7778757">原文链接</a>
            </div>
            <div>
            阅读：3772 评论：0 <a href="http://blog.csdn.net/zgjsczwj/article/details/7778757#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]MVC学习四]]></title>
        <link>http://blog.csdn.net/zgjsczwj/article/details/7698184</link>
        <guid>http://blog.csdn.net/zgjsczwj/article/details/7698184</guid>
        <author>zgjsczwj</author>
        <pubDate>2012/6/28 11:47:40</pubDate>
        <description><![CDATA[
            
<p>第七节&nbsp;&nbsp; 讲述了增加model中类的属性，由于数据库中已存在表，表中没有存在新加的列，所以可以删除数据库或者在数据库中新增一列，另可以在controller中新增一个数据库初始化的类，并在Global.asax添加初始化数据库的代码</p>
<p>（1）@Html.DisplayNameFor(model =&gt; model.Title)是显示列名，</p>
<p>（2） &nbsp; <a href="mailto:2@Html.DisplayFor(modelItem">@Html.DisplayFor(modelItem</a> =&gt; item.Title)是显示列的内容</p>
<p>（3） &nbsp;&nbsp; <a href="mailto:3@Html.ActionLink('Create">@Html.ActionLink(&quot;Create</a> New&quot;, &quot;Create&quot;)是超链接，跳转到model中的create页面，引用的是controller中create方法；</p>
<p>（4） @Html.ActionLink(&quot;Edit&quot;, &quot;Edit&quot;, new { id=item.ID })编辑页面；</p>
<p>（5）&nbsp; @using (Html.BeginForm()) {&nbsp;&nbsp; @Html.ValidationSummary(true)}用于客户端验证，其Html.BeginForm()表示在本页显示</p>
<p>（6） &lt;div class=&quot;editor-label&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Html.LabelFor(model =&gt; model.Time)标签<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/div&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;div class=&quot;editor-field&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Html.EditorFor(model =&gt; model.Time)编辑框<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Html.ValidationMessageFor(model =&gt; model.Time)验证合法性错误显示<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/div&gt;</p>
<p>注意点，建立<span class="typ"><span class="typ">MovieInitializer</span></span><span class="pln"><span class="pln"></span></span><span class="pun"><span class="pun"></span></span>类时需要引用<span class="typ"><span class="typ">System</span></span><span class="pun"><span class="pun">.</span></span><span class="typ"><span class="typ">Data</span></span><span class="pun"><span class="pun">.</span></span><span class="typ"><span class="typ">Entity，并且<span class="typ"><span class="typ">DropCreateDatabaseIfModelChanges</span></span>参数修改为<span class="typ"><span class="typ">MovieDBContext</span></span><span class="pun"><span class="pun"></span></span>，默认为DBContext<span class="pun"><span class="pun"></span></span>，否则会提示不能重写seed的方法，seed的参数和<span class="typ"><span class="typ">DropCreateDatabaseIfModelChanges</span></span>一致，当数据有增加或者删除时，该功能会删除数据库再新建</span></span></p>
<p><span class="typ"><span class="typ">第八节&nbsp; 讲述了页面验证输入信息的有效性，首先会在客户端验证，验证通过后再去服务端验证。如果需要特殊验证，只需要在model的类中修改添加。<span class="pun"><span class="pun">[</span></span><span class="typ"><span class="typ">DisplayFormat</span></span><span class="pun"><span class="pun">(</span></span><span class="typ"><span class="typ">DataFormatString</span></span><span class="pln"><span class="pln">
</span></span><span class="pun"><span class="pun">=</span></span><span class="pln"><span class="pln">
</span></span><span class="str"><span class="str">&quot;{0:d}&quot;</span></span><span class="pun"><span class="pun">)]</span></span><span class="pln"><span class="pln"> ，<span class="pun"><span class="pun">[</span></span><span class="typ"><span class="typ">DisplayFormat</span></span><span class="pun"><span class="pun">(</span></span><span class="typ"><span class="typ">DataFormatString</span></span><span class="pln"><span class="pln">
</span></span><span class="pun"><span class="pun">=</span></span><span class="pln"><span class="pln">
</span></span><span class="str"><span class="str">&quot;{0:c}&quot;</span></span><span class="pun"><span class="pun">)]</span></span><span class="pln"><span class="pln"></span></span></span></span>是&#26684;式化验证。</span></span></p>
<p><span class="typ"><span class="typ"></span></span>&nbsp;</p>
<p><span class="typ"><span class="typ">第九节&nbsp;&nbsp; 讲述了安全机制，一般做删除时不是直接删除信息，而是先通过get方法找到所要删除的信息，然后显示详细信息到页面，再通过用户确认删除post方法到删除信息</span></span></p>

            <div>
                作者：zgjsczwj 发表于2012/6/28 11:47:40 <a href="http://blog.csdn.net/zgjsczwj/article/details/7698184">原文链接</a>
            </div>
            <div>
            阅读：2938 评论：1 <a href="http://blog.csdn.net/zgjsczwj/article/details/7698184#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
</channel>
</rss>
