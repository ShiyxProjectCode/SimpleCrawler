<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet type="text/xsl" title="XSL Formatting" href="/rss.xsl" media="all" ?>
<rss version="2.0">
<channel>
    <title>xiaogui340的专栏</title>
    <image>
    <link>http://blog.csdn.net</link>
    <url>http://static.blog.csdn.net/images/logo.gif</url>
    </image>
    <description></description>
	<link>http://blog.csdn.net/xiaogui340</link>
	<language>zh-cn</language>
	<generator>http://blog.csdn.net</generator>
	<ttl>5</ttl>
	<copyright><![CDATA[Copyright &copy; xiaogui340]]></copyright> 
	<pubDate>2015/9/17 14:29:49</pubDate>
    <item>
        <title><![CDATA[[转]c# 2种cookie  HttpCookie类与Cookie类]]></title>
        <link>http://blog.csdn.net/xiaogui340/article/details/16965023</link>
        <guid>http://blog.csdn.net/xiaogui340/article/details/16965023</guid>
        <author>xiaogui340</author>
        <pubDate>2013/11/26 15:00:10</pubDate>
        <description><![CDATA[
            
<p style="font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif; font-size:14px; line-height:23px; background-color:rgb(243,248,255); text-indent:2em">
System.Web.HttpCookie类，对应集合类System.Web.HttpCookieCollection类</p>
<p style="font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif; font-size:14px; line-height:23px; background-color:rgb(243,248,255); text-indent:2em">
System.<span style="font-size:12px">Net</span>.Cookie类，对应集合类System.Net.CookieCollection类</p>
<p style="font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif; font-size:14px; line-height:23px; background-color:rgb(243,248,255); text-indent:2em">
区别：</p>
<p style="font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif; font-size:14px; line-height:23px; background-color:rgb(243,248,255); text-indent:2em">
System.Web.HttpCookie是服务器端通过http请求从客户端获取的Cookie（服务器端用）</p>
<p style="font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif; font-size:14px; line-height:23px; background-color:rgb(243,248,255); text-indent:2em">
System.Net.Cookie是表示客户端程序通过http响应接收到的Cookie（客户端程序用）</p>
<p style="font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif; font-size:14px; line-height:23px; background-color:rgb(243,248,255); text-indent:2em">
属性差别：</p>
<table cellspacing="0" cellpadding="0" border="1" style="color:rgb(0,0,0); font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif; font-size:14px; line-height:23px; background-color:rgb(243,248,255)">
<tbody>
<tr>
<td valign="top" width="91" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">属性</span></p>
</td>
<td valign="top" width="192" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">System.Web.HttpCookie类</span></p>
</td>
<td valign="top" width="285" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">System.Net.Cookie类（客户端程序用）</span></p>
</td>
</tr>
<tr>
<td valign="top" width="91" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">构造函数</span></p>
</td>
<td valign="top" width="192" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">初始化 HttpCookie 类的新实例。</span></p>
</td>
<td valign="top" width="285" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">根据Netscape规范初始化 Cookie类的新实例。通常，应用程序无需构造Cookie 类，因为该类会基于通过HTTP响应接收的 Set-Cookie标头自动创建。</span></p>
</td>
</tr>
<tr>
<td valign="top" width="91" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">Comment</span></p>
</td>
<td valign="top" width="192" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">&nbsp;</span></p>
</td>
<td valign="top" width="285" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">获取或设置服务器可添加到Cookie中的注释</span></p>
</td>
</tr>
<tr>
<td valign="top" width="91" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">CommentUri</span></p>
</td>
<td valign="top" width="192" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">&nbsp;</span></p>
</td>
<td valign="top" width="285" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">获取或设置服务器可通过Cookie来提供的URI注释</span></p>
</td>
</tr>
<tr>
<td valign="top" width="91" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">Discard</span></p>
</td>
<td valign="top" width="192" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">&nbsp;</span></p>
</td>
<td valign="top" width="285" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">获取或设置由服务器设置的丢弃标志</span></p>
</td>
</tr>
<tr>
<td valign="top" width="91" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">Domain</span></p>
</td>
<td valign="top" width="192" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">获取或设置将此Cookie与其关联的域</span></p>
</td>
<td valign="top" width="285" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">获取或设置Cookie对其有效的URI</span></p>
</td>
</tr>
<tr>
<td valign="top" width="91" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">Expired</span></p>
</td>
<td valign="top" width="192" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">&nbsp;</span></p>
</td>
<td valign="top" width="285" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">获取或设置Cookie的过期状态（返回ture|false：过期|没过期）</span></p>
</td>
</tr>
<tr>
<td valign="top" width="91" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">Expires</span></p>
<p style="text-indent:2em"><span style="font-size:12px">&nbsp;</span></p>
</td>
<td valign="top" width="192" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">获取或设置此Cookie的过期日期和时间(返回DateTime)</span></p>
</td>
<td valign="top" width="285" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">获取或设置Cookie的过期日期和时间(返回DateTime)(默认MinValue，会话Cookie)</span></p>
</td>
</tr>
<tr>
<td valign="top" width="91" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">HasKeys</span></p>
</td>
<td valign="top" width="192" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">Cookie是否具有子键(获取,true|false)</span></p>
</td>
<td valign="top" width="285" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">&nbsp;</span></p>
</td>
</tr>
<tr>
<td valign="top" width="91" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">HttpOnly</span></p>
</td>
<td valign="top" width="192" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">&nbsp;</span></p>
</td>
<td valign="top" width="285" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">指定Cookie是否可通过客户端脚本访问(获取或设置,true|false)</span></p>
</td>
</tr>
<tr>
<td valign="top" width="91" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">Item</span></p>
<p style="text-indent:2em"><span style="font-size:12px">&nbsp;</span></p>
</td>
<td valign="top" width="192" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">获取HttpCookie.Values属性的快捷方式（为与老ASP版本兼容）</span></p>
</td>
<td valign="top" width="285" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">&nbsp;</span></p>
</td>
</tr>
<tr>
<td valign="top" width="91" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">Name</span></p>
</td>
<td valign="top" width="192" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">获取或设置Cookie名</span></p>
</td>
<td valign="top" width="285" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">获取或设置Cookie名</span></p>
</td>
</tr>
<tr>
<td valign="top" width="91" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">Path</span></p>
</td>
<td valign="top" width="192" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">获取或设置要与当前Cookie一起传输的虚拟路径</span></p>
</td>
<td valign="top" width="285" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">获取或设置Cookie适用于的URI</span></p>
</td>
</tr>
<tr>
<td valign="top" width="91" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">Port</span></p>
<p style="text-indent:2em"><span style="font-size:12px">&nbsp;</span></p>
</td>
<td valign="top" width="192" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">&nbsp;</span></p>
</td>
<td valign="top" width="285" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">获取或设置Cookie适用于的TCP端口的列表</span></p>
</td>
</tr>
<tr>
<td valign="top" width="91" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">Secure</span></p>
</td>
<td valign="top" width="192" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">获取或设置一个&#20540;，该&#20540;指示是否使用安全套接字层SSL(即仅通过HTTPS)传输Cookie</span></p>
</td>
<td valign="top" width="285" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">获取或设置Cookie的安全级别</span></p>
</td>
</tr>
<tr>
<td valign="top" width="91" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">TimeStamp</span></p>
</td>
<td valign="top" width="192" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">&nbsp;</span></p>
</td>
<td valign="top" width="285" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">获取Cookie作为DateTime发出的时间</span></p>
</td>
</tr>
<tr>
<td valign="top" width="91" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">Value</span></p>
</td>
<td valign="top" width="192" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">获取或设置单个Cookie的&#20540;</span></p>
</td>
<td valign="top" width="285" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">获取或设置Cookie&#20540;</span></p>
</td>
</tr>
<tr>
<td valign="top" width="91" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">Values</span></p>
<p style="text-indent:2em"><span style="font-size:12px">&nbsp;</span></p>
</td>
<td valign="top" width="192" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">获取单个Cookie对象所包含的键&#20540;对的集合</span></p>
</td>
<td valign="top" width="285" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">&nbsp;</span></p>
</td>
</tr>
<tr>
<td valign="top" width="91" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">Version</span></p>
<p style="text-indent:2em"><span style="font-size:12px">&nbsp;</span></p>
</td>
<td valign="top" width="192" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">&nbsp;</span></p>
</td>
<td valign="top" width="285" style="font-size:13px; font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif">
<p>&nbsp;</p>
<p style="text-indent:2em"><span style="font-size:12px">获取或设置Cookie的HTTP状态维护版本</span></p>
</td>
</tr>
</tbody>
</table>
<p style="font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif; font-size:14px; line-height:23px; background-color:rgb(243,248,255)">
</p>
<p style="font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif; font-size:14px; line-height:23px; background-color:rgb(243,248,255); text-indent:2em">
&nbsp;</p>
<p style="font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif; font-size:14px; line-height:23px; background-color:rgb(243,248,255); text-indent:2em">
目前有以下几种Cookie规范：</p>
<p style="font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif; font-size:14px; line-height:23px; background-color:rgb(243,248,255); text-indent:2em">
Netscape cookie草案：是最早的cookie规范，基于rfc2109。尽管这个规范与rc2109有较大的差别，但是很多服务器都与之兼容。</p>
<p style="font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif; font-size:14px; line-height:23px; background-color:rgb(243,248,255); text-indent:2em">
rfc2109， 是w3c发布的第一个官方cookie规范。这个规范太严&#26684;了，以致很多服务器不正确的实施了该规范或仍在使用Netscape规范。</p>
<p style="font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif; font-size:14px; line-height:23px; background-color:rgb(243,248,255); text-indent:2em">
rfc2965，规范定义了cookie版本2，并说明了cookie版本1的不足。</p>
<p style="font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif; font-size:14px; line-height:23px; background-color:rgb(243,248,255); text-indent:2em">
&nbsp;</p>
<p style="font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif; font-size:14px; line-height:23px; background-color:rgb(243,248,255); text-indent:2em">
推算区别：</p>
<p style="font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif; font-size:14px; line-height:23px; background-color:rgb(243,248,255); text-indent:2em">
（1）System.Web.HttpCookie 类：最初设计考虑是WEB服务器用的，由于微软的WEB服务器并没有遵循rfc2109 \rfc2965 规范。而是采用的 Netscape cookie草案方案。</p>
<p style="font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif; font-size:14px; line-height:23px; background-color:rgb(243,248,255); text-indent:2em">
同时为了兼顾以前ASP的一些编码习惯，于是就有了这个类这样的设计。</p>
<p style="font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif; font-size:14px; line-height:23px; background-color:rgb(243,248,255); text-indent:2em">
如：遍历System.Web.HttpCookieCollection，会有如下的写法：</p>
<p style="font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif; font-size:14px; line-height:23px; background-color:rgb(243,248,255); text-indent:2em">
foreach (string name in Request.Cookies)</p>
<p style="font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif; font-size:14px; line-height:23px; background-color:rgb(243,248,255); text-indent:2em">
{</p>
<p style="font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif; font-size:14px; line-height:23px; background-color:rgb(243,248,255); text-indent:2em">
&nbsp;&nbsp;&nbsp; info &#43;= string.Format(&quot;{0} = {1} \r\n &quot;, name, Request.Cookies[name].Value);</p>
<p style="font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif; font-size:14px; line-height:23px; background-color:rgb(243,248,255); text-indent:2em">
}</p>
<p style="font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif; font-size:14px; line-height:23px; background-color:rgb(243,248,255); text-indent:2em">
而foreach(HttpCookie cookie in Request.Cookies)会出错</p>
<p style="font-family:宋体,'Trebuchet MS',Arial,Helvetica,sans-serif; font-size:14px; line-height:23px; background-color:rgb(243,248,255); text-indent:2em">
（2）System.Net.Cookie 类：最初设计考虑主要是客户端使用的，由于考虑到有些服务器的Cookie 是遵循rfc2109 \rfc2965规范，所以这个类的设计多了那些属性。</p>

            <div>
                作者：xiaogui340 发表于2013/11/26 15:00:10 <a href="http://blog.csdn.net/xiaogui340/article/details/16965023">原文链接</a>
            </div>
            <div>
            阅读：720 评论：0 <a href="http://blog.csdn.net/xiaogui340/article/details/16965023#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]xml 序列化及反序列化]]></title>
        <link>http://blog.csdn.net/xiaogui340/article/details/16960433</link>
        <guid>http://blog.csdn.net/xiaogui340/article/details/16960433</guid>
        <author>xiaogui340</author>
        <pubDate>2013/11/26 11:20:52</pubDate>
        <description><![CDATA[
            
<p>&nbsp; &nbsp; &nbsp; // OBJECT -&gt; XML&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>
<p><pre code_snippet_id="82211" snippet_file_name="blog_20131126_1_8813104"  name="code" class="csharp">&nbsp; &nbsp; &nbsp; &nbsp; public static void SaveXml(string filePath, object obj, System.Type type)
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; using (System.IO.StreamWriter writer = new System.IO.StreamWriter(filePath))
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; XmlSerializer xs = new System.Xml.Serialization.XmlSerializer(type);
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; xs.Serialize(writer, obj);
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; writer.Close();
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; }</pre>&nbsp; &nbsp; &nbsp; &nbsp; // XML -&gt; OBJECT<br>
</p>
<p><pre code_snippet_id="82211" snippet_file_name="blog_20131126_2_5879738"  name="code" class="html">&nbsp; &nbsp; &nbsp; &nbsp; public static object LoadXml(string filePath, System.Type type)
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (!System.IO.File.Exists(filePath))
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return null;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; using (System.IO.StreamReader reader = new System.IO.StreamReader(filePath))
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.Xml.Serialization.XmlSerializer xs = new System.Xml.Serialization.XmlSerializer(type);
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; object obj = xs.Deserialize(reader);
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; reader.Close();
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return obj;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; }</pre><br>
<br>
</p>

            <div>
                作者：xiaogui340 发表于2013/11/26 11:20:52 <a href="http://blog.csdn.net/xiaogui340/article/details/16960433">原文链接</a>
            </div>
            <div>
            阅读：127 评论：0 <a href="http://blog.csdn.net/xiaogui340/article/details/16960433#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[转]适配器模式（Adapter Pattern）]]></title>
        <link>http://blog.csdn.net/xiaogui340/article/details/16839023</link>
        <guid>http://blog.csdn.net/xiaogui340/article/details/16839023</guid>
        <author>xiaogui340</author>
        <pubDate>2013/11/20 9:18:18</pubDate>
        <description><![CDATA[
            
<h3 align="center"><br>
</h3>
<p><strong><span style="color:rgb(0,102,153)">概述</span></strong></p>
<p>在软件系统中，由于应用环境的变化，常常需要将“一些现存的对象”放在新的环境中应用，但是新环境要求的接口是这些现存对象所不满足的。那么如何应对这种“迁移的变化”？如何既能利用现有对象的良好实现，同时又能满足新的应用环境所要求的接口？这就是本文要说的Adapter&nbsp;模式。</p>
<p><strong><span style="color:rgb(0,102,153)">意图</span></strong></p>
<p>将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>
<p><strong><span style="color:rgb(0,102,153)">结构图</span></strong></p>
<p><img height="197" hspace="0" src="http://images.cnblogs.com/cnblogs_com/terrylee/PIC097.jpg" width="543" align="center" alt=""></p>
<p align="center">图1&nbsp;类的Adapter模式结构图</p>
<p><img height="197" hspace="0" src="http://images.cnblogs.com/cnblogs_com/terrylee/PIC091.jpg" width="524" align="center" alt=""></p>
<p align="center">图2&nbsp;对象的Adapter模式结构图</p>
<p><strong><span style="color:rgb(0,102,153)">生活中的例子</span></strong></p>
<p>适配器模式允许将一个类的接口转换成客户期望的另一个接口，使得原本由于接口不兼容而不能一起工作的类可以一起工作。扳手提供了一个适配器的例子。一个孔套在棘齿上，棘齿的每个边的尺寸是相同的。在美国典型的边长为1/2''和1/4''。显然，如果不使用一个适配器的话，1/2''的棘齿不能适合1/4''的孔。一个1/2''至1/4''的适配器具有一个1/2''的阴槽来套上一个1/2''的齿，同时有一个1/4的阳槽来卡入1/4''的扳手。</p>
<p align="center"><img height="210" hspace="0" src="http://images.cnblogs.com/cnblogs_com/terrylee/PIC096.jpg" width="515" alt=""></p>
<p align="center">图3使用扳手适配器例子的适配器对象图</p>
<p><strong><span style="color:rgb(0,102,153)">适配器模式解说</span></strong></p>
<p>我们还是以日志记录程序为例子说明Adapter模式。现在有这样一个场景：假设我们在软件开发中要使用一个第三方的日志记录工具，该日志记录工具支持数据库日志记录DatabaseLog和文本文件记录FileLog两种方式，它提供给我们的API接口是Write()方法，使用方法如下：</p>
<p>Log<span style="color:fuchsia">.</span>Write(<span style="color:maroon">&quot;Logging Message!&quot;</span>);</p>
<p>当软件系统开发进行到一半时，处于某种原因不能继续使用该日志记录工具了，需要采用另外一个日志记录工具，它同样也支持数据库日志记录DatabaseLog和文本文件记录FileLog两种方式，只不过它提供给我们的API接口是WriteLog()方法，使用方法如下：</p>
<p>Log<span style="color:fuchsia">.</span>WriteLog(<span style="color:maroon">&quot;Logging Message!&quot;</span>);</p>
<p>该日志记录工具的类结构图如下：</p>
<p align="center"><img height="149" hspace="0" src="http://images.cnblogs.com/cnblogs_com/terrylee/PIC092.jpg" width="302" alt=""></p>
<p align="center">图4日志记录工具类结构图</p>
<p>它的实现代码如下：</p>
<p align="left"><span style="color:blue">public</span>&nbsp;<span style="color:blue">abstract</span>&nbsp;<span style="color:blue">class</span>&nbsp;LogAdaptee</p>
<p align="left">{</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue">public</span>&nbsp;<span style="color:blue">abstract</span>&nbsp;<span style="color:blue">void</span>&nbsp;WriteLog();</p>
<p align="left">}&nbsp;&nbsp;</p>
<p align="left"><span style="color:blue">public</span>&nbsp;<span style="color:blue">class</span>&nbsp;DatabaseLog:LogAdaptee</p>
<p align="left">{</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue">public</span>&nbsp;<span style="color:blue">override</span>&nbsp;<span style="color:blue">void</span>&nbsp;WriteLog()</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;{</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console<span style="color:fuchsia">.</span>WriteLine(<span style="color:maroon">&quot;Called WriteLog Method&quot;</span>);</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;}</p>
<p align="left">}</p>
<p align="left"><span style="color:blue">public</span>&nbsp;<span style="color:blue">class</span>&nbsp;FileLog:LogAdaptee</p>
<p align="left">{</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue">public</span>&nbsp;<span style="color:blue">override</span>&nbsp;<span style="color:blue">void</span>&nbsp;WriteLog()</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;{</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console<span style="color:fuchsia">.</span>WriteLine(<span style="color:maroon">&quot;Called WriteLog Method&quot;</span>);</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;}</p>
<p>}</p>
<p>在我们开发完成的应用程序中日志记录接口中（不妨称之为ILogTarget接口，在本例中为了更加清楚地说明，在命名上采用了Adapter模式中的相关角色名字），却用到了大量的Write()方法，程序已经全部通过了测试，我们不能去修改该接口。代码如下：</p>
<p align="left"><span style="color:blue">public</span>&nbsp;<span style="color:blue">interface</span>&nbsp;ILogTarget</p>
<p align="left">{</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue">void</span>&nbsp;Write();</p>
<p>}</p>
<p>这时也许我们会想到修改现在的日志记录工具的API接口，但是由于版权等原因我们不能够修改它的源代码，此时Adapter模式便可以派上用场了。下面我们通过Adapter模式来使得该日志记录工具能够符合我们当前的需求。</p>
<p>前面说过，Adapter模式有两种实现形式的实现结构，首先来看一下类适配器如何实现。现在唯一可行的办法就是在程序中引入新的类型，让它去继承LogAdaptee类，同时又实现已有的ILogTarget接口。由于LogAdaptee有两种类型的方式，自然我们要引入两个分别为DatabaseLogAdapter和FileLogAdapter的类。</p>
<p align="center"><img height="229" hspace="0" src="http://images.cnblogs.com/cnblogs_com/terrylee/PIC093.jpg" width="474" alt=""></p>
<p align="center">图5&nbsp;引入类适配器后的结构图</p>
<p>实现代码如下：</p>
<p align="left"><span style="color:blue">public</span>&nbsp;<span style="color:blue">class</span>&nbsp;DatabaseLogAdapter:DatabaseLog,ILogTarget</p>
<p align="left">{</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue">public</span>&nbsp;<span style="color:blue">void</span>&nbsp;Write()</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;{</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WriteLog();</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;}</p>
<p align="left">}</p>
<p align="left">&nbsp;</p>
<p align="left"><span style="color:blue">public</span>&nbsp;<span style="color:blue">class</span>&nbsp;FileLogAdapter:FileLog,ILogTarget</p>
<p align="left">{</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue">public</span>&nbsp;<span style="color:blue">void</span>&nbsp;Write()</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;{</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue">this</span><span style="color:fuchsia">.</span>WriteLog();</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;}</p>
<p>}</p>
<p>这里需要注意的一点是我们为每一种日志记录方式都编写了它的适配类，那为什么不能为抽象类LogAdaptee来编写一个适配类呢？因为DatabaseLog和FileLog虽然同时继承于抽象类LogAdaptee，但是它们具体的WriteLog()方法的实现是不同的。只有继承于该具体类，才能保留其原有的行为。</p>
<p>我们看一下这时客户端的程序的调用方法：</p>
<p align="left"><span style="color:blue">public</span>&nbsp;<span style="color:blue">class</span>&nbsp;App</p>
<p align="left">{</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue">public</span>&nbsp;<span style="color:blue">static</span>&nbsp;<span style="color:blue">void</span>&nbsp;Main()</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;{</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ILogTarget dbLog&nbsp;<span style="color:fuchsia">=</span>&nbsp;<span style="color:blue">new</span>&nbsp;DatabaseLogAdapter();</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dbLog<span style="color:fuchsia">.</span>Write(<span style="color:maroon">&quot;Logging Database...&quot;</span>);</p>
<p align="left">&nbsp;</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ILogTarget fileLog&nbsp;<span style="color:fuchsia">=</span>&nbsp;<span style="color:blue">new</span>&nbsp;FileLogAdapter();</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fileLog<span style="color:fuchsia">.</span>Write(<span style="color:maroon">&quot;Logging File...&quot;</span>);</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;}</p>
<p>}</p>
<p>下面看一下如何通过对象适配器的方式来达到我们适配的目的。对象适配器是采用对象组合而不是使用继承，类结构图如下：</p>
<p align="center"><img height="146" hspace="0" src="http://images.cnblogs.com/cnblogs_com/terrylee/PIC095.jpg" width="470" alt=""></p>
<p align="center">图6引入对象适配器后的结构图</p>
<p>实现代码如下：</p>
<p align="left"><span style="color:blue">public</span>&nbsp;<span style="color:blue">class</span>&nbsp;LogAdapter:ILogTarget</p>
<p align="left">{</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue">private</span>&nbsp;LogAdaptee _adaptee;</p>
<p align="left">&nbsp;</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue">public</span>&nbsp;LogAdapter(LogAdaptee adaptee)</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;{</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue">this</span><span style="color:fuchsia">.</span>_adaptee&nbsp;<span style="color:fuchsia">=</span>&nbsp;adaptee;&nbsp;&nbsp;&nbsp;</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;}</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue">public</span>&nbsp;<span style="color:blue">void</span>&nbsp;Write()</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;{</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_adaptee<span style="color:fuchsia">.</span>WriteLog();</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;}</p>
<p>}</p>
<p>与类适配器相比较，可以看到最大的区别是适配器类的数量减少了，不再需要为每一种具体的日志记录方式来创建一个适配器类。同时可以看到，引入对象适配器后，适配器类不再依赖于具体的DatabaseLog类和FileLog类，更好的实现了松耦合。</p>
<p>再看一下客户端程序的调用方法：</p>
<p align="left"><span style="color:blue">public</span>&nbsp;<span style="color:blue">class</span>&nbsp;App</p>
<p align="left">{</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue">public</span>&nbsp;<span style="color:blue">static</span>&nbsp;<span style="color:blue">void</span>&nbsp;Main()</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;{</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ILogTarget dbLog&nbsp;<span style="color:fuchsia">=</span>&nbsp;<span style="color:blue">new</span>&nbsp;LogAdapter(<span style="color:blue">new</span>&nbsp;DatabaseLog());</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dbLog<span style="color:fuchsia">.</span>Write(<span style="color:maroon">&quot;Logging Database...&quot;</span>);</p>
<p align="left">&nbsp;</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ILogTarget fileLog&nbsp;<span style="color:fuchsia">=</span>&nbsp;<span style="color:blue">new</span>&nbsp;LogAdapter(<span style="color:blue">new</span>&nbsp;FileLog());</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fileLog<span style="color:fuchsia">.</span>Write(<span style="color:maroon">&quot;Logging Database...&quot;</span>);</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;}</p>
<p>}</p>
<p>通过Adapter模式，我们很好的实现了对现有组件的复用。对比以上两种适配方式，可以总结出，在类适配方式中，我们得到的适配器类DatabaseLogAdapter和FileLogAdapter具有它所继承的父类的所有的行为，同时也具有接口ILogTarget的所有行为，这样其实是违背了面向对象设计原则中的类的单一职责原则，而对象适配器则更符合面向对象的精神，所以在实际应用中不太推荐类适配这种方式。再换个角度来看类适配方式，假设我们要适配出来的类在记录日志时同时写入文件和数据库，那么用对象适配器我们会这样去写：</p>
<p align="left"><span style="color:blue">public</span>&nbsp;<span style="color:blue">class</span>&nbsp;LogAdapter:ILogTarget</p>
<p align="left">{</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue">private</span>&nbsp;LogAdaptee _adaptee1;</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue">private</span>&nbsp;LogAdaptee _adaptee2;</p>
<p align="left">&nbsp;</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue">public</span>&nbsp;LogAdapter(LogAdaptee adaptee1,LogAdaptee adaptee2)</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;{</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue">this</span><span style="color:fuchsia">.</span>_adaptee1&nbsp;<span style="color:fuchsia">=</span>&nbsp;adaptee1;</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue">this</span><span style="color:fuchsia">.</span>_adaptee2&nbsp;<span style="color:fuchsia">=</span>&nbsp;adaptee2;</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;}</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue">public</span>&nbsp;<span style="color:blue">void</span>&nbsp;Write()</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;{</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_adaptee1<span style="color:fuchsia">.</span>WriteLog();</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_adaptee2<span style="color:fuchsia">.</span>WriteLog();</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;}</p>
<p>}</p>
<p>如果改用类适配器，难道这样去写：</p>
<p align="left"><span style="color:blue">public</span>&nbsp;<span style="color:blue">class</span>&nbsp;DatabaseLogAdapter:DatabaseLog,FileLog,ILogTarget</p>
<p align="left">{</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue">public</span>&nbsp;<span style="color:blue">void</span>&nbsp;Write()</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;{</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green">//WriteLog();</span></p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;}</p>
<p>}</p>
<p>显然是不对的，这样的解释虽说有些牵强，也足以说明一些问题，当然了并不是说类适配器在任何情况下都不使用，针对开发场景不同，某些时候还是可以用类适配器的方式。</p>
<p><strong><span style="color:rgb(0,102,153)">.NET</span><span style="color:rgb(0,102,153)">中的适配器模式</span></strong></p>
<p>1．Adapter模式在.NET Framework中的一个最大的应用就是COM Interop。COM Interop就好像是COM和.NET之间的一条纽带，一座桥梁。我们知道，COM组件对象与.NET类对象是完全不同的，但为了使COM客户程序象调用COM组件一样调用.NET对象，使.NET程序</p>
<p>象使用.NET对象一样使用COM组件，微软在处理方式上采用了Adapter模式，对COM对象进行包装，这个包装类就是RCW(Runtime Callable Wrapper)。RCW实际上是runtime生成的一个.NET类，它包装了COM组件的方法，并内部实现对COM组件的调用。如下图所示：</p>
<p align="center"><img height="224" hspace="0" src="http://images.cnblogs.com/cnblogs_com/terrylee/PIC094.jpg" width="599" alt=""></p>
<p align="center">图7 .NET程序与COM互相调用示意图</p>
<p>2．.NET中的另一个Adapter模式的应用就是DataAdapter。ADO.NET为统一的数据访问提供了多个接口和基类，其中最重要的接口之一是IdataAdapter。与之相对应的DataAdpter是一个抽象类，它是ADO.NET与具体数据库操作之间的数据适配器的基类。DataAdpter起到了数据库到DataSet桥接器的作用，使应用程序的数据操作统一到DataSet上，而与具体的数据库类型无关。甚至可以针对特殊的数据源编制自己的DataAdpter，从而使我们的应用程序与这些特殊的数据源相兼容。注意这是一个适配器的变体。</p>
<p><strong><span style="color:rgb(0,102,153)">实现要点</span></strong></p>
<p>1．Adapter模式主要应用于“希望复用一些现存的类，但是接口又与复用环境要求不一致的情况”，在遗留代码复用、类库迁移等方面非常有用。</p>
<p>2．Adapter模式有对象适配器和类适配器两种形式的实现结构，但是类适配器采用“多继承”的实现方式，带来了不良的高耦合，所以一般不推荐使用。对象适配器采用“对象组合”的方式，更符合松耦合精神。</p>
<p>3．Adapter模式的实现可以非常的灵活，不必拘泥于GOF23中定义的两种结构。例如，完全可以将Adapter模式中的“现存对象”作为新的接口方法参数，来达到适配的目的。</p>
<p>4．Adapter模式本身要求我们尽可能地使用“面向接口的编程”风&#26684;，这样才能在后期很方便的适配。[以上几点引用自MSDN WebCast]</p>
<p><strong><span style="color:rgb(0,102,153)">效果</span></strong></p>
<p>对于类适配器：</p>
<p>1．用一个具体的Adapter类对Adaptee和Taget进行匹配。结果是当我们想要匹配一个类以及所有它的子类时，类Adapter将不能胜任工作。</p>
<p>2．使得Adapter可以重定义Adaptee的部分行为，因为Adapter是Adaptee的一个子类。</p>
<p>3．仅仅引入了一个对象，并不需要额外的指针一间接得到Adaptee.</p>
<p>对于对象适配器：</p>
<p>1．允许一个Adapter与多个Adaptee，即Adaptee本身以及它的所有子类（如果有子类的话）同时工作。Adapter也可以一次给所有的Adaptee添加功能。</p>
<p>2．使得重定义Adaptee的行为比较困难。这就需要生成Adaptee的子类并且使得Adapter引用这个子类而不是引用Adaptee本身。</p>
<p><strong><span style="color:rgb(0,102,153)">适用性</span></strong></p>
<p>在以下各种情况下使用适配器模式：</p>
<p>1．系统需要使用现有的类，而此类的接口不符合系统的需要。</p>
<p>2．想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。这些源类不一定有很复杂的接口。</p>
<p>3．（对对象适配器而言）在设计里，需要改变多个已有子类的接口，如果使用类的适配器模式，就要针对每一个子类做一个适配器，而这不太实际。</p>
<p><strong><span style="color:rgb(0,102,153)">总结</span></strong></p>
<p>总之，通过运用Adapter模式，就可以充分享受进行类库迁移、类库重用所带来的乐趣。</p>

            <div>
                作者：xiaogui340 发表于2013/11/20 9:18:18 <a href="http://blog.csdn.net/xiaogui340/article/details/16839023">原文链接</a>
            </div>
            <div>
            阅读：288 评论：0 <a href="http://blog.csdn.net/xiaogui340/article/details/16839023#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]c# 策略模式]]></title>
        <link>http://blog.csdn.net/xiaogui340/article/details/11196487</link>
        <guid>http://blog.csdn.net/xiaogui340/article/details/11196487</guid>
        <author>xiaogui340</author>
        <pubDate>2013/9/6 16:16:21</pubDate>
        <description><![CDATA[
            
<h2 style="margin-top:10px; margin-bottom:3px; font-size:18px; font-family:Verdana,Geneva,Arial,Helvetica,sans-serif">
一、&nbsp;策略（Strategy）模式</h2>
<p style="font-size:13px; line-height:1.4; margin:10px auto; font-family:Verdana,Geneva,Arial,Helvetica,sans-serif">
策略模式的用意是针对一组算法，将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替换。策略模式使得算法可以在不影响到客户端的情况下发生变化。</p>
<p style="font-size:13px; line-height:1.4; margin:10px auto; font-family:Verdana,Geneva,Arial,Helvetica,sans-serif">
使用策略模式可以把行为和环境分割开来。环境类负责维持和查询行为类，各种算法则在具体策略类（ConcreteStrategy）中提供。由于算法和环境独立开来，算法的增减、修改都不会影响环境和客户端。当出现新的促销折扣或现有的折扣政策出现变化时，只需要实现新的策略类，并在客户端登记即可。策略模式相当于&quot;可插入式（Pluggable）的算法&quot;。</p>
<h2 style="margin-top:10px; margin-bottom:3px; font-size:18px; font-family:Verdana,Geneva,Arial,Helvetica,sans-serif">
二、&nbsp;策略模式的结构</h2>
<p style="font-size:13px; line-height:1.4; margin:10px auto; font-family:Verdana,Geneva,Arial,Helvetica,sans-serif">
策略模式是对算法的包装，是把使用算法的责任和算法本身分割开，委派给不同的对象管理。策略模式通常把一个系列的算法包装到一系列的策略类里面，作为一个抽象策略类的子类。用一句话来说，就是：&quot;准备一组算法，并将每一个算法封装起来，使得它们可以互换。&quot;</p>
<p style="font-size:13px; line-height:1.4; margin:10px auto; font-family:Verdana,Geneva,Arial,Helvetica,sans-serif">
策略又称做政策（Policy）模式【GOF95】。下面是一个示意性的策略模式结构图：</p>
<p style="font-size:13px; line-height:1.4; margin:10px auto; font-family:Verdana,Geneva,Arial,Helvetica,sans-serif">
&nbsp;<img src="http://images.cnblogs.com/cnblogs_com/zhenyulu/PicX00115.gif" alt="" width="502" height="166" border="0" style="border:0px"></p>
<p style="font-size:13px; line-height:1.4; margin:10px auto; font-family:Verdana,Geneva,Arial,Helvetica,sans-serif">
这个模式涉及到三个角色：</p>
<ul style="margin-left:45px; font-family:Verdana,Geneva,Arial,Helvetica,sans-serif; font-size:13px; line-height:19px">
<li style="list-style:inherit"><span style="line-height:1.5; color:rgb(0,0,128)">环境（Context）角色</span>：持有一个Strategy类的引用。</li><li style="list-style:inherit"><span style="line-height:1.5; color:rgb(0,0,128)">抽象策略（Strategy）角色</span>：这是一个抽象角色，通常由一个接口或抽象类实现。此角色给出所有的具体策略类所需的接口。</li><li style="list-style:inherit"><span style="line-height:1.5; color:rgb(0,0,128)">具体策略（ConcreteStrategy）角色</span>：包装了相关的算法或行为。</li></ul>

            <div>
                作者：xiaogui340 发表于2013/9/6 16:16:21 <a href="http://blog.csdn.net/xiaogui340/article/details/11196487">原文链接</a>
            </div>
            <div>
            阅读：336 评论：0 <a href="http://blog.csdn.net/xiaogui340/article/details/11196487#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[转]C#当中利用Attribute实现简易AOP]]></title>
        <link>http://blog.csdn.net/xiaogui340/article/details/10607829</link>
        <guid>http://blog.csdn.net/xiaogui340/article/details/10607829</guid>
        <author>xiaogui340</author>
        <pubDate>2013/8/30 15:52:32</pubDate>
        <description><![CDATA[
            
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(17,17,17); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px">
首先看一段简单的代码：</p>
<div class="cnblogs_code" style="margin:5px 0px; padding:5px; background-color:rgb(245,245,245); font-family:'Courier New'; border:1px solid rgb(204,204,204); overflow:auto; color:rgb(17,17,17)">
<div class="cnblogs_code_toolbar" style="margin:5px 0px 0px; padding:0px"><span class="cnblogs_code_copy" style="margin:0px; padding:0px 5px 0px 0px; line-height:1.5"><a target="_blank" title="复制代码" style="margin:0px; padding:0px; text-decoration:underline; color:rgb(0,102,204); border:none!important"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="margin:0px; padding:0px; border:none!important"></a></span></div>
<pre style="margin-top:0px; margin-bottom:0px; padding:0px; white-space:pre-wrap; word-wrap:break-word; font-family:'Courier New'"><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">public</span> <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">partial</span> <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">class</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)"> Form1 : Form
{
    </span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">public</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)"> Form1()
    {
        InitializeComponent();
    }

    </span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,128,0)">//</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,128,0)">来自UI层的调用</span>
    <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">private</span> <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">void</span> button1_Click(<span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">object</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)"> sender, EventArgs e)
    {
        BusinessHandler handler </span>= <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">new</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)"> BusinessHandler();
        handler.DoSomething();
    }
}

</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,128,0)">//</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,128,0)">业务层的类和方法</span>
<span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">public</span> <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">class</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)"> BusinessHandler
{
    </span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">public</span> <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">void</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)"> DoSomething()
    {
        MessageBox.Show(</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(128,0,0)">&quot;</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(128,0,0)">执行了方法本身！</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(128,0,0)">&quot;</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)">);
    }
}</span></pre>
<div class="cnblogs_code_toolbar" style="margin:5px 0px 0px; padding:0px"><span class="cnblogs_code_copy" style="margin:0px; padding:0px 5px 0px 0px; line-height:1.5"><a target="_blank" title="复制代码" style="margin:0px; padding:0px; text-decoration:underline; color:rgb(0,102,204); border:none!important"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="margin:0px; padding:0px; border:none!important"></a></span></div>
</div>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(17,17,17); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px">
那么假设这是一个web程序，我们想在按钮点击时，先校验session，然后检验权限、起事务、写日志，然后再执行操作本身，最后再写日志。显然不能把对上面这些操作的方法调用都写在DoSomething()里，这样代码会变成一大坨屎，那我们该怎么办呢？</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(17,17,17); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px">
所谓AOP（面向切面编程）这个唬人的名词就是干这件事用的，其实现方式有很多种，比如利用Spring等框架，但是在实际项目中并不是想引一个框架进来就能随便引的，很多时候都需要我们自己手写一些机制。</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(17,17,17); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px">
这里想到了MVC当中的Filter，只要在Controller或者Action上打一个特性标签（Attribute），就能在方法执行前后做一些其他事情了。那么我们就来简单模拟一个Filter的实现吧。</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(17,17,17); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px">
首先给原先的方法改造一下，改成特性标签这种优雅的方式：</p>
<div class="cnblogs_code" style="margin:5px 0px; padding:5px; background-color:rgb(245,245,245); font-family:'Courier New'; border:1px solid rgb(204,204,204); overflow:auto; color:rgb(17,17,17)">
<div class="cnblogs_code_toolbar" style="margin:5px 0px 0px; padding:0px"><span class="cnblogs_code_copy" style="margin:0px; padding:0px 5px 0px 0px; line-height:1.5"><a target="_blank" title="复制代码" style="margin:0px; padding:0px; text-decoration:underline; color:rgb(0,102,204); border:none!important"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="margin:0px; padding:0px; border:none!important"></a></span></div>
<pre style="margin-top:0px; margin-bottom:0px; padding:0px; white-space:pre-wrap; word-wrap:break-word; font-family:'Courier New'"><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,128,0)">//</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,128,0)">业务层的类和方法，让它继承自上下文绑定类的基类</span>
<span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)">[MyInterceptor]
</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">public</span> <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">class</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)"> BusinessHandler : ContextBoundObject
{
    [MyInterceptorMethod]
    </span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">public</span> <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">void</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)"> DoSomething()
    {
        MessageBox.Show(</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(128,0,0)">&quot;</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(128,0,0)">执行了方法本身！</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(128,0,0)">&quot;</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)">);
    }
}</span></pre>
<div class="cnblogs_code_toolbar" style="margin:5px 0px 0px; padding:0px"><span class="cnblogs_code_copy" style="margin:0px; padding:0px 5px 0px 0px; line-height:1.5"><a target="_blank" title="复制代码" style="margin:0px; padding:0px; text-decoration:underline; color:rgb(0,102,204); border:none!important"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="margin:0px; padding:0px; border:none!important"></a></span></div>
</div>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(17,17,17); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px">
有了特性标签自然就要有特性标签对应的类，以及AOP的实现方法，这些东西可以单独独立到一个文件或程序集里。</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(17,17,17); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px">
首先是贴在方法上的标签，实现为空：</p>
<div class="cnblogs_code" style="margin:5px 0px; padding:5px; background-color:rgb(245,245,245); font-family:'Courier New'; border:1px solid rgb(204,204,204); overflow:auto; color:rgb(17,17,17)">
<pre style="margin-top:0px; margin-bottom:0px; padding:0px; white-space:pre-wrap; word-wrap:break-word; font-family:'Courier New'"><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,128,0)">//</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,128,0)">贴在方法上的标签</span>
[AttributeUsage(AttributeTargets.Method, AllowMultiple = <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">false</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)">)]
</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">public</span> <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">sealed</span> <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">class</span> MyInterceptorMethodAttribute : Attribute { }</pre>
</div>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(17,17,17); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px">
之后定义贴在类上的标签：</p>
<div class="cnblogs_code" style="margin:5px 0px; padding:5px; background-color:rgb(245,245,245); font-family:'Courier New'; border:1px solid rgb(204,204,204); overflow:auto; color:rgb(17,17,17)">
<div class="cnblogs_code_toolbar" style="margin:5px 0px 0px; padding:0px"><span class="cnblogs_code_copy" style="margin:0px; padding:0px 5px 0px 0px; line-height:1.5"><a target="_blank" title="复制代码" style="margin:0px; padding:0px; text-decoration:underline; color:rgb(0,102,204); border:none!important"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="margin:0px; padding:0px; border:none!important"></a></span></div>
<pre style="margin-top:0px; margin-bottom:0px; padding:0px; white-space:pre-wrap; word-wrap:break-word; font-family:'Courier New'"><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,128,0)">//</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,128,0)">贴在类上的标签</span>
[AttributeUsage(AttributeTargets.Class, AllowMultiple = <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">false</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)">)]
</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">public</span> <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">sealed</span> <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">class</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)"> MyInterceptorAttribute : ContextAttribute, IContributeObjectSink
{
    </span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">public</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)"> MyInterceptorAttribute()
        : </span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">base</span>(<span style="margin:0px; padding:0px; line-height:1.5; color:rgb(128,0,0)">&quot;</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(128,0,0)">MyInterceptor</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(128,0,0)">&quot;</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)">)
    { }

    </span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,128,0)">//</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,128,0)">实现IContributeObjectSink接口当中的消息接收器接口</span>
    <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">public</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)"> IMessageSink GetObjectSink(MarshalByRefObject obj, IMessageSink next)
    {
        </span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">return</span> <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">new</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)"> MyAopHandler(next);
    }
}</span></pre>
<div class="cnblogs_code_toolbar" style="margin:5px 0px 0px; padding:0px"><span class="cnblogs_code_copy" style="margin:0px; padding:0px 5px 0px 0px; line-height:1.5"><a target="_blank" title="复制代码" style="margin:0px; padding:0px; text-decoration:underline; color:rgb(0,102,204); border:none!important"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="margin:0px; padding:0px; border:none!important"></a></span></div>
</div>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(17,17,17); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px">
这里定义了一个MyAopHandler类，实现如下：</p>
<div class="cnblogs_code" style="margin:5px 0px; padding:5px; background-color:rgb(245,245,245); font-family:'Courier New'; border:1px solid rgb(204,204,204); overflow:auto; color:rgb(17,17,17)">
<div class="cnblogs_code_toolbar" style="margin:5px 0px 0px; padding:0px"><span class="cnblogs_code_copy" style="margin:0px; padding:0px 5px 0px 0px; line-height:1.5"><a target="_blank" title="复制代码" style="margin:0px; padding:0px; text-decoration:underline; color:rgb(0,102,204); border:none!important"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="margin:0px; padding:0px; border:none!important"></a></span></div>
<pre style="margin-top:0px; margin-bottom:0px; padding:0px; white-space:pre-wrap; word-wrap:break-word; font-family:'Courier New'"><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,128,0)">//</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,128,0)">AOP方法处理类，实现了IMessageSink接口，以便返回给IContributeObjectSink接口的GetObjectSink方法</span>
<span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">public</span> <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">sealed</span> <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">class</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)"> MyAopHandler : IMessageSink
{
    </span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,128,0)">//</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,128,0)">下一个接收器</span>
    <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">private</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)"> IMessageSink nextSink;
    </span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">public</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)"> IMessageSink NextSink
    {
        </span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">get</span> { <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">return</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)"> nextSink; }
    }
    </span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">public</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)"> MyAopHandler(IMessageSink nextSink)
    {
        </span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">this</span>.nextSink =<span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)"> nextSink;
    }

    </span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,128,0)">//</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,128,0)">同步处理方法</span>
    <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">public</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)"> IMessage SyncProcessMessage(IMessage msg)
    {
        IMessage retMsg </span>= <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">null</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)">;

        </span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,128,0)">//</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,128,0)">方法调用消息接口</span>
        IMethodCallMessage call = msg <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">as</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)"> IMethodCallMessage;

        </span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,128,0)">//</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,128,0)">如果被调用的方法没打MyInterceptorMethodAttribute标签</span>
        <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">if</span> (call == <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">null</span> || (Attribute.GetCustomAttribute(call.MethodBase, <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">typeof</span>(MyInterceptorMethodAttribute))) == <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">null</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)">)
        {
            retMsg </span>=<span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)"> nextSink.SyncProcessMessage(msg);
        }
        </span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,128,0)">//</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,128,0)">如果打了MyInterceptorMethodAttribute标签</span>
        <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">else</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)">
        {
            MessageBox.Show(</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(128,0,0)">&quot;</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(128,0,0)">执行之前</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(128,0,0)">&quot;</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)">);
            retMsg </span>=<span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)"> nextSink.SyncProcessMessage(msg);
            MessageBox.Show(</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(128,0,0)">&quot;</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(128,0,0)">执行之后</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(128,0,0)">&quot;</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)">);
        }

        </span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">return</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)"> retMsg;
    }

    </span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,128,0)">//</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,128,0)">异步处理方法（不需要）</span>
    <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">public</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)"> IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink)
    {
        </span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">return</span> <span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,255)">null</span><span style="margin:0px; padding:0px; line-height:1.5; color:rgb(0,0,0)">;
    }
}</span></pre>
<div class="cnblogs_code_toolbar" style="margin:5px 0px 0px; padding:0px"><span class="cnblogs_code_copy" style="margin:0px; padding:0px 5px 0px 0px; line-height:1.5"><a target="_blank" title="复制代码" style="margin:0px; padding:0px; text-decoration:underline; color:rgb(0,102,204); border:none!important"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="margin:0px; padding:0px; border:none!important"></a></span></div>
</div>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(17,17,17); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px">
注意到上面的执行前后具体操作部分代码，相当于一个“代理类”，它实质上是改变了方法执行的上下文。可以用委托等面向对象程序结构把具体实现暴露给外部进行二次开发。</p>

            <div>
                作者：xiaogui340 发表于2013/8/30 15:52:32 <a href="http://blog.csdn.net/xiaogui340/article/details/10607829">原文链接</a>
            </div>
            <div>
            阅读：232 评论：0 <a href="http://blog.csdn.net/xiaogui340/article/details/10607829#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]知识点记录，争取每天都有收获一]]></title>
        <link>http://blog.csdn.net/xiaogui340/article/details/10095331</link>
        <guid>http://blog.csdn.net/xiaogui340/article/details/10095331</guid>
        <author>xiaogui340</author>
        <pubDate>2013/8/20 17:01:08</pubDate>
        <description><![CDATA[
            
<p><strong>RichTextbox控件：</strong></p>
<p>&nbsp; &nbsp;&nbsp; 1.自动滚动到最新加入的行<pre name="code" class="csharp">            this.richTextBox1.SelectionStart = this.richTextBox1.TextLength;
            this.richTextBox1.ScrollToCaret();</pre>&nbsp; &nbsp; 2.删除行，这里是删除最旧的行，注意不能直接&nbsp;this.richTextBox1.Lines.ToList().Remove(0)!!</p>
<p><pre name="code" class="csharp">            int lineCount = this.richTextBox1.Lines.Length;
            if (lineCount &gt;= maxShowLines) this.richTextBox1.Lines = this.richTextBox1.Lines.ToList().Skip(1).ToArray();</pre><br>
线程：前台线程与后台线程</p>
<p><span style="white-space:pre"><span style="line-height:20px"><span style="background-color:rgb(255,255,255)"><span style="font-family:SimSun">应用程序必须运行完所有的前台线程才可以退出；而对于后台线程，应用程序则可以不考虑其是否已经运行完毕而直接退出，所有的后台线程在应用程序退出时都会自动结束。</span></span></span></span></p>
<div style="line-height:20px"><span style="background-color:rgb(255,255,255)"><span style="font-family:SimSun">.Net环境使用Thread建立的线程默认情况下是前台线程，即线程属性IsBackground=<span style="line-height:1.5">false</span>，在进程中，只要有一个前台线程未退出，进程就不会终止。主线程就是一个前台线程。</span></span></div>
<p></p>
<p><span style="background-color:rgb(255,255,255)"><span style="font-family:SimSun">而后台线程不管线程是否结束，只要所有的前台线程都退出（包括正常退出和异常退出）后，进程就会自动终止。一般后台线程用于处理时间较短的任务，如在一个Web服务器中可以利用后台线程来处理客户端发过来的请求信息。而前台线程一般用于处理需要长时间等待的任务，如在Web服务器中的监听客户端请求的程序，或是定时对某些系统资源进行扫描的程序</span><span style="font-family:Courier New">。</span></span></p>

            <div>
                作者：xiaogui340 发表于2013/8/20 17:01:08 <a href="http://blog.csdn.net/xiaogui340/article/details/10095331">原文链接</a>
            </div>
            <div>
            阅读：164 评论：0 <a href="http://blog.csdn.net/xiaogui340/article/details/10095331#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[转]C#4.0中的dynamic关键字和ExpandoObject对象]]></title>
        <link>http://blog.csdn.net/xiaogui340/article/details/9339483</link>
        <guid>http://blog.csdn.net/xiaogui340/article/details/9339483</guid>
        <author>xiaogui340</author>
        <pubDate>2013/7/16 9:57:27</pubDate>
        <description><![CDATA[
            
<p style="border-width:0px; padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:8px; list-style:none; text-indent:2em; color:rgb(51,51,51); font-family:宋体; font-size:14px; line-height:28px">
</p>
<table width="100%" style="padding:0px; margin:0px; color:rgb(51,51,51); font-family:Verdana,Arial,Tahoma; font-size:14px; line-height:25px">
<tbody style="padding:0px; margin:0px">
<tr style="padding:0px; margin:0px">
<td style="padding:0px; margin:0px">
<p style="padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px">
我们做Web应用程序开发的程序员，我想大家对JavaScript的接触一定不少，在JavaScript中我们经常用到一个功能，就是可以随时随地的新建一个对象，然后就可以自定义的给它定义自己需要的属性，就如下面的简单例子</p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px">
&nbsp;</p>
<div class="cnblogs_code" style="padding:0px; margin:0px"><img id="code_img_closed_c50770cd-f494-440f-9088-4f67770070f0" class="code_img_closed" src="http://www.soaspx.com/uploads/allimg/100822/110TW1X-0.gif" alt="" style="padding:0px; margin:0px; border:none"><span class="cnblogs_code_collapse" style="padding:0px; margin:0px">代码</span>
<div id="cnblogs_code_open_c50770cd-f494-440f-9088-4f67770070f0" class="cnblogs_code_hide" style="padding:0px; margin:0px">
<pre style="padding:0px; margin-top:0px; margin-bottom:1em; font-family:'Courier New',monospace; width:954.359375px; overflow:auto; background-color:rgb(247,247,247)"><div style="padding:0px; margin:0px"><span style="padding:0px; margin:0px; color:rgb(0,0,0)">    </span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">&lt;</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">script type</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">=</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">&quot;</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">text/javascript</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">&quot;</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">&gt;</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)"><br style="padding:0px; margin:0px">        </span><span style="padding:0px; margin:0px; color:rgb(0,0,255)">function</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)"> getObject(name) {<br style="padding:0px; margin:0px">            </span><span style="padding:0px; margin:0px; color:rgb(0,0,255)">var</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)"> obj </span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">=</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)"> </span><span style="padding:0px; margin:0px; color:rgb(0,0,255)">new</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)"> Object();<br style="padding:0px; margin:0px">            </span><span style="padding:0px; margin:0px; color:rgb(0,128,0)">//</span><span style="padding:0px; margin:0px; color:rgb(0,128,0)">自定义两个属性</span><span style="padding:0px; margin:0px; color:rgb(0,128,0)"><br style="padding:0px; margin:0px"></span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">            obj.Name </span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">=</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)"> name;<br style="padding:0px; margin:0px">            obj.Sex </span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">=</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)"> </span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">&quot;</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">男</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">&quot;</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">;<br style="padding:0px; margin:0px">            </span><span style="padding:0px; margin:0px; color:rgb(0,0,255)">return</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)"> obj;<br style="padding:0px; margin:0px">        }<br style="padding:0px; margin:0px"><br style="padding:0px; margin:0px">        </span><span style="padding:0px; margin:0px; color:rgb(0,0,255)">function</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)"> onbtnClick() {<br style="padding:0px; margin:0px">            </span><span style="padding:0px; margin:0px; color:rgb(0,0,255)">var</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)"> retobj </span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">=</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)"> getObject(</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">&quot;</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">吖龙</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">&quot;</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">);</span><span style="padding:0px; margin:0px; color:rgb(0,128,0)">//</span><span style="padding:0px; margin:0px; color:rgb(0,128,0)">调用自定义的属性</span><span style="padding:0px; margin:0px; color:rgb(0,128,0)"><br style="padding:0px; margin:0px"></span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">            alert(</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">&quot;</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">姓名：</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">&quot;</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">&#43;</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">retobj.Name </span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">&#43;</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)"> </span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">&quot;</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">\n性别：</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">&quot;</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)"> </span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">&#43;</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)"> retobj.Sex);<br style="padding:0px; margin:0px">        }<br style="padding:0px; margin:0px">    </span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">&lt;</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">/</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">script&gt;</span></div></pre>
</div>
</div>
<p style="padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px">
用下面代码调用</p>
<div class="cnblogs_code" style="padding:0px; margin:0px">
<pre style="padding:0px; margin-top:0px; margin-bottom:1em; font-family:'Courier New',monospace; width:954.359375px; overflow:auto; background-color:rgb(247,247,247)"><div style="padding:0px; margin:0px"><span style="padding:0px; margin:0px; color:rgb(0,0,0)"> </span><span style="padding:0px; margin:0px; color:rgb(0,0,255)">&lt;</span><span style="padding:0px; margin:0px; color:rgb(128,0,0)">input </span><span style="padding:0px; margin:0px; color:rgb(255,0,0)">type</span><span style="padding:0px; margin:0px; color:rgb(0,0,255)">=&quot;button&quot;</span><span style="padding:0px; margin:0px; color:rgb(255,0,0)"> id</span><span style="padding:0px; margin:0px; color:rgb(0,0,255)">=&quot;btnTest&quot;</span><span style="padding:0px; margin:0px; color:rgb(255,0,0)"> value</span><span style="padding:0px; margin:0px; color:rgb(0,0,255)">=&quot;自定义属性&quot;</span><span style="padding:0px; margin:0px; color:rgb(255,0,0)"> onclick</span><span style="padding:0px; margin:0px; color:rgb(0,0,255)">=&quot;onbtnClick();&quot;</span><span style="padding:0px; margin:0px; color:rgb(255,0,0)"> </span><span style="padding:0px; margin:0px; color:rgb(0,0,255)">/&gt;</span></div></pre>
</div>
<p style="padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px">
&nbsp;</p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px">
单击自定义属性按钮后，会像我们意料的一样获取到了相应的自定义属性&#20540;。</p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px">
　　曾经，我为上面的方便用法疯狂和兴奋过，这几天看到了C#4.0也提供了这种用法，更是兴奋不已，获取你已经觉得早就已经熟运于心了，请原谅我的反应迟钝和步伐慢。今天怀着分享的心给简单介绍一下C#4.0中的关键字dynamic和对象ExpendoObject对象。</p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px">
　　我的类型，我做主，编译器绕道过···</p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px">
　　dynamic最大的特点我想莫过于在它的类型在运行时才确定，这也是它与往静态类型关键字的最大区别。如果你在你的代码操作中用到了dynamic关键字去定义一个变量时，那么这个变量在编译的时候编译器不会对它进行类型检查，允许它到运行的时候再做解释。<span id="xn4_20a12f812df4c91b9b2920891e98488e" class="sentence" style="padding:0px; margin:0px">在大多数情况下，<span style="padding:0px; margin:0px"><span class="input" style="padding:0px; margin:0px">dynamic</span></span>&nbsp;类型与<span style="padding:0px; margin:0px"><span class="input" style="padding:0px; margin:0px">object</span></span>&nbsp;类型的行为是一样的。</span><span id="xn5_66fb48eb1024eeaa3f06d5c747227b1d" class="sentence" style="padding:0px; margin:0px">但是，不会用编译器对包含&nbsp;<span style="padding:0px; margin:0px"><span class="input" style="padding:0px; margin:0px">dynamic</span></span>&nbsp;类型表达式的操作进行解析或类型检查，只是将有关该变量编译到类型&nbsp;<span style="padding:0px; margin:0px"><span class="input" style="padding:0px; margin:0px">object</span></span>&nbsp;的变量中以及有关它的操作信息打包在一起，在运行时再解释运行。像下面的代码：</span></p>
<div class="cnblogs_code" style="padding:0px; margin:0px">
<pre style="padding:0px; margin-top:0px; margin-bottom:1em; font-family:'Courier New',monospace; width:954.359375px; overflow:auto; background-color:rgb(247,247,247)"><div style="padding:0px; margin:0px"><span style="padding:0px; margin:0px; color:rgb(0,0,0)"><span style="padding:0px; margin:0px; background-color:rgb(245,245,245); font-family:'Courier New'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dynamic objDynamic = objDynamic &#43; 1;//编译通过<br style="padding:0px; margin:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object objObject = objObject &#43; 1;//编译不通过</span></span></div></pre>
</div>
<p style="padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px">
原因就是编译器不对dynamic进行类型的检查，这也是两者最大的区别。&nbsp;</p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px">
　　dynamic关键字可以用于很多情况，比如<span id="xn21_910c4ab6f162993e4ea253b144b612a2" class="sentence" style="padding:0px; margin:0px">在声明中，作为属性、字段、索引器、参数、返回&#20540;或类型约束的类型等等，用法和其他基本类型的关键字很类&#20284;，更详细可以看<a href="http://msdn.microsoft.com/zh-cn/library/dd264741.aspx" style="padding:0px; margin:0px; color:rgb(37,110,177); text-decoration:none"><span style="color:#525252; padding:0px; margin:0px">Dynamic（C#参考）</span></a></span></p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px">
<span class="sentence" style="padding:0px; margin:0px">&nbsp;</span><span class="sentence" style="padding:0px; margin:0px">　　为了实现一个像上面JavaScript中的功能，在C#4.0中新添加了一个ExpandoObject对象，它位于程序集<span style="padding:0px; margin:0px">：</span>&nbsp;&nbsp;<span style="padding:0px; margin:0px">System.Core</span>（在
 System.Core.dll 中）命名空间<span style="padding:0px; margin:0px">：</span>&nbsp;&nbsp;<a href="http://msdn.microsoft.com/zh-cn/library/system.dynamic.aspx" style="padding:0px; margin:0px; color:rgb(37,110,177); text-decoration:none"><span style="color:#525252; padding:0px; margin:0px">System.Dynamic</span></a>&nbsp;中，他的用法和我上面举得JavaScript的用法很类&#20284;，下面偷懒一下，借用用msdn的一个例子：</span></p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px">
&nbsp;</p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px">
<span class="sentence" style="padding:0px; margin:0px">&nbsp;</span>&nbsp;</p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px">
　　</p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px">
&nbsp;</p>
<div class="cnblogs_code" style="padding:0px; margin:0px"><img id="code_img_closed_b774daee-0a04-40b6-9a2b-7cdbc8a8b4a8" class="code_img_closed" src="http://www.soaspx.com/uploads/allimg/100822/110TW1X-0.gif" alt="" style="padding:0px; margin:0px; border:none"><span class="cnblogs_code_collapse" style="padding:0px; margin:0px">代码</span>
<div id="cnblogs_code_open_b774daee-0a04-40b6-9a2b-7cdbc8a8b4a8" class="cnblogs_code_hide" style="padding:0px; margin:0px">
<pre style="padding:0px; margin-top:0px; margin-bottom:1em; font-family:'Courier New',monospace; width:954.359375px; overflow:auto; background-color:rgb(247,247,247)"><div style="padding:0px; margin:0px"><span style="padding:0px; margin:0px; color:rgb(0,0,0)">    </span><span style="padding:0px; margin:0px; color:rgb(0,0,255)">static</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)"> </span><span style="padding:0px; margin:0px; color:rgb(0,0,255)">void</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)"> Main(</span><span style="padding:0px; margin:0px; color:rgb(0,0,255)">string</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">[] args)<br style="padding:0px; margin:0px">    {<br style="padding:0px; margin:0px">        dynamic employee, manager;<br style="padding:0px; margin:0px"><br style="padding:0px; margin:0px">        employee </span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">=</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)"> </span><span style="padding:0px; margin:0px; color:rgb(0,0,255)">new</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)"> ExpandoObject();//配合dynamic创建一个ExpandoObject对象</span></div><div style="padding:0px; margin:0px"><span style="padding:0px; margin:0px; color:rgb(0,0,0)">　　　　//给这个对象自定义一些属性<br style="padding:0px; margin:0px">        employee.Name </span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">=</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)"> </span><span style="padding:0px; margin:0px; color:rgb(128,0,0)">&quot;</span><span style="padding:0px; margin:0px; color:rgb(128,0,0)">John Smith</span><span style="padding:0px; margin:0px; color:rgb(128,0,0)">&quot;</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">;<br style="padding:0px; margin:0px">        employee.Age </span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">=</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)"> </span><span style="padding:0px; margin:0px; color:rgb(128,0,128)">33</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">;<br style="padding:0px; margin:0px"><br style="padding:0px; margin:0px">        manager </span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">=</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)"> </span><span style="padding:0px; margin:0px; color:rgb(0,0,255)">new</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)"> ExpandoObject();<br style="padding:0px; margin:0px">        manager.Name </span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">=</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)"> </span><span style="padding:0px; margin:0px; color:rgb(128,0,0)">&quot;</span><span style="padding:0px; margin:0px; color:rgb(128,0,0)">Allison Brown</span><span style="padding:0px; margin:0px; color:rgb(128,0,0)">&quot;</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">;<br style="padding:0px; margin:0px">        manager.Age </span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">=</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)"> </span><span style="padding:0px; margin:0px; color:rgb(128,0,128)">42</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">;<br style="padding:0px; margin:0px">        manager.TeamSize </span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">=</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)"> </span><span style="padding:0px; margin:0px; color:rgb(128,0,128)">10</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">;<br style="padding:0px; margin:0px"><br style="padding:0px; margin:0px">        WritePerson(manager);<br style="padding:0px; margin:0px">        WritePerson(employee);<br style="padding:0px; margin:0px">    }<br style="padding:0px; margin:0px">    </span><span style="padding:0px; margin:0px; color:rgb(0,0,255)">private</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)"> </span><span style="padding:0px; margin:0px; color:rgb(0,0,255)">static</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)"> </span><span style="padding:0px; margin:0px; color:rgb(0,0,255)">void</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)"> WritePerson(dynamic person)<br style="padding:0px; margin:0px">    {<br style="padding:0px; margin:0px">        Console.WriteLine(</span><span style="padding:0px; margin:0px; color:rgb(128,0,0)">&quot;</span><span style="padding:0px; margin:0px; color:rgb(128,0,0)">{0} is {1} years old.</span><span style="padding:0px; margin:0px; color:rgb(128,0,0)">&quot;</span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">,<br style="padding:0px; margin:0px">                          person.Name, person.Age);//调用属性</span></div><div style="padding:0px; margin:0px"><span style="padding:0px; margin:0px; color:rgb(0,0,0)">        </span><span style="padding:0px; margin:0px; color:rgb(0,128,0)">//</span><span style="padding:0px; margin:0px; color:rgb(0,128,0)"> The following statement causes an exception<br style="padding:0px; margin:0px">        </span><span style="padding:0px; margin:0px; color:rgb(0,128,0)">//</span><span style="padding:0px; margin:0px; color:rgb(0,128,0)"> if you pass the employee object.<br style="padding:0px; margin:0px">        </span><span style="padding:0px; margin:0px; color:rgb(0,128,0)">//</span><span style="padding:0px; margin:0px; color:rgb(0,128,0)"> Console.WriteLine(&quot;Manages {0} people&quot;, person.TeamSize);</span><span style="padding:0px; margin:0px; color:rgb(0,128,0)"><br style="padding:0px; margin:0px"></span><span style="padding:0px; margin:0px; color:rgb(0,0,0)">    }</span></div><div style="padding:0px; margin:0px"><span style="padding:0px; margin:0px; color:rgb(0,0,0)">//输出&quot;John Smith is 33 years old.&quot;;</span></div><div style="padding:0px; margin:0px"><span style="padding:0px; margin:0px; color:rgb(0,0,0)">//输出&quot;Allison Brown is 10 years old.&quot;;</span></div></pre>
</div>
</div>
<p style="padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px">
&nbsp;</p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px">
&nbsp;</p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px">
和JavaScript中的用法十分类&#20284;，从今以后，在像要序列化一些信息返回客户端等简单传&#20540;的情况下，我们也可以像JavaScript一样很方便的使用这种方法了，由于很少写文章，加上知识浅薄，文章写得乱成一团，希望大家原谅，这篇文章只是起到抛砖引玉的作用，更多的信息可以查看MSDN的技术文档<a href="http://msdn.microsoft.com/zh-cn/library/system.dynamic.expandoobject.aspx" style="padding:0px; margin:0px; color:rgb(37,110,177); text-decoration:none"><span style="color:#525252; padding:0px; margin:0px">ExpandoObject
 类</span></a>和<a href="http://msdn.microsoft.com/zh-cn/library/dd264741.aspx" style="padding:0px; margin:0px; color:rgb(37,110,177); text-decoration:none"><span style="color:#525252; padding:0px; margin:0px">dynamic（C# 参考）</span></a></p>
</td>
</tr>
</tbody>
</table>
<p style="border-width:0px; padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:8px; list-style:none; text-indent:2em; color:rgb(51,51,51); font-family:宋体; font-size:14px; line-height:28px">
</p>

            <div>
                作者：xiaogui340 发表于2013/7/16 9:57:27 <a href="http://blog.csdn.net/xiaogui340/article/details/9339483">原文链接</a>
            </div>
            <div>
            阅读：997 评论：0 <a href="http://blog.csdn.net/xiaogui340/article/details/9339483#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[转]Lock Monitor]]></title>
        <link>http://blog.csdn.net/xiaogui340/article/details/8931236</link>
        <guid>http://blog.csdn.net/xiaogui340/article/details/8931236</guid>
        <author>xiaogui340</author>
        <pubDate>2013/5/15 16:44:26</pubDate>
        <description><![CDATA[
            
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
多线程操作的时候，为防止死锁，我们经常采用加Lock的方式解决，下面就谈一下Lock的具体运用和Lock可以用什么来替换</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
首先，看代码:</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
<span style="margin:0px; padding:0px; line-height:1.5; white-space:pre"></span>private static object syncroot = new object();</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
<span style="margin:0px; padding:0px; line-height:1.5; white-space:pre"></span>public static void Gets()</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
<span style="margin:0px; padding:0px; line-height:1.5; white-space:pre"></span>{</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
<span style="margin:0px; padding:0px; line-height:1.5; white-space:pre"></span>lock(syncroot)</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
<span style="margin:0px; padding:0px; line-height:1.5; white-space:pre"></span>{</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
<span style="margin:0px; padding:0px; line-height:1.5; white-space:pre"></span>Console.WriteLine(&quot;sbzgw&quot;);</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
<span style="margin:0px; padding:0px; line-height:1.5; white-space:pre"></span>Console.Read();&nbsp;</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
<span style="margin:0px; padding:0px; line-height:1.5; white-space:pre"></span>}</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
<span style="margin:0px; padding:0px; line-height:1.5; white-space:pre"></span>}&nbsp;</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
上段代码中，是Lock的典型应用</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
但是，在使用Lock时候有一些注意事项:</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
1,Lock里面的参数必须是引用类型，不能是&#20540;类型，Lock是对象锁，否则会产生一个不同的引用类型对象,简单介绍下&#20540;类型和引用类型</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
&#20540;类型，参数传递的时候，把自己的&#20540;给别人复制一份，无论复制的&#20540;如何改变，不会影响原来被复制的&#20540;</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
引用类型，参数传递的时候，传递的内存地址，如果复制的&#20540;改变，原来的&#20540;也为改变&nbsp;</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
2, 如果类类型是public的，最好不要用Lock，因为别人都可以用，别人不知道你锁定了,如果他new一个，并且上锁，你也Lock，这时候就造成死锁了</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
3,如果MyType是public,不要Lock</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
4,永远不要Lock一个字符串</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
&nbsp;</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
Lock在实际运用中可以用Monitor(监视器)来替换&nbsp;</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
Lock更简洁，使用更方便，可以确保即使发生异常，也可以释放基础监视器，实际上，Lock就是用Monitor来实现的，调用了finally释放资源</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
推荐实际使用中用Lock</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
Monitor是一个静态类，不能实例化，只能调用其中的方法&nbsp;</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
上面的代码可以改成下面的写法</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
<span style="margin:0px; padding:0px; line-height:1.5; white-space:pre"></span>//Monitor注意要配对使用</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
<span style="margin:0px; padding:0px; line-height:1.5; white-space:pre"></span>private static object syncroot = new object();</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
<span style="margin:0px; padding:0px; line-height:1.5; white-space:pre"></span>public static void Get2()</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
<span style="margin:0px; padding:0px; line-height:1.5; white-space:pre"></span>{</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
<span style="margin:0px; padding:0px; line-height:1.5; white-space:pre"></span>Monitor.Enter(syncroot);</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
<span style="margin:0px; padding:0px; line-height:1.5; white-space:pre"></span>try</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
<span style="margin:0px; padding:0px; line-height:1.5; white-space:pre"></span>{</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
<span style="margin:0px; padding:0px; line-height:1.5; white-space:pre"></span>Console.WriteLine(&quot;sbwgy&quot;);</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
<span style="margin:0px; padding:0px; line-height:1.5; white-space:pre"></span>Monitor.Pulse(syncroot);</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
<span style="margin:0px; padding:0px; line-height:1.5; white-space:pre"></span>}</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
<span style="margin:0px; padding:0px; line-height:1.5; white-space:pre"></span>finally</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
<span style="margin:0px; padding:0px; line-height:1.5; white-space:pre"></span>{</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
<span style="margin:0px; padding:0px; line-height:1.5; white-space:pre"></span>Monitor.Exit(syncroot);</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
<span style="margin:0px; padding:0px; line-height:1.5; white-space:pre"></span>}</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
<span style="margin:0px; padding:0px; line-height:1.5; white-space:pre"></span>Console.Read();&nbsp;</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
<span style="margin:0px; padding:0px; line-height:1.5; white-space:pre"></span>}&nbsp;</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
这就是Monitor替换Lock的写法</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:19px; font-size:13px; font-family:Verdana,Arial,Helvetica,sans-serif; background-color:rgb(254,254,242)">
其实，感觉Lock和Monitor的关系很想.net里面的有个关键字Using,其实Using就是自动执行了Dispose方法，让我们不用担心资源的回收了，但是，不好的地方就在于，长期这么使用，或者一开始就这么用的话，我们可能并不清楚Using都替我们干了些什么事情&nbsp;</p>

            <div>
                作者：xiaogui340 发表于2013/5/15 16:44:26 <a href="http://blog.csdn.net/xiaogui340/article/details/8931236">原文链接</a>
            </div>
            <div>
            阅读：495 评论：0 <a href="http://blog.csdn.net/xiaogui340/article/details/8931236#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[转].NET中的三种Timer的区别和用法(转)]]></title>
        <link>http://blog.csdn.net/xiaogui340/article/details/8909053</link>
        <guid>http://blog.csdn.net/xiaogui340/article/details/8909053</guid>
        <author>xiaogui340</author>
        <pubDate>2013/5/10 9:13:49</pubDate>
        <description><![CDATA[
            
<div class="postBody" style="margin:0px; padding:5px 2px 5px 5px; line-height:1.5; color:rgb(57,57,57); border-bottom-width:1px; border-bottom-style:solid; border-bottom-color:black; font-size:14px; font-family:verdana,'ms song',Arial,Helvetica,sans-serif; background-color:rgb(250,247,239)">
<div id="cnblogs_post_body" style="margin:0px; padding:0px; word-break:normal!important">
<span style="margin:0px; padding:0px; font-family:宋体; line-height:25px">最近正好做一个WEB中定期执行的程序，而.NET中有3个不同的定时器。所以正好研究研究。这3个定时器分别是：&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
//1.实现按用户定义的时间间隔引发事件的计时器。此计时器最宜用于 Windows 窗体应用程序中，并且必须在窗口中使用。&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
System.Windows.Forms.Timer&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
// 2.提供以指定的时间间隔执行方法的机制。无法继承此类。&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
System.Threading.Timer&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
//3.在应用程序中生成定期事件。&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
System.Timers.Timer&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
这三个定时器位于不同的命名空间内，上面大概介绍了3个定时器的用途，其中第一个是只能在Windows窗体中使用的控件。在.NET1.1里面，第3个System.Timers.Timer，也是可以拖拽使用，而.NET2.0开始取消了，只能手动编写代码。而后2个没有限制制。下面通过具体的列子来看3个Timer的使用和区别，网上谈的很多，但基本都没有代码。&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
一 System.Windows.Forms.Timer&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
#region System.Windows.Forms.Timer&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
public partial class Form1 : Form&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
{&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
public Form1()&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
{&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
InitializeComponent();&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
}&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
int num = 0;&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
private void Form_Timer_Tick(object sender, EventArgs e)&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
{&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
label1.Text = (&#43;&#43;num).ToString();&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
Thread.Sleep(3000);&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
}&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
private void button1_Click(object sender, EventArgs e)&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
{&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
Form_Timer.Start();&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
}&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
private void button2_Click(object sender, EventArgs e)&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
{&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
Form_Timer.Stop();&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
}&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
}&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
#endregion&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
上面这个是一个很简单的功能，在Form窗体上拖了一个System.Windows.Forms.Timer控件名字为Form_Timer，在属性窗中把Enable属性设置为Ture，Interval是定时器的间隔时间。双击这个控件就可以看到 Form_Timer_Tick方法。在这个方法中，我们让她不停的加一个数字并显示在窗体上，2个按钮提供了对计时器的控制功能。&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
执行的时候你去点击其他窗体在回来，你会发现我们的窗体失去响应了。因为我们这里使用Thread.Sleep(3000);让当前线程挂起，而UI失去相应，说明了这里执行时候采用的是单线程。也就是执行定时器的线程就是UI线程。&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
Timer 用于以用户定义的事件间隔触发事件。Windows 计时器是为单线程环境设计的，其中，UI 线程用于执行处理。它要求用户代码有一个可用的 UI 消息泵，而且总是在同一个线程中操作，或者将调用封送到另一个线程。&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
在Timer内部定义的了一个Tick事件，我们前面双击这个控件时实际是增加了一行代码&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
this.Form_Timer.Tick &#43;= new System.EventHandler(this.Form_Timer_Tick);&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
这个应该明白，不明白的可以看我BLOG中有关委托和事件的文章。然后Windows将这个定时器与调用线程关联(UI线程)。当定时器触发时，Windows把一个定时器消息插入到线程消息队列中。调用线程执行一个消息泵提取消息，然后发送到回调方法中（这里的Form_Timer_Tick方法）。而这些都是单线程进行了，所以在执行回调方法时UI会假死。所以使用这个控件不宜执行计算受限或IO受限的代码，因为这样容易导致界面假死，而应该使用多线程调用的Timer。另外要注意的是这个控件时间精度不高，精度限定为 55 毫秒。我们把Interval设置为20ms，然后在start和stop方法中记录当前时，并计算出运行时间：&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
从上面图可以看到程序执行了7.8S也就是 7800ms,而间隔时间是20ms，也就是最后显示数字应该是390左右，但只有250，显然是不准确的，不过按MSDN说的55ms的精度，7800ms应该只执行了140多次或更少。不知道这里是不是理解有问题。&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
二 System.Timers.Timer&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
接下来就看下另一个Timer，我们用他来改写上面的程序&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
#region System.Windows.Forms.Timer&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
public partial class Form1 : Form&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
{&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
public Form1()&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
{&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
InitializeComponent();&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
}&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
int num = 0;&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
DateTime time1 = new DateTime();&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
DateTime time2 = new DateTime();&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
//定义Timer&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
System.Timers.Timer Timers_Timer = new System.Timers.Timer();&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
private void button1_Click(object sender, EventArgs e)&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
{&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
//手动设置Timer，开始执行&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
Timers_Timer.Interval = 20;&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
Timers_Timer.Enabled = true;&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
Timers_Timer.Elapsed &#43;= new System.Timers.ElapsedEventHandler(Timers_Timer_Elapsed);&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
time1 = DateTime.Now;&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
}&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
void Timers_Timer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
{&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
label1.Text = Convert.ToString((&#43;&#43;num)); //显示到lable&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
Thread.Sleep(3000);&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
}&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
private void button2_Click(object sender, EventArgs e)&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
{&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
//停止执行&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
Timers_Timer.Enabled = false;&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
time2 = DateTime.Now;&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
MessageBox.Show(Convert.ToString(time2-time1));&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
}&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
}&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
#endregion&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
我们可以看到这个代码和前面使用Form.Timer的基本相同，不同的是我们是手动定义的对象，而不是通过拉控件。他也有Interval ，Enabled 等属性，作用和第一是一样的。不同的是他的事件名为Elapsed ，但是和上面的Tick一样，绑定一个委托的方法。只是这里我们是手动完成的。另外不同之处是Form.Timer我们可以用Stop和Start方法控制，而这里是通过Enable属性控制。但实际上也可以用Stop和Start方法，内部也是通过他自己的Enable来控制的。&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
</span>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px">最大的不同就是上面的代码在调试时会报错，提示你&quot;线程间操作无效: 从不是创建控件“label1”的线程访问它。&quot;但如果你不调试直接运行是OK的，而且运行时你去拖动窗体会发现没有出现假死。从这里我们就可以知道这里的Timer的创建线程和执行线程不是同一个线程。也就是使用了多线程。Timer的创建线程是UI线程，而执行线程是TheardPool中的线程，所以不会假死，但调试的时候会报错，因为非控件的创建线程不能操作控件。但你可以直接运行，这里是VS05做了手脚。解决办法很多，用delegate.BeginInvoke()等等。这里介绍特有的一种方法，设置Timer的SynchronizingObject属性，Timers_Timer.SynchronizingObject
 = label1;这样的话，我们的话，调试运行时就不会报错了，但是设置了这个属性Timer就编程单线程调用了，就基本和第一个完全一样了。</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px">Timer 是为在多线程环境中用于辅助线程而设计的。服务器计时器可以在线程间移动来处理引发的 Elapsed 事件，这样就可以比 Windows 计时器更精确地按时引发事件。Elapsed 事件在 ThreadPool 线程上引发。如果 Elapsed 事件的处理时间比 Interval 长，在另一个 ThreadPool 线程上将会再次引发此事件。因此，事件处理程序应当是可重入的。&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
另外和前面不同的现象是每次加1后并没有停止3秒在显示。而是继续显示，只是速度稍慢。因为我们设置间隔为20ms，而执行时间为3s，所以会在20ms后在另一个线程中继续执行，而当前线程被挂起而已。关于计时器的精度，取消3s的挂起，发现结果和第一个基本一致。&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
三 System.Threading.Timer&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
继续用这个对象改造程序。&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
#region System.Windows.Forms.Timer&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
public partial class Form1 : Form&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
{&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
public Form1()&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
{&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
InitializeComponent();&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
}&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
int num = 0;&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
DateTime time1 = new DateTime();&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
DateTime time2 = new DateTime();&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
System.Threading.Timer Thread_Time;&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
private void button1_Click(object sender, EventArgs e)&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
{&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
//启动&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
Thread_Time = new System.Threading.Timer(Thread_Timer_Method,null,0,20);&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
time1 = DateTime.Now;&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
}&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
void Thread_Timer_Method(object o)&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
{&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
label1.Text = Convert.ToString((&#43;&#43;num));&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
System.Threading.Thread.Sleep(3000);&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
}&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
private void button2_Click(object sender, EventArgs e)&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
{&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
//停止&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
Thread_Time.Dispose();&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
time2 = DateTime.Now;&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
MessageBox.Show(Convert.ToString(time2-time1));&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
}&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
}&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
#endregion&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
用Threading.Timer时的方法，和前面就不太相同了，所以的参数全部在构造函数中进行了设置，而且可以设置启动时间。而且没有提供start和stop方法来控制计时器。而且是以一种回调方法的方式实现，而不是通过事件来实现的。他们之间还是有区别的。&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
我们只有销毁掉对象来停止他。当你运行时，你会发现他和前面的Timers.Timer一样，是多线程的，主要表现在不会假死，调试运行报错。但跟让你奇怪的是，我们的代码竟然无法让她停止下来。调用了Dispose方法没有用。问题在那？然后有进行了测试，修改了间隔时间为100，200，500，1000，3000，4000。这几种情况。发现当间隔为500ms以上是基本马上就停止了。而间隔时间相对执行时间越短，继续执行的时间越长。这应该是在间隔时间小于执行时间时多个线程运行造成的。因为所有的线程不是同时停止的。间隔越短，线程越多，所以执行次数越多。&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
最后来看下这个对象另外一个特殊的地方。&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
static void Main()&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
{&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
Timer t = new Timer(Test,null,0,1000);&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
Console.ReadLine();&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
}&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
public static void Test(object o)&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
{&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
Console.WriteLine(&quot;nihao&quot;);&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
GC.Collect();&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
}&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
这段代码会输出什么结果呢？默认情况他只输出一次，就停止了。为什么呢？根据上面说的，当定义对象t,执行代码后，进行了强制垃圾回收，因为t在Main中没有其他引用，所以被回收掉了。但是如果我们吧编译器的”优化“项取消掉，在看看情况。程序进然一直在输出。为什么执行垃圾回收却没有被回收呢？因为这个禁用优化选项，t的声明周期被扩展到了方法结束。所以一直执行。&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
因为编译器默认是优化的，所以我们必须保证Timer对象一直被引用，而避免被垃圾回收。所以我们可以在编译器打开优化的情况下，在Main函数最后加上t=null保证回收前被引用，但你发现，这样是没用的。因为JIT编译器优化后会吧t=null直接删除，所以我们用t.Dispose(),就可以达到目的。在我们进行垃圾回收时，CLR发现t还有被引用，还没执行Dispose所以不会被回收。是以Threading.Timer有时候会出现运行一次就停止或者是销毁了还在运行的情况，而且和编译器优化也有关，所以使用时要注意。&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
最后看下MSDN的描述： 只要在使用 Timer，就必须保留对它的引用。对于任何托管对象，如果没有对 Timer 的引用，计时器会被垃圾回收。即使 Timer 仍处在活动状态，也会被回收。当不再需要计时器时，请使用 Dispose 方法释放计时器持有的资源。如果希望在计时器被释放时接收到信号，请使用接受 WaitHandle 的 Dispose(WaitHandle) 方法重载。计时器已被释放后，WaitHandle 便终止。&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
总结：&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
System.Threading.Timer 是一个简单的轻量计时器，它使用回调方法并由线程池线程提供服务。不建议将其用于 Windows 窗体，因为其回调不在用户界面线程上进行。System.Windows.Forms.Timer 是用于 Windows 窗体的更佳选择。要获取基于服务器的计时器功能，可以考虑使用 System.Timers.Timer，它可以引发事件并具有其他功能。&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
在《CLR Via C#》中讲多线程时有提到这3个计时器，但作者说System.Timers.Timer是对System.Threading.Timer的报装，不推荐使用，但是在我的WEB项目中的Application_Start中我还是使用的这个而不是Threading.Timer，因为使用Threading.Timer时只执行了一次就不在执行了。&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
对于计时器在B/S结构中的使用就复杂一些，一般我们把计时器放在Application_OnStart中，这样全局维护一个计时器，可以进行定期备份数据库，定期维护用户等操作，而且方法写作静态的，以免被垃圾回收。而不建议在一般的aspx页面中使用，因为服务器端的定时器对用户这样意义不大，完全可以使用JS代替。而且这个页面的每个请求都可能引入一个新的定时器，导致系统崩溃。另外，定时器是ASP.NET进程，IIS有关，所以对用重要的执行任务，还是建议写成服务或独立程序放在服务器上执行好了。&nbsp;<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
<br style="margin:0px; padding:0px; border-width:0px; list-style:none">
为什么ASP.NET的Application_OnStart中使用Threading.Timer不能循环执行还不清楚，难道是GC回收或是IIS线程的问题？</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px"><br>
</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px">转自http://www.cnblogs.com/shang20017/archive/2009/03/16/1413798.html</p>
</div>
</div>

            <div>
                作者：xiaogui340 发表于2013/5/10 9:13:49 <a href="http://blog.csdn.net/xiaogui340/article/details/8909053">原文链接</a>
            </div>
            <div>
            阅读：163 评论：0 <a href="http://blog.csdn.net/xiaogui340/article/details/8909053#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[转]C#调用Web Service时的身份验证]]></title>
        <link>http://blog.csdn.net/xiaogui340/article/details/8775861</link>
        <guid>http://blog.csdn.net/xiaogui340/article/details/8775861</guid>
        <author>xiaogui340</author>
        <pubDate>2013/4/9 9:21:25</pubDate>
        <description><![CDATA[
            
<div id="topicList" style="font-family:Verdana,Geneva,Arial,Helvetica,sans-serif; font-size:13px; line-height:19px">
<div id="topics">
<div class="post" style="border:2px solid rgb(220,220,220)">
<div class="postBody">在项目开发，我们经常会使用WebService，但在使用WebService时我们经常会考虑以下问题：怎么防止别人访问我的WebService？从哪里引用我的WebService？对于第一个问题，就涉及到了WebService是安全问题，因为我们提供的WebService不是允许所有人能引用 的，可能只允许本公司或者是通过授权的人才能使用的。那怎么防止非法用户访问呢？很容易想到通过一组用户名与密码来防止非法用户的调用 。<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在System.Net中提供了一个NetworkCredential，通过它我们可以在网络中提供一个凭证，只有获得该凭证的用户才能访问相应的服务的权限。在这里我们也使用NetworkCredential。在NetworkCredential中，我们通过提供WebService发布所在的服务器名称，以及登录服务器并调用该WebService的用户名及密码（在IIS中配置）。<br>
在调用WebService时设置其Credential属性，把上面得到的Credential凭证赋&#20540;给它，这样只有使用提供的用户名及密码才能调用WebService服务了而其他用户则无法访问，这样就能能满足防止WebService被别人调用了。<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 至于主机名，用户名及密码，对于B/S可以通过webconfig来配置，对于C/S可以使用应用程序配置文件。这样就能灵活地配置了。<br>
如下以C/S为例来说明，首先我们提供一个服务器网络凭证，然后通过WebRequest来验证连接是否成功。当然了，为了保存用户名与密码等的安全，可以对其进行加密等手段来保证其安全。<br>
<br>
以下是主要源代码：
<div class="cnblogs_code" style="background-color:rgb(245,245,245); font-family:'Courier New'; font-size:12px; border:1px solid rgb(204,204,204); padding:5px; overflow:auto; margin:5px 0px">
<div class="cnblogs_code_toolbar" style="margin-top:5px"><span class="cnblogs_code_copy" style="line-height:1.5; padding-right:5px"><a href="" title="复制代码" style="color:navy; text-decoration:initial; border:none!important"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="border:none!important"></a></span></div>
<img id="Code_Open_Image_230625" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedBlockStart.gif" width="11" height="16" alt="" style="border:0px; display:inline"><span id="Code_Open_Text_230625" style="line-height:1.5; display:inline"><br>
<span style="line-height:1.5; color:rgb(0,128,128)">&nbsp;1</span><img id="Codehighlighter1_8_96_Open_Image" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedBlockStart.gif" alt="" style="border:0px"><span style="line-height:1.5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="Codehighlighter1_8_96_Open_Text" style="line-height:1.5"><span style="line-height:1.5; color:rgb(128,128,128)">///</span><span style="line-height:1.5; color:rgb(0,128,0)">&nbsp;</span><span style="line-height:1.5; color:rgb(128,128,128)">&lt;summary&gt;</span><span style="line-height:1.5; color:rgb(0,128,0)"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">&nbsp;2</span><span style="line-height:1.5; color:rgb(0,128,0)"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(128,128,128)">///</span><span style="line-height:1.5; color:rgb(0,128,0)">&nbsp;服务器网络凭证<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">&nbsp;3</span><span style="line-height:1.5; color:rgb(0,128,0)"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(128,128,128)">///</span><span style="line-height:1.5; color:rgb(0,128,0)">&nbsp;</span><span style="line-height:1.5; color:rgb(128,128,128)">&lt;/summary&gt;</span><span style="line-height:1.5; color:rgb(0,128,0)"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">&nbsp;4</span><span style="line-height:1.5; color:rgb(0,128,0)"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedBlockEnd.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(128,128,128)">///</span><span style="line-height:1.5; color:rgb(0,128,0)">&nbsp;</span><span style="line-height:1.5; color:rgb(128,128,128)">&lt;returns&gt;&lt;/returns&gt;</span><span style="line-height:1.5; color:rgb(128,128,128)"></span></span><br>
<span style="line-height:1.5; color:rgb(0,128,128)">&nbsp;5</span><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/None.gif" style="border:0px"><span style="line-height:1.5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">public</span><span style="line-height:1.5">&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">static</span><span style="line-height:1.5">&nbsp;NetworkCredential&nbsp;MyCred()<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">&nbsp;6</span><span style="line-height:1.5"><img id="Codehighlighter1_153_656_Open_Image" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedBlockStart.gif" alt="" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="Codehighlighter1_153_656_Open_Text" style="line-height:1.5"><span style="line-height:1.5">{<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">&nbsp;7</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">string</span><span style="line-height:1.5">&nbsp;loginUser&nbsp;</span><span style="line-height:1.5">=</span><span style="line-height:1.5">&nbsp;Properties.Settings.Default.UserName;</span><span style="line-height:1.5; color:rgb(0,128,0)">//</span><span style="line-height:1.5; color:rgb(0,128,0)">用户名</span><span style="line-height:1.5; color:rgb(0,128,0)"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">&nbsp;8</span><span style="line-height:1.5; color:rgb(0,128,0)"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px"></span><span style="line-height:1.5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">string</span><span style="line-height:1.5">&nbsp;loginPSW&nbsp;</span><span style="line-height:1.5">=</span><span style="line-height:1.5">&nbsp;Properties.Settings.Default.UserPSW;</span><span style="line-height:1.5; color:rgb(0,128,0)">//</span><span style="line-height:1.5; color:rgb(0,128,0)">密码</span><span style="line-height:1.5; color:rgb(0,128,0)"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">&nbsp;9</span><span style="line-height:1.5; color:rgb(0,128,0)"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px"></span><span style="line-height:1.5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">string</span><span style="line-height:1.5">&nbsp;loginHost&nbsp;</span><span style="line-height:1.5">=</span><span style="line-height:1.5">&nbsp;Properties.Settings.Default.HostName;</span><span style="line-height:1.5; color:rgb(0,128,0)">//</span><span style="line-height:1.5; color:rgb(0,128,0)">主机名，可以是IP地址，也可以服务器名称</span><span style="line-height:1.5; color:rgb(0,128,0)"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">10</span><span style="line-height:1.5; color:rgb(0,128,0)"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px"></span><span style="line-height:1.5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NetworkCredential&nbsp;myCred&nbsp;</span><span style="line-height:1.5">=</span><span style="line-height:1.5">&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">new</span><span style="line-height:1.5">&nbsp;NetworkCredential(loginUser,loginPSW,&nbsp;loginHost);<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">11</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(0,128,0)">//</span><span style="line-height:1.5; color:rgb(0,128,0)">NetworkCredential&nbsp;myCred&nbsp;=&nbsp;new&nbsp;NetworkCredential(&quot;username&quot;,&nbsp;&quot;123456&quot;,&nbsp;&quot;yourip&quot;);</span><span style="line-height:1.5; color:rgb(0,128,0)">//</span><span style="line-height:1.5; color:rgb(0,128,0)">&quot;username&quot;,&nbsp;&quot;123456&quot;,&nbsp;&quot;yourservername&quot;</span><span style="line-height:1.5; color:rgb(0,128,0)"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">12</span><span style="line-height:1.5; color:rgb(0,128,0)"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px"></span><span style="line-height:1.5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">return</span><span style="line-height:1.5">&nbsp;myCred;<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">13</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedBlockEnd.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></span><span style="line-height:1.5"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">14</span><span style="line-height:1.5"><img id="Codehighlighter1_665_829_Open_Image" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedBlockStart.gif" alt="" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="Codehighlighter1_665_829_Open_Text" style="line-height:1.5"><span style="line-height:1.5; color:rgb(128,128,128)">///</span><span style="line-height:1.5; color:rgb(0,128,0)">&nbsp;</span><span style="line-height:1.5; color:rgb(128,128,128)">&lt;summary&gt;</span><span style="line-height:1.5; color:rgb(0,128,0)"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">15</span><span style="line-height:1.5; color:rgb(0,128,0)"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(128,128,128)">///</span><span style="line-height:1.5; color:rgb(0,128,0)">&nbsp;验证是否成功连接到服务器，若连接成功，则返回TRUE<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">16</span><span style="line-height:1.5; color:rgb(0,128,0)"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(128,128,128)">///</span><span style="line-height:1.5; color:rgb(0,128,0)">&nbsp;</span><span style="line-height:1.5; color:rgb(128,128,128)">&lt;/summary&gt;</span><span style="line-height:1.5; color:rgb(0,128,0)"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">17</span><span style="line-height:1.5; color:rgb(0,128,0)"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(128,128,128)">///</span><span style="line-height:1.5; color:rgb(0,128,0)">&nbsp;</span><span style="line-height:1.5; color:rgb(128,128,128)">&lt;param&nbsp;name=&quot;url&quot;&gt;</span><span style="line-height:1.5; color:rgb(0,128,0)">服务器WebService&nbsp;URL</span><span style="line-height:1.5; color:rgb(128,128,128)">&lt;/param&gt;</span><span style="line-height:1.5; color:rgb(0,128,0)"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">18</span><span style="line-height:1.5; color:rgb(0,128,0)"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedBlockEnd.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(128,128,128)">///</span><span style="line-height:1.5; color:rgb(0,128,0)">&nbsp;</span><span style="line-height:1.5; color:rgb(128,128,128)">&lt;returns&gt;&lt;/returns&gt;</span><span style="line-height:1.5; color:rgb(128,128,128)"></span></span><br>
<span style="line-height:1.5; color:rgb(0,128,128)">19</span><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/None.gif" style="border:0px"><span style="line-height:1.5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">public</span><span style="line-height:1.5">&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">static</span><span style="line-height:1.5">&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">bool</span><span style="line-height:1.5">&nbsp;Credential(</span><span style="line-height:1.5; color:rgb(0,0,255)">string</span><span style="line-height:1.5">&nbsp;url)<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">20</span><span style="line-height:1.5"><img id="Codehighlighter1_887_2021_Open_Image" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedBlockStart.gif" alt="" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="Codehighlighter1_887_2021_Open_Text" style="line-height:1.5"><span style="line-height:1.5">{<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">21</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(0,128,0)">//</span><span style="line-height:1.5; color:rgb(0,128,0)">定义局部变量</span><span style="line-height:1.5; color:rgb(0,128,0)"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">22</span><span style="line-height:1.5; color:rgb(0,128,0)"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px"></span><span style="line-height:1.5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">string</span><span style="line-height:1.5">&nbsp;url&nbsp;</span><span style="line-height:1.5">=</span><span style="line-height:1.5">&nbsp;G_Url;</span><span style="line-height:1.5; color:rgb(0,128,0)">//</span><span style="line-height:1.5; color:rgb(0,128,0)">2009-02-25&nbsp;陈辉聪&nbsp;&nbsp;服务器验证只验证到机器</span><span style="line-height:1.5; color:rgb(0,128,0)"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">23</span><span style="line-height:1.5; color:rgb(0,128,0)"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px"></span><span style="line-height:1.5"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">24</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">try</span><span style="line-height:1.5"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">25</span><span style="line-height:1.5"><img id="Codehighlighter1_998_1386_Open_Image" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedSubBlockStart.gif" alt="" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="Codehighlighter1_998_1386_Open_Text" style="line-height:1.5"><span style="line-height:1.5">{<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">26</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">if</span><span style="line-height:1.5">&nbsp;(myWebResponse&nbsp;</span><span style="line-height:1.5">==</span><span style="line-height:1.5">&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">null</span><span style="line-height:1.5">)<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">27</span><span style="line-height:1.5"><img id="Codehighlighter1_1059_1372_Open_Image" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedSubBlockStart.gif" alt="" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="Codehighlighter1_1059_1372_Open_Text" style="line-height:1.5"><span style="line-height:1.5">{<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">28</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WebRequest&nbsp;myWebRequest&nbsp;</span><span style="line-height:1.5">=</span><span style="line-height:1.5">&nbsp;WebRequest.Create(url);</span><span style="line-height:1.5; color:rgb(0,128,0)">//</span><span style="line-height:1.5; color:rgb(0,128,0)">根据URL创建一个连接请求</span><span style="line-height:1.5; color:rgb(0,128,0)"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">29</span><span style="line-height:1.5; color:rgb(0,128,0)"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px"></span><span style="line-height:1.5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myWebRequest.Credentials&nbsp;</span><span style="line-height:1.5">=</span><span style="line-height:1.5">&nbsp;MyCred();</span><span style="line-height:1.5; color:rgb(0,128,0)">//</span><span style="line-height:1.5; color:rgb(0,128,0)">获取验证的凭证,这是最重要的一句</span><span style="line-height:1.5; color:rgb(0,128,0)"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">30</span><span style="line-height:1.5; color:rgb(0,128,0)"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px"></span><span style="line-height:1.5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myWebRequest.Timeout&nbsp;</span><span style="line-height:1.5">=</span><span style="line-height:1.5">&nbsp;</span><span style="line-height:1.5; color:rgb(128,0,128)">20000</span><span style="line-height:1.5">;</span><span style="line-height:1.5; color:rgb(0,128,0)">//</span><span style="line-height:1.5; color:rgb(0,128,0)">单位为毫秒</span><span style="line-height:1.5; color:rgb(0,128,0)"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">31</span><span style="line-height:1.5; color:rgb(0,128,0)"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px"></span><span style="line-height:1.5"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">32</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myWebResponse&nbsp;</span><span style="line-height:1.5">=</span><span style="line-height:1.5">&nbsp;myWebRequest.GetResponse();</span><span style="line-height:1.5; color:rgb(0,128,0)">//</span><span style="line-height:1.5; color:rgb(0,128,0)">返回连接成功时的信息</span><span style="line-height:1.5; color:rgb(0,128,0)"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">33</span><span style="line-height:1.5; color:rgb(0,128,0)"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedSubBlockEnd.gif" style="border:0px"></span><span style="line-height:1.5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></span><span style="line-height:1.5"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">34</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedSubBlockEnd.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></span><span style="line-height:1.5"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">35</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">catch</span><span style="line-height:1.5">&nbsp;(WebException&nbsp;wex)</span><span style="line-height:1.5; color:rgb(0,128,0)">//</span><span style="line-height:1.5; color:rgb(0,128,0)">无法连接到服务器，可能是因为服务器错误或用户名与密码错误</span><span style="line-height:1.5; color:rgb(0,128,0)"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">36</span><span style="line-height:1.5; color:rgb(0,128,0)"><img id="Codehighlighter1_1466_1680_Open_Image" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedSubBlockStart.gif" alt="" style="border:0px"></span><span style="line-height:1.5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="Codehighlighter1_1466_1680_Open_Text" style="line-height:1.5"><span style="line-height:1.5">{<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">37</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">if</span><span style="line-height:1.5">&nbsp;(myWebResponse&nbsp;</span><span style="line-height:1.5">!=</span><span style="line-height:1.5">&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">null</span><span style="line-height:1.5">)</span><span style="line-height:1.5; color:rgb(0,128,0)">//</span><span style="line-height:1.5; color:rgb(0,128,0)">毁销</span><span style="line-height:1.5; color:rgb(0,128,0)"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">38</span><span style="line-height:1.5; color:rgb(0,128,0)"><img id="Codehighlighter1_1531_1635_Open_Image" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedSubBlockStart.gif" alt="" style="border:0px"></span><span style="line-height:1.5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="Codehighlighter1_1531_1635_Open_Text" style="line-height:1.5"><span style="line-height:1.5">{<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">39</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myWebResponse.Close();<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">40</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myWebResponse&nbsp;</span><span style="line-height:1.5">=</span><span style="line-height:1.5">&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">null</span><span style="line-height:1.5">;<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">41</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedSubBlockEnd.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></span><span style="line-height:1.5"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">42</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">43</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">return</span><span style="line-height:1.5">&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">false</span><span style="line-height:1.5">;<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">44</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedSubBlockEnd.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></span><span style="line-height:1.5"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">45</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">catch</span><span style="line-height:1.5">&nbsp;(Exception&nbsp;ex)<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">46</span><span style="line-height:1.5"><img id="Codehighlighter1_1726_1937_Open_Image" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedSubBlockStart.gif" alt="" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="Codehighlighter1_1726_1937_Open_Text" style="line-height:1.5"><span style="line-height:1.5">{<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">47</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">if</span><span style="line-height:1.5">&nbsp;(myWebResponse&nbsp;</span><span style="line-height:1.5">!=</span><span style="line-height:1.5">&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">null</span><span style="line-height:1.5">)<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">48</span><span style="line-height:1.5"><img id="Codehighlighter1_1787_1891_Open_Image" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedSubBlockStart.gif" alt="" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="Codehighlighter1_1787_1891_Open_Text" style="line-height:1.5"><span style="line-height:1.5">{<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">49</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myWebResponse.Close();<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">50</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myWebResponse&nbsp;</span><span style="line-height:1.5">=</span><span style="line-height:1.5">&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">null</span><span style="line-height:1.5">;<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">51</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedSubBlockEnd.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></span><span style="line-height:1.5"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">52</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">53</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">return</span><span style="line-height:1.5">&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">false</span><span style="line-height:1.5">;<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">54</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">55</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedSubBlockEnd.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></span><span style="line-height:1.5"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">56</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">finally</span><span style="line-height:1.5"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">57</span><span style="line-height:1.5"><img id="Codehighlighter1_1970_1985_Open_Image" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedSubBlockStart.gif" alt="" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="Codehighlighter1_1970_1985_Open_Text" style="line-height:1.5"><span style="line-height:1.5">{<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">58</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedSubBlockEnd.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></span><span style="line-height:1.5"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">59</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">60</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">return</span><span style="line-height:1.5">&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">true</span><span style="line-height:1.5">;<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">61</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedBlockEnd.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></span><span style="line-height:1.5"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">62</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/None.gif" style="border:0px"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">63</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/None.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">private</span><span style="line-height:1.5">&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">static</span><span style="line-height:1.5">&nbsp;WS_Webasic.WS_Webasic&nbsp;webasic&nbsp;</span><span style="line-height:1.5">=</span><span style="line-height:1.5; color:rgb(0,0,255)">null</span><span style="line-height:1.5">;</span><span style="line-height:1.5; color:rgb(0,128,0)">//</span><span style="line-height:1.5; color:rgb(0,128,0)">实现华WS_Webasic.WS_Webasic&nbsp;</span><span style="line-height:1.5; color:rgb(0,128,0)"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">64</span><span style="line-height:1.5; color:rgb(0,128,0)"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/None.gif" style="border:0px"></span><span style="line-height:1.5"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">65</span><span style="line-height:1.5"><img id="Codehighlighter1_2118_2181_Open_Image" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedBlockStart.gif" alt="" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="Codehighlighter1_2118_2181_Open_Text" style="line-height:1.5"><span style="line-height:1.5; color:rgb(128,128,128)">///</span><span style="line-height:1.5; color:rgb(0,128,0)">&nbsp;</span><span style="line-height:1.5; color:rgb(128,128,128)">&lt;summary&gt;</span><span style="line-height:1.5; color:rgb(0,128,0)"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">66</span><span style="line-height:1.5; color:rgb(0,128,0)"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(128,128,128)">///</span><span style="line-height:1.5; color:rgb(0,128,0)">&nbsp;WS_Webasic初始化<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">67</span><span style="line-height:1.5; color:rgb(0,128,0)"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedBlockEnd.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(128,128,128)">///</span><span style="line-height:1.5; color:rgb(0,128,0)">&nbsp;</span><span style="line-height:1.5; color:rgb(128,128,128)">&lt;/summary&gt;</span><span style="line-height:1.5; color:rgb(128,128,128)"></span></span><br>
<span style="line-height:1.5; color:rgb(0,128,128)">68</span><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/None.gif" style="border:0px"><span style="line-height:1.5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">public</span><span style="line-height:1.5">&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">static</span><span style="line-height:1.5">&nbsp;WS_Webasic.WS_Webasic&nbsp;WS_Webasic<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">69</span><span style="line-height:1.5"><img id="Codehighlighter1_2244_2908_Open_Image" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedBlockStart.gif" alt="" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="Codehighlighter1_2244_2908_Open_Text" style="line-height:1.5"><span style="line-height:1.5">{<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">70</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">get</span><span style="line-height:1.5"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">71</span><span style="line-height:1.5"><img id="Codehighlighter1_2274_2898_Open_Image" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedSubBlockStart.gif" alt="" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="Codehighlighter1_2274_2898_Open_Text" style="line-height:1.5"><span style="line-height:1.5">{<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">72</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">if</span><span style="line-height:1.5">&nbsp;(webasic&nbsp;</span><span style="line-height:1.5">==</span><span style="line-height:1.5">&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">null</span><span style="line-height:1.5">)</span><span style="line-height:1.5; color:rgb(0,128,0)">//</span><span style="line-height:1.5; color:rgb(0,128,0)">若webasic&nbsp;为空，则重新实例化，这样可以减少验证的时间，提高效率</span><span style="line-height:1.5; color:rgb(0,128,0)"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">73</span><span style="line-height:1.5; color:rgb(0,128,0)"><img id="Codehighlighter1_2366_2852_Open_Image" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedSubBlockStart.gif" alt="" style="border:0px"></span><span style="line-height:1.5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="Codehighlighter1_2366_2852_Open_Text" style="line-height:1.5"><span style="line-height:1.5">{<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">74</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(0,128,0)">//</span><span style="line-height:1.5; color:rgb(0,128,0)">webasic&nbsp;=&nbsp;new&nbsp;ZEDI.WS_Webasic.WS_Webasic();<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">75</span><span style="line-height:1.5; color:rgb(0,128,0)"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(0,128,0)">//</span><span style="line-height:1.5; color:rgb(0,128,0)">wsBool&nbsp;=&nbsp;Credential(webasic.Url);</span><span style="line-height:1.5; color:rgb(0,128,0)">//</span><span style="line-height:1.5; color:rgb(0,128,0)">URL改为服务器地址&nbsp;2009-02-25&nbsp;陈辉聪&nbsp;chhuic@163.com</span><span style="line-height:1.5; color:rgb(0,128,0)"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">76</span><span style="line-height:1.5; color:rgb(0,128,0)"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px"></span><span style="line-height:1.5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wsBool&nbsp;</span><span style="line-height:1.5">=</span><span style="line-height:1.5">&nbsp;Credential(G_Url);&nbsp;<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">77</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">if</span><span style="line-height:1.5">&nbsp;(wsBool&nbsp;</span><span style="line-height:1.5">==</span><span style="line-height:1.5">&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">true</span><span style="line-height:1.5">)&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(0,128,0)">//</span><span style="line-height:1.5; color:rgb(0,128,0)">服务器连接验证通过</span><span style="line-height:1.5; color:rgb(0,128,0)"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">78</span><span style="line-height:1.5; color:rgb(0,128,0)"><img id="Codehighlighter1_2654_2834_Open_Image" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedSubBlockStart.gif" alt="" style="border:0px"></span><span style="line-height:1.5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span id="Codehighlighter1_2654_2834_Open_Text" style="line-height:1.5"><span style="line-height:1.5">{<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">79</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;webasic&nbsp;</span><span style="line-height:1.5">=</span><span style="line-height:1.5">&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">new</span><span style="line-height:1.5">&nbsp;WS_Webasic.WS_Webasic();</span><span style="line-height:1.5; color:rgb(0,128,0)">//</span><span style="line-height:1.5; color:rgb(0,128,0)">实例化</span><span style="line-height:1.5; color:rgb(0,128,0)"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">80</span><span style="line-height:1.5; color:rgb(0,128,0)"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px"></span><span style="line-height:1.5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;webasic.Credentials&nbsp;</span><span style="line-height:1.5">=</span><span style="line-height:1.5">&nbsp;MyCred();</span><span style="line-height:1.5; color:rgb(0,128,0)">//</span><span style="line-height:1.5; color:rgb(0,128,0)">得到服务器连接凭证，这样该WebService可以放心的连接了</span><span style="line-height:1.5; color:rgb(0,128,0)"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">81</span><span style="line-height:1.5; color:rgb(0,128,0)"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedSubBlockEnd.gif" style="border:0px"></span><span style="line-height:1.5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></span><span style="line-height:1.5"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">82</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedSubBlockEnd.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></span><span style="line-height:1.5"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">83</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/InBlock.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="line-height:1.5; color:rgb(0,0,255)">return</span><span style="line-height:1.5">&nbsp;webasic;<br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">84</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedSubBlockEnd.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></span><span style="line-height:1.5"><br>
</span><span style="line-height:1.5; color:rgb(0,128,128)">85</span><span style="line-height:1.5"><img alt="" align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedBlockEnd.gif" style="border:0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></span></span>
<div class="cnblogs_code_toolbar" style="margin-top:5px"><span class="cnblogs_code_copy" style="line-height:1.5; padding-right:5px"><a href="" title="复制代码" style="color:navy; text-decoration:initial; border:none!important"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="border:none!important"></a></span></div>
</div>
注：<br>
（1）必须引用 System.Net;<br>
（2）对WebService发访问，在IIS里取消匿名访问权限，若允许匿名访问，就没有必须提供验证凭证了。IIS里怎么取消匿名访问 权限请参照IIS相关文章，这里不在累赘。<br>
验证是有时速度会比较慢，主要是因为myWebResponse = myWebRequest.GetResponse();</div>
</div>
</div>
</div>
<p style="font-size:13px; line-height:1.4; margin:10px auto; font-family:Verdana,Geneva,Arial,Helvetica,sans-serif">
<a href="http://www.cnblogs.com/chhuic/archive/2009/09/28/1576050.html" target="_blank" style="color:navy; text-decoration:initial">http://www.cnblogs.com/chhuic/archive/2009/09/28/1576050.html</a></p>
<p style="font-size:13px; line-height:1.4; margin:10px auto; font-family:Verdana,Geneva,Arial,Helvetica,sans-serif">
&nbsp;</p>
<p style="font-size:13px; line-height:1.4; margin:10px auto; font-family:Verdana,Geneva,Arial,Helvetica,sans-serif">
二、</p>
<p style="font-size:13px; line-height:1.4; margin:10px auto; font-family:Verdana,Geneva,Arial,Helvetica,sans-serif">
&nbsp; 第二、在第一种方法的基础上对WebService里的方法进行加密，这里面方法很多，下面提供一种比较常用的方法。在调用方法时多提供二个参数用户加密解密用（当然了提供几个参数看自己的需要而定）。比如有个WebService方法是根据顾客ID获取数据库中的顾客的详细资料为GetCustomerDetailByCustomerID(string custID);如果只提供一个参数，则很容易被别人访问调用，从而顾客资料很容易被别人获取，因此我们对这个方法进行加密GetCustomerDetailByCustomerID(string
 scustID,string custID,ecustID);这样，只有提供正确的scustID与ecustID这二个参数才能成功调用这个方法，而对于这二个参数scustID与ecustID，则可以通过加密方法生成一个字符串，如scustID='C39134558',ecustID='C39223525'，只有这二个参数满足一定的条件时才算验证通过，而对于参数来说，我们也可以提供一个验证，如果scustID里的&#20540;C39134558，前面三位必须是C39，紧跟5位13455则相加后的&#20540;18进行位操作如，对&#20540;18加一个因子，如1，则出现以下的运行：（18&#43;1）%11==8，这样只有最后一位为8才算这个参数&#20540;是符合要求的，所以随便输入一个参数如：C39134556,则因为不符合要求，所以验证不能通过。在这里即使二个参数scustID='C39134558',ecustID='C39223525'都对了，则还需要通过这二个参数的进一步的验证才能算成功。至于这二个满足什么要求，一种是可以采用现有的加密机制，也可以自己写一个加密类来袜。
 上面只是举一个简单的例子。</p>
<p style="font-size:13px; line-height:1.4; margin:10px auto; font-family:Verdana,Geneva,Arial,Helvetica,sans-serif">
&nbsp;&nbsp;&nbsp;&nbsp; 通过上面的二个步骤，则可以实现比较安全的WebService调用了。当然方法很多，上面只是小弟的一些经验而已，如果博友还有更好的方法，不吝赐教。</p>
<p style="font-size:13px; line-height:1.4; margin:10px auto; font-family:Verdana,Geneva,Arial,Helvetica,sans-serif">
<a href="http://www.cnblogs.com/chhuic/archive/2009/11/19/1606109.html" target="_blank" style="color:navy; text-decoration:initial">http://www.cnblogs.com/chhuic/archive/2009/11/19/1606109.html</a></p>
<p style="font-size:13px; line-height:1.4; margin:10px auto; font-family:Verdana,Geneva,Arial,Helvetica,sans-serif">
&nbsp;</p>
<p style="font-size:13px; line-height:1.4; margin:10px auto; font-family:Verdana,Geneva,Arial,Helvetica,sans-serif">
三、<a href="http://www.pin5i.com/showtopic-25187.html" target="_blank" style="color:navy; text-decoration:initial">http://www.pin5i.com/showtopic-25187.html</a>&nbsp; http://www.pin5i.com/showtopic-15918.html</p>
<p style="font-size:13px; line-height:1.4; margin:10px auto; font-family:Verdana,Geneva,Arial,Helvetica,sans-serif">
<strong>解决方案一：通过通过SOAP Header身份<span class="t_tag" style="line-height:1.5">验证</span>。<br>
<br>
</strong>1.我们实现一个用于身份验证的类，文件名MySoapHeader.cs&nbsp;<br>
<br>
MySoapHeader类继承自System.Web.Services.Protocols.SoapHeader。且定义了两个成员变量，UserName和PassWord，还定义了一个用户认证的函数ValideUser。它提供了对UserName和PassWord检查的功能</p>
<div class="blockcode" style="font-family:Verdana,Geneva,Arial,Helvetica,sans-serif; font-size:13px; line-height:19px">
<div id="code38546_-1">
<ol style="padding-left:50px">
<li style="list-style-type:decimal">using System;<br>
</li><li style="list-style-type:decimal">using System.Data;<br>
</li><li style="list-style-type:decimal">using System.Configuration;<br>
</li><li style="list-style-type:decimal">using System.Web;<br>
</li><li style="list-style-type:decimal">using System.Web.Security;<br>
</li><li style="list-style-type:decimal">using System.Web.UI;<br>
</li><li style="list-style-type:decimal">using System.Web.UI.HtmlControls;<br>
</li><li style="list-style-type:decimal">using System.Web.UI.WebControls;<br>
</li><li style="list-style-type:decimal">using System.Web.UI.WebControls.WebParts;<br>
</li><li style="list-style-type:decimal">using System.Web.Services;<br>
</li><li style="list-style-type:decimal">using System.Web.Services.Protocols;<br>
</li><li style="list-style-type:decimal">/// &lt;summary&gt;<br>
</li><li style="list-style-type:decimal">///MySoapHeader 的摘要说明<br>
</li><li style="list-style-type:decimal">/// &lt;/summary&gt;<br>
</li><li style="list-style-type:decimal">public class MySoapHeader:SoapHeader<br>
</li><li style="list-style-type:decimal">{<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; public MySoapHeader()<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; {<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; &nbsp; &nbsp; //<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; &nbsp; &nbsp; //TODO: 在此处添加构造函数逻辑<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; &nbsp; &nbsp; //<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; }<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; public string UserName;<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; public string PassWord;<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; public bool ValideUser(string in_UserName, string in_PassWord)&nbsp;&nbsp;<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; {<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; &nbsp; &nbsp; if ((in_UserName == &quot;zxq&quot;) &amp;&amp; (in_PassWord == &quot;123456&quot;))<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; &nbsp; &nbsp; {<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return true;<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; &nbsp; &nbsp; }<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; &nbsp; &nbsp; else<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; &nbsp; &nbsp; {<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return false;<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; &nbsp; &nbsp; }<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; }<br>
</li><li style="list-style-type:decimal">}</li></ol>
</div>
</div>
<p style="font-size:13px; line-height:1.4; margin:10px auto; font-family:Verdana,Geneva,Arial,Helvetica,sans-serif">
2.下面我们创建WebService.asmx&nbsp; &nbsp; WebService.cs代码如下:</p>
<div class="blockcode" style="font-family:Verdana,Geneva,Arial,Helvetica,sans-serif; font-size:13px; line-height:19px">
<ol style="padding-left:50px">
<li style="list-style-type:decimal">using System;<br>
</li><li style="list-style-type:decimal">using System.Collections;<br>
</li><li style="list-style-type:decimal">using System.Web;<br>
</li><li style="list-style-type:decimal">using System.Web.Services;<br>
</li><li style="list-style-type:decimal">using System.Web.Services.Protocols;<br>
</li></ol>
</div>
<ol style="padding-left:50px; font-family:Verdana,Geneva,Arial,Helvetica,sans-serif; font-size:13px; line-height:19px">
<li style="list-style-type:decimal">/// &lt;summary&gt;<br>
</li><li style="list-style-type:decimal">///WebService 的摘要说明<br>
</li><li style="list-style-type:decimal">/// &lt;/summary&gt;<br>
</li><li style="list-style-type:decimal">[WebService(Namespace = &quot;http://tempuri.org/&quot;)]<br>
</li><li style="list-style-type:decimal">[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]<br>
</li><li style="list-style-type:decimal">public class WebService : System.Web.Services.WebService<br>
</li><li style="list-style-type:decimal">{<br>
&nbsp;&nbsp;&nbsp; public WebService()<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //如果使用设计的<span class="t_tag" style="line-height:1.5">组件</span>，请取消注释以下行&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;//InitializeComponent();&nbsp;<br>
&nbsp;&nbsp;&nbsp; }<br>
</li></ol>
<div class="blockcode" style="font-family:Verdana,Geneva,Arial,Helvetica,sans-serif; font-size:13px; line-height:19px">
<ol style="padding-left:50px">
<li style="list-style-type:decimal">&nbsp; &nbsp; public MySoapHeader header; ////定义用户身份验证类变量header<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; [WebMethod(Description = &quot;用户验证<span class="t_tag" style="line-height:1.5">测试</span>&quot;)]<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; [System.Web.Services.Protocols.SoapHeader(&quot;header&quot;)]//用户身份验证的soap头&nbsp;<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; public string HelloWorld(string contents)<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; {<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; &nbsp; &nbsp; //验证是否有权访问&nbsp;<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; &nbsp; &nbsp; if (header.ValideUser(header.UserName, header.PassWord))<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; &nbsp; &nbsp; {<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return contents &#43; &quot;执行了&quot;;<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; &nbsp; &nbsp; }<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; &nbsp; &nbsp; else<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; &nbsp; &nbsp; {<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return &quot;您没有权限访问&quot;;<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; &nbsp; &nbsp; }<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; }<br>
</li><li style="list-style-type:decimal">}<br>
</li></ol>
</div>
<span style="font-family:Verdana,Geneva,Arial,Helvetica,sans-serif; font-size:13px; line-height:19px">复制代码</span><span style="font-family:Verdana,Geneva,Arial,Helvetica,sans-serif; font-size:13px; line-height:19px"></span>
<p style="font-size:13px; line-height:1.4; margin:10px auto; font-family:Verdana,Geneva,Arial,Helvetica,sans-serif">
3.客户端 创建个Default.aspx&nbsp;<br>
<br>
Default.aspx .cs代码</p>
<div class="blockcode" style="font-family:Verdana,Geneva,Arial,Helvetica,sans-serif; font-size:13px; line-height:19px">
<div id="code38546_1">
<ol style="padding-left:50px">
<li style="list-style-type:decimal">using System;<br>
</li><li style="list-style-type:decimal">using System.Configuration;<br>
</li><li style="list-style-type:decimal">using System.Data;<br>
</li><li style="list-style-type:decimal">using System.Web;<br>
</li><li style="list-style-type:decimal">using System.Web.Security;<br>
</li><li style="list-style-type:decimal">using System.Web.UI;<br>
</li><li style="list-style-type:decimal">using System.Web.UI.HtmlControls;<br>
</li><li style="list-style-type:decimal">using System.Web.UI.WebControls;<br>
</li><li style="list-style-type:decimal">using System.Web.UI.WebControls.WebParts;<br>
</li><li style="list-style-type:decimal"><br>
</li><li style="list-style-type:decimal">public partial class _Default : System.Web.UI.Page&nbsp;<br>
</li><li style="list-style-type:decimal">{<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; protected void Page_Load(object sender, EventArgs e)<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; {<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; &nbsp; &nbsp; com.cn1yw.WebService test = new com.cn1yw.WebService();//web引用(改成您自己的)<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; &nbsp; &nbsp; com.cn1yw.MySoapHeader Header = new com.cn1yw.MySoapHeader();//web引用创建soap头对象(改成您自己的)<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; &nbsp; &nbsp; //设置soap头变量<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; &nbsp; &nbsp; Header.UserName = &quot;zxq&quot;;<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; &nbsp; &nbsp; Header.PassWord = &quot;123456&quot;;<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; &nbsp; &nbsp; test.MySoapHeaderValue = Header;<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; &nbsp; &nbsp; //调用web 方法<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; &nbsp; &nbsp; Response.Write(test.HelloWorld(&quot;我是强&quot;));<br>
</li><li style="list-style-type:decimal">&nbsp; &nbsp; }<br>
</li><li style="list-style-type:decimal">}</li></ol>
</div>
</div>
<p style="font-size:13px; line-height:1.4; margin:10px auto; font-family:Verdana,Geneva,Arial,Helvetica,sans-serif">
<strong>解决方案二：通过集成windows身份验证。</strong><br>
<br>
1. 将web服务程序设为集成windows身份验证&nbsp;&nbsp;<br>
2.客户端web引用代码</p>
<div class="blockcode" style="font-family:Verdana,Geneva,Arial,Helvetica,sans-serif; font-size:13px; line-height:19px">
<div id="code38546_2">
<ol style="padding-left:50px">
<li style="list-style-type:decimal">Test.WebReference.Service1 wr = new Test.WebReference.Service1(); //生成web service实例&nbsp;<br>
</li><li style="list-style-type:decimal">wr.Credentials = new NetworkCredential(&quot;guest&quot;,&quot;123&quot;); //guest是用户名，该用户需要有一定的权限&nbsp;<br>
</li><li style="list-style-type:decimal">lblTest.Text = wr.Add(2,2).ToString(); //调用web service方法</li></ol>
</div>
</div>
<p style="font-size:13px; line-height:1.4; margin:10px auto; font-family:Verdana,Geneva,Arial,Helvetica,sans-serif">
该方案的优点是比较<span class="t_tag" style="line-height:1.5">安全</span>，<span class="t_tag" style="line-height:1.5">性能</span>较好，缺点是不便于移植，部署工作量大。（</p>

            <div>
                作者：xiaogui340 发表于2013/4/9 9:21:25 <a href="http://blog.csdn.net/xiaogui340/article/details/8775861">原文链接</a>
            </div>
            <div>
            阅读：4072 评论：0 <a href="http://blog.csdn.net/xiaogui340/article/details/8775861#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[转]vs2010中使用slqite及出现的问题]]></title>
        <link>http://blog.csdn.net/xiaogui340/article/details/8687386</link>
        <guid>http://blog.csdn.net/xiaogui340/article/details/8687386</guid>
        <author>xiaogui340</author>
        <pubDate>2013/3/18 15:25:46</pubDate>
        <description><![CDATA[
            
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; color:rgb(69,69,69); font-family:tahoma,helvetica,arial; font-size:14px; line-height:21px">
用VS2010调用sqlite出现了问题，本来想在引用中加载了sqlite的两个动态连接文件后就可以直接调用它的连接对象了。但调用的时候出现了“混合模式程序集是针对....”的错误提示，程序无法运行。</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; color:rgb(69,69,69); font-family:tahoma,helvetica,arial; font-size:14px; line-height:21px">
<span style="color:rgb(0,0,0)">一开始没有用到sqlite的连接，仅仅调用我对连接数据库的一个封装类中的方法，怎么弄都不能运行到我的方法体中去，当时也没注意太多，设置了很多断点，后来就连窗体自带的的方法也不执行了，直到后面脱离封装的内，单独写了一个sqlite的连接，在调用连接的时候就出现了文章开头描述的错误。</span></p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; color:rgb(69,69,69); font-family:tahoma,helvetica,arial; font-size:14px; line-height:21px">
&nbsp;</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; color:rgb(69,69,69); font-family:tahoma,helvetica,arial; font-size:14px; line-height:21px">
<span style="color:rgb(0,0,0)">仔细看了以下sqlite的版本，初步发现了问题，那就是现有的System.Data.Sqlite这个数据访问provider是针对.NET2.0环境开发（最新的版本是1.0.66.0,2010年4月18日发布的），而目前官方也没有给出最新的.NET4的数据访问支持。<br>
<br>
在网上搜索了一下，找到了解决的方法，就是在app.config中多添加一个配置节：startup<br>
&lt;startup&nbsp;useLegacyV2RuntimeActivationPolicy=&quot;true&quot;&gt;<br>
&lt;supportedRuntime&nbsp;version=&quot;v4.0&quot;/&gt;<br>
&lt;/startup&gt;<br>
&nbsp;<br>
<br>
这段配置节的意思是（参考自MSDN，具体地址：<a href="http://msdn.microsoft.com/zh-cn/library/bbx34a2h.aspx" target="_blank" style="color:rgb(63,167,203)">http://msdn.microsoft.com/zh-cn/library/bbx34a2h.aspx</a>）：<br>
<br>
启用&nbsp;.NET&nbsp;Framework&nbsp;2.0&nbsp;版&nbsp;运行时激活策略，这是通过使用最新支持的运行时加载所有程序集。<br>
&nbsp;<br>
注意：由于config配置文件的特性，如果在config配置文件中存在configSections节点，则必须将configSections放在一个，否则会引发异常：配置系统未能初始化<br>
<br>
在原来.NET2.0，.NET3.5的时候，由于程序运行环境本质还是.NET2.0，而到了.NET4.0由于整个程序集的版本更新，以前使用.NET2.0所编写的程序集与.NET4.0的程序集继续拧互操作的时候就会出现上面所说的兼容性问题。<br>
<br>
通过MSDN，我们可以知道，startup配置节中的useLegacyV2RuntimeActivationPolicy属性是在.NET4.0中新增的，默认是false，表示：<br>
<br>
使用默认的&nbsp;.NET&nbsp;Framework&nbsp;4&nbsp;激活策略，该激活策略将加载&nbsp;.NET&nbsp;Framework&nbsp;4&nbsp;通过使用公共语言运行时&nbsp;(CLR)&nbsp;版本&nbsp;4&nbsp;所创建的程序集，以及&nbsp;CLR&nbsp;早期版本通过使用受支持的低于版本&nbsp;4&nbsp;的最高&nbsp;CLR&nbsp;版本所创建的程序集。<br>
&nbsp;<br>
现在如果当程序在.NET4.0环境下要使用.NET2.0及.NET3.5的程序时就必须将useLegacyV2RuntimeActivationPolicy设置为true，同时还要注意，需要在startup配置节的字节中添加supportedRuntime配置节，并指定为“v4.0”，表示使用.NET4.0运行时来运行程序。</span></p>
<br>

            <div>
                作者：xiaogui340 发表于2013/3/18 15:25:46 <a href="http://blog.csdn.net/xiaogui340/article/details/8687386">原文链接</a>
            </div>
            <div>
            阅读：228 评论：0 <a href="http://blog.csdn.net/xiaogui340/article/details/8687386#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]python 学习笔记一]]></title>
        <link>http://blog.csdn.net/xiaogui340/article/details/8662015</link>
        <guid>http://blog.csdn.net/xiaogui340/article/details/8662015</guid>
        <author>xiaogui340</author>
        <pubDate>2013/3/12 10:32:48</pubDate>
        <description><![CDATA[
            
<p>1.字符串 以r开头，后面的字符串中任何符号都视为字符串。但自字符串结尾不能有反斜杠。例：print r&quot;c:\dfs\dsf&quot; 正确，print r&quot;c:\sdfs\sdfs\&quot;错误；</p>
<p>2.&quot;&quot;&quot; &nbsp; &nbsp; &quot;&quot;&quot;&quot; 三个引号代表其中字符串可换行</p>
<p>3.注意input 与raw_input区别，大部分情况下用后者，后者会视 字符串为 python合法字符串。</p>
<p>4.str()、repr()函数区别，前者转化为字符串，后者则返回字符串的表现形式。str(111)=&gt;111,repr(111)=&gt;'111'</p>
<p>5.python 中的数据结构：序列&#43;映射&#43;集合，字符串也是一个由字符组成的序列 a=&quot;abc&quot;,a[0]='a',a[-1]='c\'</p>
<p>6.分片操作 ：a[0:14],2个索引序号之间的序列，后者不包含在内。理解 a[1:3],a[-3:-1],a[-3:],a[:3],a[:]</p>
<p>7.步长，默认1 a[0:4]=a[0:4:1],步长不能为0，可为负数，负数，即从右往左，先计数，再跳跃。</p>
<p>8.list函数。list('abc'=['a','b','c'])</p>
<p>9,分片赋&#20540;<pre name="code" class="python">&gt;&gt;&gt; name=list('guitao')
&gt;&gt;&gt; name
['g', 'u', 'i', 't', 'a', 'o']
&gt;&gt;&gt; name[3:]=list('jian')
&gt;&gt;&gt; name
['g', 'u', 'i', 'j', 'i', 'a', 'n']
&gt;&gt;&gt; </pre>10.count() 方法统计元素在列表中出现的次数</p>
<p>11.extend,扩展原有的序列，注意与连接操作的区别，连接操作是新生成了一个序列，而extend是改变原有序列</p>
<p>12.pop,移除列表中的一个元素（默认是最后一个），是唯一个既修改原有列表，有返回元素的函数</p>
<p>13.reverse 将列表中的元素反反向存放</p>
<p>14.sorted() 排序，注，其没有返回&#20540;，y=x.sort() 是错误的.2个可选参数 key/reverse</p>
<p>x.sorted(key=len)/x.sorted(reverse=True)</p>
<p>15.注 &nbsp;x=y,x=y[:]区别，前面还是一个对象多个引用，后者是多个对象</p>
<p>16.元组，不可变序列（1，2，3）=1，2，3.逗号的重要性。tuple将序列转化为元组</p>

            <div>
                作者：xiaogui340 发表于2013/3/12 10:32:48 <a href="http://blog.csdn.net/xiaogui340/article/details/8662015">原文链接</a>
            </div>
            <div>
            阅读：168 评论：0 <a href="http://blog.csdn.net/xiaogui340/article/details/8662015#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]Socket连接]]></title>
        <link>http://blog.csdn.net/xiaogui340/article/details/8650392</link>
        <guid>http://blog.csdn.net/xiaogui340/article/details/8650392</guid>
        <author>xiaogui340</author>
        <pubDate>2013/3/8 13:58:00</pubDate>
        <description><![CDATA[
            
<p><span style="font-family:Microsoft YaHei; font-size:12px">socket 通讯，基于TCO协议，一个通信服务器，多个通信客户端。<span style="color:rgb(51,51,51); line-height:25px">Socket通信服务器启动时，会建立一个侦听Socket，侦听Socket将侦听到的Socket连接传给接受Socket，然后由接受Socket完成接受、发送消息，当Socket存在异常时，断开连接。</span></span></p>
<p><span style="color:rgb(51,51,51); line-height:25px"><span style="font-family:Microsoft YaHei; font-size:12px">废话少说，服务端代码</span></span></p>
<p><span style="color:rgb(51,51,51); line-height:25px"><span style="font-family:Microsoft YaHei; font-size:12px">常量定义</span></span></p>
<p><span style="color:rgb(51,51,51); line-height:25px"><span style="font-family:Microsoft YaHei; font-size:12px"></span></span><pre name="code" class="csharp">        private IPEndPoint serverInfo;//存放服务器的IP和端口信息
        private Socket serverSocket;//服务端运行的SOCKET
        private Thread serverThread;//服务端运行的线程
        private Socket[] clientSocket;//为客户端建立的SOCKET连接
        private int clientNumb;//存放客户端数量
        private byte[] msgBuffer;//存放消息数据</pre>初始化</p>
<p><span style="color:rgb(51,51,51); line-height:25px"><span style="font-family:Microsoft YaHei; font-size:12px"></span></span><pre name="code" class="csharp">            serverSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            serverInfo = new IPEndPoint(IPAddress.Any, this.GetPort());
            serverSocket.Bind(serverInfo);
            serverSocket.Listen(10);
            clientSocket = new Socket[65535];
            msgBuffer = new byte[65535];
            clientNumb = 0;
            serverThread = new Thread(new ThreadStart(ReceiveAccept));
            serverThread.Start();</pre>回调函数</p>
<p><span style="color:rgb(51,51,51); line-height:25px"><span style="font-family:Microsoft YaHei; font-size:12px"></span></span><pre name="code" class="csharp">        private void ReceiveAccept()
        {
            while (true)//?
            {
                //Accept 以同步方式从侦听套接字的连接请求队列中提取第一个挂起的连接请求，然后创建并返回新的 Socket。
                //在阻止模式中，Accept 将一直处于阻止状态，直到传入的连接尝试排入队列。连接被接受后，原来的 Socket 继续将传入的连接请求排入队列，直到您关闭它。
                clientSocket[clientNumb] = serverSocket.Accept();
                clientSocket[clientNumb].BeginReceive(msgBuffer, 0, msgBuffer.Length, SocketFlags.None,
                    new AsyncCallback(ReceiveCallback), clientSocket[clientNumb]);
                lock (this.lbClients)
                {
                    this.lbClients.Items.Add(clientSocket[clientNumb].RemoteEndPoint.ToString() + &quot; 成功连接服务器.&quot;);
                }
                clientNumb++;
            }
        }

        private void ReceiveCallback(IAsyncResult ia)
        {
            try
            {
                Socket s = (Socket)ia.AsyncState;
                int iEnd= s.EndReceive(ia);
                for (int i = 0; i &lt; clientNumb; i++)
                {
                    if (clientSocket[i].Connected)
                        clientSocket[i].Send(msgBuffer, 0, iEnd, SocketFlags.None);
                    s.BeginReceive(msgBuffer, 0, msgBuffer.Length, SocketFlags.None, new AsyncCallback(ReceiveCallback), s);
                }
            }
            catch
            { }
        }</pre>客户端</p>
<p><span style="color:rgb(51,51,51); line-height:25px"><span style="font-family:Microsoft YaHei; font-size:12px">常量定义</span></span></p>
<p><span style="color:rgb(51,51,51); line-height:25px"><span style="font-family:Microsoft YaHei; font-size:12px"></span></span><pre name="code" class="csharp">        private IPEndPoint serverInfo;
        private Socket clientSocket;
        //信息接收缓存
        private Byte[] msgBuffer;
        //信息发送存储
        private Byte[] msgSend;</pre><br>
客户端socket定义</p>
<p><span style="color:rgb(51,51,51); line-height:25px"><span style="font-family:Microsoft YaHei; font-size:12px"></span></span><pre name="code" class="csharp">                clientSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                clientSocket.Connect(serverInfo);
                Thread thread = new Thread(new ThreadStart(ReceiveMsg));
                thread.Start();
                clientSocket.Send(Encoding.Unicode.GetBytes(&quot;用户：&quot; + this.tbName.Text + &quot;进入系统！\n&quot;));</pre><br>
回调函数</p>
<p><span style="color:rgb(51,51,51); line-height:25px"><span style="font-family:Microsoft YaHei; font-size:12px"></span></span><pre name="code" class="csharp">        private void ReceiveMsg()
        {
            while (true)
            {
                int iEnd = clientSocket.Receive(msgBuffer);
                lock (this.tbReceiveMsg)
                {
                    this.tbReceiveMsg.AppendText(Encoding.Unicode.GetString(msgBuffer, 0, iEnd));
                }
            }
        }</pre><br>
<br>
<br>
<br>
</p>
<p><span style="color:rgb(51,51,51); line-height:25px"><span style="font-family:Microsoft YaHei; font-size:12px"><br>
</span></span></p>

            <div>
                作者：xiaogui340 发表于2013/3/8 13:58:00 <a href="http://blog.csdn.net/xiaogui340/article/details/8650392">原文链接</a>
            </div>
            <div>
            阅读：274 评论：0 <a href="http://blog.csdn.net/xiaogui340/article/details/8650392#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[转]webservice 参数]]></title>
        <link>http://blog.csdn.net/xiaogui340/article/details/8548847</link>
        <guid>http://blog.csdn.net/xiaogui340/article/details/8548847</guid>
        <author>xiaogui340</author>
        <pubDate>2013/1/28 14:26:43</pubDate>
        <description><![CDATA[
            
<p style="margin-top:0px; margin-bottom:14px; padding-top:0px; padding-bottom:0px; font-size:14px; line-height:20px; text-align:justify; font-family:arial,helvetica,sans-serif,verdana,宋体">
用C#<a class="b" href="http://www.chinawin.net/tag/dotnet/" target="_blank" style="color:rgb(51,51,51); text-decoration:none; font-weight:bold">.NET</a>调用Java开发的WebService时，先在客户端封装的带有int属性的对象，当将该对象传到服务器端时，服务器端可以得到string类型的属性&#20540;，却不能得到int类型、double和DateTime类型的&#20540;（在服务端得到的均为null）
 解决办法： VS2005封装WebService引用</p>
<span style="font-family:arial,helvetica,sans-serif,verdana,宋体; font-size:14px; line-height:20px">用C#.NET调用Java开发的WebService时，先在客户端封装的带有int属性的对象，当将该对象传到服务器端时，服务器端可以得到string类型的属性&#20540;，却不能得到int类型、double和DateTime类型的&#20540;（在服务端得到的均为null）</span>
<p style="margin-top:0px; margin-bottom:14px; padding-top:0px; padding-bottom:0px; font-size:14px; line-height:20px; text-align:justify; font-family:arial,helvetica,sans-serif,verdana,宋体">
解决办法：</p>
<p style="margin-top:0px; margin-bottom:14px; padding-top:0px; padding-bottom:0px; font-size:14px; line-height:20px; text-align:justify; font-family:arial,helvetica,sans-serif,verdana,宋体">
VS2005封装WebService引用时，如果WebService发布的是一个基本数据类型组成的对象，则会对该对象的非string属性同时生成两个属性，一般是这样的&quot;属性××&quot;、&quot;属性××Specified&quot;。而&quot;属性名Specified&quot;是一个bool类型，只有这个属性被设置成true时，&quot;属性××&quot;的&#20540;才会被序列化成xml传递。</p>
<p style="margin-top:0px; margin-bottom:14px; padding-top:0px; padding-bottom:0px; font-size:14px; line-height:20px; text-align:justify; font-family:arial,helvetica,sans-serif,verdana,宋体">
同样的道理，用.NET提供WebService给JAVA调用时，如果是一个基本数据类型组成的对象，则会对该对象的非string属性同时生成两个属性，一般是这样的&quot;属性××&quot;、&quot;属性××Specified&quot;。如果不将“属性××Specified”设置为true的话，服务端得到的数据将是null。解决办法就是把“属性××Specified”设置为true或者把“属性××Specified”删掉。</p>
<p style="margin-top:0px; margin-bottom:14px; padding-top:0px; padding-bottom:0px; font-size:14px; line-height:20px; text-align:justify; font-family:arial,helvetica,sans-serif,verdana,宋体">
资料：http://msdn.microsoft.com/zh-cn/library/system.xml.xmlattribute.specified(VS.80).aspx</p>
<p style="margin-top:0px; margin-bottom:14px; padding-top:0px; padding-bottom:0px; font-size:14px; line-height:20px; text-align:justify; font-family:arial,helvetica,sans-serif,verdana,宋体">
.NET Framework 类库</p>
<p style="margin-top:0px; margin-bottom:14px; padding-top:0px; padding-bottom:0px; font-size:14px; line-height:20px; text-align:justify; font-family:arial,helvetica,sans-serif,verdana,宋体">
XmlAttribute.Specified 属性</p>
<p style="margin-top:0px; margin-bottom:14px; padding-top:0px; padding-bottom:0px; font-size:14px; line-height:20px; text-align:justify; font-family:arial,helvetica,sans-serif,verdana,宋体">
获取一个&#20540;，该&#20540;指示是否显式设置了属性&#20540;。</p>
<p style="margin-top:0px; margin-bottom:14px; padding-top:0px; padding-bottom:0px; font-size:14px; line-height:20px; text-align:justify; font-family:arial,helvetica,sans-serif,verdana,宋体">
命名空间:System.Xml</p>
<p style="margin-top:0px; margin-bottom:14px; padding-top:0px; padding-bottom:0px; font-size:14px; line-height:20px; text-align:justify; font-family:arial,helvetica,sans-serif,verdana,宋体">
程序集:System.Xml（在 system.xml.dll 中）</p>
<p style="margin-top:0px; margin-bottom:14px; padding-top:0px; padding-bottom:0px; font-size:14px; line-height:20px; text-align:justify; font-family:arial,helvetica,sans-serif,verdana,宋体">
属性&#20540;</p>
<p style="margin-top:0px; margin-bottom:14px; padding-top:0px; padding-bottom:0px; font-size:14px; line-height:20px; text-align:justify; font-family:arial,helvetica,sans-serif,verdana,宋体">
如果在原始实例文档中显式地为该属性给定一个&#20540;，则为 true；否则为 false。false &#20540;指示该属性的&#20540;来自 DTD。</p>
<p style="margin-top:0px; margin-bottom:14px; padding-top:0px; padding-bottom:0px; font-size:14px; line-height:20px; text-align:justify; font-family:arial,helvetica,sans-serif,verdana,宋体">
备注</p>
<p style="margin-top:0px; margin-bottom:14px; padding-top:0px; padding-bottom:0px; font-size:14px; line-height:20px; text-align:justify; font-family:arial,helvetica,sans-serif,verdana,宋体">
该属性是由实现负责的，而不是用户。如果用户更改该属性的&#20540;（即使它最后与默认/固定&#20540;具有相同的&#20540;），Specified 标志就会自动转为 true。若要重新将该属性指定为 DTD 中的默认/固定&#20540;，则用户必须删除该属性。然后，实现提供一个新属性，其 Specified 设置为 false，并具有默认/固定&#20540;（如果存在的话）。</p>
<p style="margin-top:0px; margin-bottom:14px; padding-top:0px; padding-bottom:0px; font-size:14px; line-height:20px; text-align:justify; font-family:arial,helvetica,sans-serif,verdana,宋体">
摘要：</p>
<p style="margin-top:0px; margin-bottom:14px; padding-top:0px; padding-bottom:0px; font-size:14px; line-height:20px; text-align:justify; font-family:arial,helvetica,sans-serif,verdana,宋体">
如果属性具有文档中的分配&#20540;，则 Specified 为 true，并且该&#20540;是分配&#20540;。</p>
<p style="margin-top:0px; margin-bottom:14px; padding-top:0px; padding-bottom:0px; font-size:14px; line-height:20px; text-align:justify; font-family:arial,helvetica,sans-serif,verdana,宋体">
如果属性没有文档中的分配&#20540;，而具有 DTD 中的默认/固定&#20540;，则 Specified 为 false，该&#20540;是 DTD 中的默认/固定&#20540;。</p>
<p style="margin-top:0px; margin-bottom:14px; padding-top:0px; padding-bottom:0px; font-size:14px; line-height:20px; text-align:justify; font-family:arial,helvetica,sans-serif,verdana,宋体">
否则，该属性不出现在文档的结构模型中。</p>

            <div>
                作者：xiaogui340 发表于2013/1/28 14:26:43 <a href="http://blog.csdn.net/xiaogui340/article/details/8548847">原文链接</a>
            </div>
            <div>
            阅读：1739 评论：0 <a href="http://blog.csdn.net/xiaogui340/article/details/8548847#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[转]WCF数据契约（DataContract）]]></title>
        <link>http://blog.csdn.net/xiaogui340/article/details/8225467</link>
        <guid>http://blog.csdn.net/xiaogui340/article/details/8225467</guid>
        <author>xiaogui340</author>
        <pubDate>2012/11/26 13:44:17</pubDate>
        <description><![CDATA[
            
<div class="intro" style="margin:8px 0px 0px; padding:8px 16px; line-height:25px; background-color:rgb(250,253,254); border:1px solid rgb(221,221,221); font-size:14px; color:rgb(102,102,102); font-family:Verdana,Arial,Tahoma">
服务契约定义了远程访问对象和可供调用的方法，数据契约则是服务端和客户端之间要传送的自定义数据类型。 一旦声明一个类型为DataContract，那么该类型就可以被序列化在服务端和客户端之间传送，如下所示。 [DataContract] public class UserInfo { //. } 只有声明为DataContract的类型的对象可以被传送，且只有成员属性会</div>
<div class="content" style="margin:0px; padding:12px 16px; line-height:25px; font-size:14px; color:rgb(51,51,51); font-family:Verdana,Arial,Tahoma">
　　
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px">
　　服务契约定义了远程访问对象和可供调用的方法，数据契约则是服务端和客户端之间要传送的自定义数据类型。</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px">
　　一旦声明一个类型为DataContract，那么该类型就可以被序列化在服务端和客户端之间传送，如下所示。</p>
<div style="margin:1px; padding:6px; line-height:19px; font-size:12px; overflow:auto; font-family:'Courier New'">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[DataContract]<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">public</span>&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">class</span>&nbsp;UserInfo<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,128,0)">//….</span><br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
}</div>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px">
&nbsp;</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px">
　　只有声明为DataContract的类型的对象可以被传送，且只有成员属性会被传递，成员方法不会被传递。WCF对声明为DataContract的类型提供更加细节的控制，可以把一个成员排除在序列化范围以外，也就是说，客户端程序不会获得被排除在外的成员的任何信息，包括定义和数据。默认情况下，所有的成员属性都被排除在外，因此需要把每一个要传送的成员声明为DataMember，如下所示。</p>
<div style="margin:1px; padding:6px; line-height:19px; font-size:12px; overflow:auto; font-family:'Courier New'">
&nbsp;[DataContract]<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">public</span>&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">class</span>&nbsp;UserInfo<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;{<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[DataMember]<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">public</span>&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">string</span>&nbsp;UserName<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">get</span>;<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">set</span>;<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[DataMember]<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">public</span>&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">int</span>&nbsp;Age<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">get</span>;<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">set</span>;<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[DataMember]<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">public</span>&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">string</span>&nbsp;Location<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">get</span>;<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">set</span>;<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">public</span>&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">string</span>&nbsp;Zodiac<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">get</span>;<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">set</span>;<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
}</div>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px">
&nbsp;</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px">
　　上面这段代码把UserInfo类声明为DataContract，将UserName、Age、Location这3个属性声明为DataMember(数据成员)。Zodiac成员没有被声明为DataMember，因此在交换数据时，不会传输Zodiac的任何信息。</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px">
　　DataContract也支持Name/Namespace属性，如同ServiceContract，Name和Namespace可以自定义名称和命名空间，客户端将使用自定义的名称和命名空间对DataContract类型进行访问。</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px">
　　声明为DataMember的成员也可以自定义客户端可见的名称，例如：</p>
<div style="margin:1px; padding:6px; line-height:19px; font-size:12px; overflow:auto; font-family:'Courier New'">
[DataMember(Name=<span style="margin:0px; padding:0px; color:rgb(255,0,255)">&quot;Name&quot;</span>)]<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
<span style="margin:0px; padding:0px; color:rgb(0,0,255)">public</span>&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">string</span>&nbsp;UserName<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
{<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">get</span>;<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">set</span>;<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
}<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
[DataMember(Name=<span style="margin:0px; padding:0px; color:rgb(255,0,255)">&quot;Age&quot;</span>)]<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
<span style="margin:0px; padding:0px; color:rgb(0,0,255)">public</span>&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">int</span>&nbsp;UserAge<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
{<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">get</span>;<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">set</span>;<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
}</div>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px">
&nbsp;</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px">
　　除了Name和Namespace以外，DataMember还有以下参数，它们的含义分别如下。</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px">
　　(1)IsRequired：&#20540;为true时，要求序列化引擎检查对象是否存在该&#20540;;若无，则会有异常抛出。</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px">
　　(2)Order：bool类型&#20540;，&#20540;为true时，序列化和反序列化过程将会按成员定义的顺序进行，这对依赖于成员位置的反序列化过程无比重要。</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px">
　　(3)EmitDefaultvalue：为成员属性设置一个默认&#20540;。</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px">
　　一般情况下，将类型声明为DataContract就可以满足传送的需求了，不过特殊情况是难以避免的，这时就需要对要传送的SOAP消息进行更加精确的控制，MessageContract可以满足这种需求。</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px">
　　把一个类型声明为MessageContract，意味着它可以被序列化为SOAP消息，可以声明类型的成员为SOAP消息的各个部分，如Header、Body等，如下所示。</p>
<div style="margin:1px; padding:6px; line-height:19px; font-size:12px; overflow:auto; font-family:'Courier New'">
[MessageContract]<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">public</span>&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">class</span>&nbsp;UserMessage<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;{<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">private</span>&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">string</span>&nbsp;user&nbsp;=&nbsp;<span style="margin:0px; padding:0px; color:rgb(128,128,0)">String</span>.Empty;<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">private</span>&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">string</span>&nbsp;authKey&nbsp;=&nbsp;<span style="margin:0px; padding:0px; color:rgb(128,128,0)">String</span>.Empty;<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[MessageBodyMember(<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Name&nbsp;=&nbsp;<span style="margin:0px; padding:0px; color:rgb(255,0,255)">&quot;UserName&quot;</span>,<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Namespace&nbsp;=&nbsp;<span style="margin:0px; padding:0px; color:rgb(255,0,255)">&quot;http://www.wcf.com&quot;</span>)]<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">public</span>&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">string</span>&nbsp;User<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">get</span>&nbsp;{&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">return</span>&nbsp;user;&nbsp;}<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">set</span>&nbsp;{&nbsp;user&nbsp;=&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">value</span>;&nbsp;}<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[MessageHeader(<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Name&nbsp;=&nbsp;<span style="margin:0px; padding:0px; color:rgb(255,0,255)">&quot;AuthKey&quot;</span>,<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Namespace&nbsp;=&nbsp;<span style="margin:0px; padding:0px; color:rgb(255,0,255)">&quot;http://www.wcf.com&quot;</span>,<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MustUnderstand&nbsp;=&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">true</span><br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)]<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">public</span>&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">string</span>&nbsp;AuthKey<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">get</span>&nbsp;{&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">return</span>&nbsp;authKey;&nbsp;}<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">set</span>&nbsp;{&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">this</span>.authKey&nbsp;=&nbsp;<span style="margin:0px; padding:0px; color:rgb(0,0,255)">value</span>;&nbsp;}<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
}</div>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px">
&nbsp;</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px">
　　User成员被声明为MessageBody(消息体)的一个成员，AuthKey被声明为消息头(MessageHeader)的一个成员。这个类将可以生成如下的SOAP消息。</p>
<div style="margin:1px; padding:6px; line-height:19px; font-size:12px; overflow:auto; font-family:'Courier New'">
&lt;<span style="margin:0px; padding:0px; color:rgb(128,128,0)">s:Envelope</span>&gt;<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span style="margin:0px; padding:0px; color:rgb(128,128,0)">s:Header</span>&gt;<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span style="margin:0px; padding:0px; color:rgb(128,128,0)">a:Action&nbsp;s:mustUnderstand=</span><span style="margin:0px; padding:0px; color:rgb(255,0,255)">&quot;1&quot;</span>&gt;http:<span style="margin:0px; padding:0px; color:rgb(0,128,0)">//UserMessage/Action&lt;/a:Action&gt;</span><br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span style="margin:0px; padding:0px; color:rgb(128,128,0)">h:AuthKey&nbsp;s:mustUnderstand=</span><span style="margin:0px; padding:0px; color:rgb(255,0,255)">&quot;1&quot;</span><span style="margin:0px; padding:0px; color:rgb(128,128,0)">&nbsp;xmlns:h=</span><span style="margin:0px; padding:0px; color:rgb(255,0,255)">&quot;http://www.wcf.com&quot;</span>&gt;xxxx&lt;<span style="margin:0px; padding:0px; color:rgb(128,128,0)">/h:AuthKey</span>&gt;<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span style="margin:0px; padding:0px; color:rgb(128,128,0)">/s:Header</span>&gt;<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span style="margin:0px; padding:0px; color:rgb(128,128,0)">s:<span style="margin:0px; padding:0px; color:rgb(0,0,255)">Body</span></span>&gt;<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span style="margin:0px; padding:0px; color:rgb(128,128,0)">UserMessage&nbsp;xmlns=</span><span style="margin:0px; padding:0px; color:rgb(255,0,255)">&quot;Microsoft.WCF.Documentation&quot;</span>&gt;<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span style="margin:0px; padding:0px; color:rgb(128,128,0)">User&nbsp;xmlns=</span><span style="margin:0px; padding:0px; color:rgb(255,0,255)">&quot;http://www.wcf.com&quot;</span>&gt;abcd&lt;<span style="margin:0px; padding:0px; color:rgb(128,128,0)">/User</span>&gt;<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span style="margin:0px; padding:0px; color:rgb(128,128,0)">/UserMessage</span>&gt;<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span style="margin:0px; padding:0px; color:rgb(128,128,0)">/s:<span style="margin:0px; padding:0px; color:rgb(0,0,255)">Body</span></span>&gt;&nbsp;&nbsp;&nbsp;<br style="margin:0px; padding:0px">
<br style="margin:0px; padding:0px">
&lt;<span style="margin:0px; padding:0px; color:rgb(128,128,0)">/s:Envelope</span>&gt;</div>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px">
　　MessageHeader中，MustUnderstand参数表示读取该头的程序必须能够识别头的内容，否则不能继续处理。Name/Namespace的作用与前面的元素相同。另有Relay参数，若为true，头的内容被接收到以后会在响应消息中回发给消息发送端。</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px">
　　本文来自elivsit的博客，原文地址:http://www.cnblogs.com/zhangleong/archive/2011/11/02/2232705.html</p>
</div>

            <div>
                作者：xiaogui340 发表于2012/11/26 13:44:17 <a href="http://blog.csdn.net/xiaogui340/article/details/8225467">原文链接</a>
            </div>
            <div>
            阅读：386 评论：0 <a href="http://blog.csdn.net/xiaogui340/article/details/8225467#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[转]子类继承父类的实例化顺序]]></title>
        <link>http://blog.csdn.net/xiaogui340/article/details/8123468</link>
        <guid>http://blog.csdn.net/xiaogui340/article/details/8123468</guid>
        <author>xiaogui340</author>
        <pubDate>2012/10/29 11:14:34</pubDate>
        <description><![CDATA[
            
<h2 style="margin:0px 0px 4px; font-size:14px; font-family:Arial; line-height:25px">
<br>
</h2>
<div class="postbody" style="font-family:Arial; font-size:14px; line-height:25px">
<div id="cnblogs_post_body" style="word-break:normal!important">
<p style="margin:10px auto">当两个类之间有继承关系时，第一次构造子类的实例时，是按照如下顺序进行的：</p>
<ol style="padding-left:50px">
<li style="list-style-type:decimal">子类的静态成员初始化语句</li><li style="list-style-type:decimal">子类的静态构造函数</li><li style="list-style-type:decimal">子类的非静态成员初始化语句</li><li style="list-style-type:decimal">父类的静态成员初始化语句</li><li style="list-style-type:decimal">父类的静态构造函数</li><li style="list-style-type:decimal">父类的非静态成员初始化语句&nbsp;</li><li style="list-style-type:decimal">父类的构造函数</li><li style="list-style-type:decimal">子类的构造函数</li></ol>
</div>
</div>

            <div>
                作者：xiaogui340 发表于2012/10/29 11:14:34 <a href="http://blog.csdn.net/xiaogui340/article/details/8123468">原文链接</a>
            </div>
            <div>
            阅读：469 评论：0 <a href="http://blog.csdn.net/xiaogui340/article/details/8123468#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]Siverlight之ItemControl]]></title>
        <link>http://blog.csdn.net/xiaogui340/article/details/8101347</link>
        <guid>http://blog.csdn.net/xiaogui340/article/details/8101347</guid>
        <author>xiaogui340</author>
        <pubDate>2012/10/23 9:21:52</pubDate>
        <description><![CDATA[
            
<p><span style="font-family:verdana,'ms song',宋体,Arial,微软雅黑,Helvetica,sans-serif; font-size:13px; line-height:19px; text-align:left; background-color:rgb(254,254,242)">ItemsControl 是一种数据展示控件，大致分为三个部分组成：Template, ItemTemplate, &nbsp;ItemsPanel.</span></p>
<p><span style="font-family:verdana,'ms song',宋体,Arial,微软雅黑,Helvetica,sans-serif; font-size:13px; line-height:19px; text-align:left; background-color:rgb(254,254,242)"><br>
</span></p>
<p><span style="font-family:verdana,'ms song',宋体,Arial,微软雅黑,Helvetica,sans-serif; font-size:13px; line-height:19px; text-align:left; background-color:rgb(254,254,242)"><span style="font-family:verdana,'ms song',宋体,Arial,微软雅黑,Helvetica,sans-serif; font-size:13px; line-height:19px; text-align:left; background-color:rgb(254,254,242)">Template
 是整个控件的架构设计，最外面放什么的东东，里面放什么东东，都在这里控制，负责宏观的结构，下面这个例子：最外面是一个border，然后要放一个ScrollViewer用来滚动展示，滚动的内容，就由ItemsPresenter 来决定。</span><br>
</span></p>
<p><span style="font-family:verdana,'ms song',宋体,Arial,微软雅黑,Helvetica,sans-serif; font-size:13px; line-height:19px; text-align:left; background-color:rgb(254,254,242)"><span style="font-family:verdana,'ms song',宋体,Arial,微软雅黑,Helvetica,sans-serif; font-size:13px; line-height:19px; text-align:left; background-color:rgb(254,254,242)"><br>
</span></span></p>
<p><span style="font-family:verdana,'ms song',宋体,Arial,微软雅黑,Helvetica,sans-serif; font-size:13px; line-height:19px; text-align:left; background-color:rgb(254,254,242)"><span style="font-family:verdana,'ms song',宋体,Arial,微软雅黑,Helvetica,sans-serif; font-size:13px; line-height:19px; text-align:left; background-color:rgb(254,254,242)"><span style="font-family:verdana,'ms song',宋体,Arial,微软雅黑,Helvetica,sans-serif; font-size:13px; line-height:19px; background-color:rgb(254,254,242)">ItemsPanel，作为数据展示，总要有个容器吧，这个panel就是为了设置容器用的，设置为StackPanel，WrapPanel都可以，足够灵活，对应上一条中的ItemsPresenter</span><br>
</span></span></p>
<p><span style="font-family:verdana,'ms song',宋体,Arial,微软雅黑,Helvetica,sans-serif; font-size:13px; line-height:19px; text-align:left; background-color:rgb(254,254,242)"><span style="font-family:verdana,'ms song',宋体,Arial,微软雅黑,Helvetica,sans-serif; font-size:13px; line-height:19px; text-align:left; background-color:rgb(254,254,242)"><span style="font-family:verdana,'ms song',宋体,Arial,微软雅黑,Helvetica,sans-serif; font-size:13px; line-height:19px; background-color:rgb(254,254,242)"><br>
</span></span></span></p>
<p><span style="font-family:verdana,'ms song',宋体,Arial,微软雅黑,Helvetica,sans-serif; font-size:13px; line-height:19px; text-align:left; background-color:rgb(254,254,242)"><span style="font-family:verdana,'ms song',宋体,Arial,微软雅黑,Helvetica,sans-serif; font-size:13px; line-height:19px; text-align:left; background-color:rgb(254,254,242)"><span style="font-family:verdana,'ms song',宋体,Arial,微软雅黑,Helvetica,sans-serif; font-size:13px; line-height:19px; background-color:rgb(254,254,242)"><span style="font-family:verdana,'ms song',宋体,Arial,微软雅黑,Helvetica,sans-serif; font-size:13px; line-height:19px; text-align:left; background-color:rgb(254,254,242)">ItemTemplate
 ， 每一个数据条目应该是个什么样子，负责具体呈现的</span><br>
</span></span></span></p>
<p><span style="font-family:verdana,'ms song',宋体,Arial,微软雅黑,Helvetica,sans-serif; font-size:13px; line-height:19px; text-align:left; background-color:rgb(254,254,242)"><span style="font-family:verdana,'ms song',宋体,Arial,微软雅黑,Helvetica,sans-serif; font-size:13px; line-height:19px; text-align:left; background-color:rgb(254,254,242)"><span style="font-family:verdana,'ms song',宋体,Arial,微软雅黑,Helvetica,sans-serif; font-size:13px; line-height:19px; background-color:rgb(254,254,242)"><span style="font-family:verdana,'ms song',宋体,Arial,微软雅黑,Helvetica,sans-serif; font-size:13px; line-height:19px; text-align:left; background-color:rgb(254,254,242)"><br>
</span></span></span></span></p>
<p><span style="font-family:verdana,'ms song',宋体,Arial,微软雅黑,Helvetica,sans-serif; font-size:13px; line-height:19px; text-align:left; background-color:rgb(254,254,242)"><span style="font-family:verdana,'ms song',宋体,Arial,微软雅黑,Helvetica,sans-serif; font-size:13px; line-height:19px; text-align:left; background-color:rgb(254,254,242)"><span style="font-family:verdana,'ms song',宋体,Arial,微软雅黑,Helvetica,sans-serif; font-size:13px; line-height:19px; background-color:rgb(254,254,242)"><span style="font-family:verdana,'ms song',宋体,Arial,微软雅黑,Helvetica,sans-serif; font-size:13px; line-height:19px; text-align:left; background-color:rgb(254,254,242)"><span style="font-family:verdana,'ms song',宋体,Arial,微软雅黑,Helvetica,sans-serif; font-size:13px; line-height:19px; background-color:rgb(254,254,242)">附带一个，ItemContainerStyle
 ，也就是控制每个数据条目的显示样式</span><br>
</span></span></span></span></p>

            <div>
                作者：xiaogui340 发表于2012/10/23 9:21:52 <a href="http://blog.csdn.net/xiaogui340/article/details/8101347">原文链接</a>
            </div>
            <div>
            阅读：448 评论：0 <a href="http://blog.csdn.net/xiaogui340/article/details/8101347#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]oracle和C# 关于时间格式写法的一个小区别]]></title>
        <link>http://blog.csdn.net/xiaogui340/article/details/7550281</link>
        <guid>http://blog.csdn.net/xiaogui340/article/details/7550281</guid>
        <author>xiaogui340</author>
        <pubDate>2012/5/9 15:42:11</pubDate>
        <description><![CDATA[
            
<p><span style="white-space:pre"></span>今天在写代码的时候把这两种&#26684;式搞混了，现在写下来权作提醒：</p>
<p><br>
</p>
<p>orcale：<pre name="code" class="csharp">to_date('2012-10-10 10:10:10','yyyy-MM-dd hh24:mi:ss')</pre>C#：<pre name="code" class="csharp">datetime.now.tostring('yyyy-MM-dd hh:mm:ss')</pre><br>
</p>
<p>注意关于小时和分钟的写法哦～～～</p>

            <div>
                作者：xiaogui340 发表于2012/5/9 15:42:11 <a href="http://blog.csdn.net/xiaogui340/article/details/7550281">原文链接</a>
            </div>
            <div>
            阅读：230 评论：0 <a href="http://blog.csdn.net/xiaogui340/article/details/7550281#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[转]反射方法调用时的一个错误：参数计数不匹配（ parameter count mismatch ）]]></title>
        <link>http://blog.csdn.net/xiaogui340/article/details/7541612</link>
        <guid>http://blog.csdn.net/xiaogui340/article/details/7541612</guid>
        <author>xiaogui340</author>
        <pubDate>2012/5/7 11:11:37</pubDate>
        <description><![CDATA[
            
<p style="margin-top:5px; margin-right:auto; margin-bottom:5px; margin-left:auto; padding-top:0px; padding-bottom:0px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25px">
大致情况是这样，我在一个DLL定义了一个方法A，A的参数为一个参数数组；</p>
<p style="margin-top:5px; margin-right:auto; margin-bottom:5px; margin-left:auto; padding-top:0px; padding-bottom:0px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25px">
然后使用反射调用其中的方法A，并且传递一个object数组到方法A</p>
<p style="margin-top:5px; margin-right:auto; margin-bottom:5px; margin-left:auto; padding-top:0px; padding-bottom:0px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25px">
大致代码如下：</p>
<p style="margin-top:5px; margin-right:auto; margin-bottom:5px; margin-left:auto; padding-top:0px; padding-bottom:0px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25px">
&nbsp;</p>
<div class="cnblogs_code" style="margin-top:5px; margin-right:0px; margin-bottom:5px; margin-left:0px; padding-top:5px; padding-right:5px; padding-bottom:5px; padding-left:5px; background-color:rgb(245,245,245); font-family:'Courier New'; border-top-width:1px; border-right-width:1px; border-bottom-width:1px; border-left-width:1px; border-top-style:solid; border-right-style:solid; border-bottom-style:solid; border-left-style:solid; border-top-color:rgb(204,204,204); border-right-color:rgb(204,204,204); border-bottom-color:rgb(204,204,204); border-left-color:rgb(204,204,204); word-break:break-all; overflow-x:auto; overflow-y:auto; color:rgb(51,51,51)">
<img id="code_img_closed_e88702e9-1b9e-4e83-8b95-71467642baec" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:5px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; vertical-align:middle; display:inline"><span class="cnblogs_code_collapse" style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:2px; padding-right:2px; padding-bottom:2px; padding-left:2px; border-right-color:rgb(128,128,128); border-right-width:1px; border-right-style:solid; border-top-color:rgb(128,128,128); border-top-width:1px; border-top-style:solid; border-left-color:rgb(128,128,128); border-left-width:1px; border-left-style:solid; border-bottom-color:rgb(128,128,128); border-bottom-width:1px; border-bottom-style:solid; background-color:rgb(255,255,255); line-height:1.5">代码</span></div>
<p style="margin-top:5px; margin-right:auto; margin-bottom:5px; margin-left:auto; padding-top:0px; padding-bottom:0px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25px">
&nbsp;</p>
<p style="margin-top:5px; margin-right:auto; margin-bottom:5px; margin-left:auto; padding-top:0px; padding-bottom:0px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25px">
<span style="font-size:12px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px"></span>&nbsp;</p>
<p style="margin-top:5px; margin-right:auto; margin-bottom:5px; margin-left:auto; padding-top:0px; padding-bottom:0px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25px">
<span style="font-size:12px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px">这样如果你直接把接收到的参数数组postedParams直接传递给invoke方法的话，就会产生标题所述的错误；</span></p>
<p style="margin-top:5px; margin-right:auto; margin-bottom:5px; margin-left:auto; padding-top:0px; padding-bottom:0px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25px">
<span style="font-size:12px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px">后来查阅MSDN，这个帖子让我茅塞顿开</span></p>
<p style="margin-top:5px; margin-right:auto; margin-bottom:5px; margin-left:auto; padding-top:0px; padding-bottom:0px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25px">
<a title="Parameter count mismatch" href="http://social.msdn.microsoft.com/forums/en-US/netfxbcl/thread/23d052e0-8c96-4cf2-be47-417a4ba24de0" target="_blank" style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; text-decoration:none; color:rgb(0,0,0); border-bottom-width:1px; border-bottom-style:dotted; border-bottom-color:rgb(51,51,51)">Parameter
 count mismatch</a></p>
<p style="margin-top:5px; margin-right:auto; margin-bottom:5px; margin-left:auto; padding-top:0px; padding-bottom:0px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25px">
应该这样理解：Invoke方法的参数当中有一个自己的object[]，正好你传递的参数也是object[],这样的话invoke就会把你参数数组里面的第一个参数作为参数传递给你要调用的方法，于是就报错了。</p>
<p style="margin-top:5px; margin-right:auto; margin-bottom:5px; margin-left:auto; padding-top:0px; padding-bottom:0px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25px">
解决问题的如下：</p>
<p style="margin-top:5px; margin-right:auto; margin-bottom:5px; margin-left:auto; padding-top:0px; padding-bottom:0px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25px">
postedParams = new object[] { postedParams };</p>
<p style="margin-top:5px; margin-right:auto; margin-bottom:5px; margin-left:auto; padding-top:0px; padding-bottom:0px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25px">
StrinForBack&nbsp;<span style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; color:rgb(0,0,0)">=</span><span style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; color:rgb(0,0,0)">&nbsp;(</span><span style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; color:rgb(0,0,255)">string</span><span style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; color:rgb(0,0,0)">)currentMethod.Invoke(currentInstance,&nbsp;postedParams);</span></p>
<p style="margin-top:5px; margin-right:auto; margin-bottom:5px; margin-left:auto; padding-top:0px; padding-bottom:0px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25px">
<span style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; color:rgb(0,0,0)">╮(╯_╰)╭</span></p>

            <div>
                作者：xiaogui340 发表于2012/5/7 11:11:37 <a href="http://blog.csdn.net/xiaogui340/article/details/7541612">原文链接</a>
            </div>
            <div>
            阅读：448 评论：0 <a href="http://blog.csdn.net/xiaogui340/article/details/7541612#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[转]Invoke and BeginInvoke]]></title>
        <link>http://blog.csdn.net/xiaogui340/article/details/7472712</link>
        <guid>http://blog.csdn.net/xiaogui340/article/details/7472712</guid>
        <author>xiaogui340</author>
        <pubDate>2012/4/18 11:11:21</pubDate>
        <description><![CDATA[
            
<h2><a id="cb_post_title_url" href="http://www.cnblogs.com/worldreason/archive/2008/06/09/1216127.html" style="color:rgb(0,153,51)">Invoke and BeginInvoke</a></h2>
<div id="cnblogs_post_body"><a title="invoke and begininvoke,本文地址" href="http://www.cnblogs.com/worldreason/archive/2008/06/09/1216127.html" style="color:rgb(0,153,51)">Invoke and BeginInvoke</a><br>
<br>
在Invoke或者BeginInvoke的使用中无一例外地使用了委托Delegate，至于委托的本质请参考我的另一随笔：<a href="http://www.cnblogs.com/worldreason/archive/2008/05/10/1191575.html" style="color:rgb(0,153,51)">对.net事件的看法</a>。<br>
&nbsp;
<h2>一、为什么Control类提供了Invoke和BeginInvoke机制？</h2>
<p>关于这个问题的最主要的原因已经是dotnet程序员众所周知的，我在此费点笔墨再次记录到自己的日志，以便日后提醒一下自己。</p>
<h3>1、windows程序消息机制</h3>
<p>Windows GUI程序是基于消息机制的，有个主线程维护着一个消息泵。这个消息泵让windows程序生生不息。<br>
</p>
<div align="center"><img height="291" alt="" src="http://images.cnblogs.com/cnblogs_com/worldreason/synchronize/messageloop.jpg" width="436" border="0"></div>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Windows GUI程序的消息循环<br>
<br>
&nbsp;
<p>&nbsp;</p>
<p>Windows程序有个消息队列，窗体上的所有消息是这个队列里面消息的最主要来源。这里的while循环使用了GetMessage（）这个方法，这是个阻塞方法，也就是队列为空时方法就会被阻塞，从而这个while循环停止运动，这避免了一个程序把cpu无缘无故地耗尽，让其它程序难以得到响应。当然在某些需要cpu最大限度运动的程序里面就可以使用另外的方法，例如某些3d游戏或者及时战略游戏中，一般会使用PeekMessage（）这个方法，它不会被windows阻塞，从而保证整个游戏的流畅和比较高的帧速。</p>
<p>这个主线程维护着整个窗体以及上面的子控件。当它得到一个消息，就会调用DispatchMessage方法派遣消息，这会引起对窗体上的窗口过程的调用。窗口过程里面当然是程序员提供的窗体数据更新代码和其它代码。</p>
<h3>2、dotnet里面的消息循环</h3>
<p>public static void Main(string[] args)</p>
<p>{</p>
<p>&nbsp;&nbsp; Form f = new Form();</p>
<p>&nbsp;&nbsp; Application.Run(f);</p>
<p>}</p>
<p>Dotnet窗体程序封装了上述的while循环，这个循环就是通过Application.Run方法启动的。</p>
<h3>3、线程外操作GUI控件的问题</h3>
<p>如果从另外一个线程操作windows窗体上的控件，就会和主线程产生竞争，造成不可预料的结果，甚至死锁。因此windows GUI编程有一个规则，就是只能通过创建控件的线程来操作控件的数据，否则就可能产生不可预料的结果。</p>
<p><span style="color:red">因此，</span><span style="color:red">dotnet</span><span style="color:red">里面，为了方便地解决这些问题，</span><span style="color:red">Control</span><span style="color:red">类实现了</span><span style="color:red">ISynchronizeInvoke</span><span style="color:red">接口，提供了</span><span style="color:red">Invoke</span><span style="color:red">和</span><span style="color:red">BeginInvoke</span><span style="color:red">方法来提供让其它线程更新</span><span style="color:red">GUI</span><span style="color:red">界面控件的机制。</span></p>
<p align="left"><span style="color:blue">public</span>&nbsp;<span style="color:blue">interface</span>&nbsp;<span style="color:rgb(43,145,175)">ISynchronizeInvoke</span></p>
<p align="left">{</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [<span style="color:rgb(43,145,175)">HostProtection</span>(<span style="color:rgb(43,145,175)">SecurityAction</span>.LinkDemand, Synchronization=<span style="color:blue">true</span>, ExternalThreading=<span style="color:blue">true</span>)]</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:rgb(43,145,175)">IAsyncResult</span>&nbsp;BeginInvoke(<span style="color:rgb(43,145,175)">Delegate</span>&nbsp;method,&nbsp;<span style="color:blue">object</span>[] args);</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue">object</span>&nbsp;EndInvoke(<span style="color:rgb(43,145,175)">IAsyncResult</span>&nbsp;result);</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue">object</span>&nbsp;Invoke(<span style="color:rgb(43,145,175)">Delegate</span>&nbsp;method,&nbsp;<span style="color:blue">object</span>[] args);</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue">bool</span>&nbsp;InvokeRequired {&nbsp;<span style="color:blue">get</span>; }</p>
<p align="left">}</p>
<p align="left">}</p>
<p>如果从线程外操作windows窗体控件，那么就需要使用Invoke或者BeginInvoke方法，通过一个委托把调用封送到控件所属的线程上执行。</p>
<h3>二、消息机制---线程间和进程间通信机制</h3>
<h3>1、window消息发送</h3>
<p>Windows消息机制是windows平台上的线程或者进程间通信机制之一。Windows消息&#20540;其实就是定义的一个数据结构，最重要的是消息的类型，它就是一个整数；然后就是消息的参数。消息的参数可以表示很多东西。</p>
<p>Windows提供了一些api用来向一个线程的消息队列发送消息。因此，一个线程可以向另一个线程的消息队列发送消息从而告诉对方做什么，这样就完成了线程间的通信。有些api发送消息需要一个窗口句柄，这种函数可以把消息发送到指定窗口的主线程消息队列；而有些则可以直接通过线程句柄，把消息发送到该线程消息队列中。<br>
</p>
<div align="center"><img height="291" alt="" src="http://images.cnblogs.com/cnblogs_com/worldreason/synchronize/sendmessage.jpg" width="624" border="0"></div>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<p>&nbsp;</p>
<p align="center">用消息机制通信</p>
<p>&nbsp;</p>
<p>SendMessage是windows api，用来把一个消息发送到一个窗口的消息队列。这个方法是个阻塞方法，也就是操作系统会确保消息的确发送到目的消息队列，并且该消息被处理完毕以后，该函数才返回。返回之前，调用者将会被暂时阻塞。</p>
<p>PostMessage也是一个用来发送消息到窗口消息队列的api函数，但这个方法是非阻塞的。也就是它会马上返回，而不管消息是否真的发送到目的地，也就是调用者不会被阻塞。</p>
<h3>2、Invoke and BeginInvoke</h3>
<div align="center"><img height="286" alt="" src="http://images.cnblogs.com/cnblogs_com/worldreason/synchronize/invoke.jpg" width="529" border="0"></div>
<p>&nbsp;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Invoke or BeginInvoke</p>
<p>&nbsp;</p>
<p>Invoke或者BeginInvoke方法都需要一个委托对象作为参数。委托类&#20284;于回调函数的地址，因此调用者通过这两个方法就可以把需要调用的函数地址封送给界面线程。这些方法里面如果包含了更改控件状态的代码，那么由于最终执行这个方法的是界面线程，从而避免了竞争条件，避免了不可预料的问题。如果其它线程直接操作界面线程所属的控件，那么将会产生竞争条件，造成不可预料的结果。</p>
<p>使用Invoke完成一个委托方法的封送，就类&#20284;于使用SendMessage方法来给界面线程发送消息，是一个同步方法。也就是说在Invoke封送的方法被执行完毕前，Invoke方法不会返回，从而调用者线程将被阻塞。</p>
<p>使用BeginInvoke方法封送一个委托方法，类&#20284;于使用PostMessage进行通信，这是一个异步方法。也就是该方法封送完毕后马上返回，不会等待委托方法的执行结束，调用者线程将不会被阻塞。但是调用者也可以使用EndInvoke方法或者其它类&#20284;WaitHandle机制等待异步操作的完成。</p>
<p>但是在内部实现上，Invoke和BeginInvoke都是用了PostMessage方法，从而避免了SendMessage带来的问题。而Invoke方法的同步阻塞是靠WaitHandle机制来完成的。</p>
<h3>3、使用场合问题</h3>
<p>如果你的后台线程在更新一个UI控件的状态后不需要等待，而是要继续往下处理，那么你就应该使用BeginInvoke来进行异步处理。</p>
<p>如果你的后台线程需要操作UI控件，并且需要等到该操作执行完毕才能继续执行，那么你就应该使用Invoke。否则，在后台线程和主截面线程共享某些状态数据的情况下，如果不同步调用，而是各自继续执行的话，可能会造成执行序列上的问题，虽然不发生死锁，但是会出现不可预料的显示结果或者数据处理错误。</p>
<p>可以看到ISynchronizeInvoke有一个属性，InvokeRequired。这个属性就是用来在编程的时候确定，一个对象访问UI控件的时候是否需要使用Invoke或者BeginInvoke来进行封送。如果不需要那么就可以直接更新。在调用者对象和UI对象同属一个线程的时候这个属性返回false。在后面的代码分析中我们可以看到，Control类对这一属性的实现就是在判断调用者和控件是否属于同一个线程的。</p>
<h3>三、Delegate.BeginInvoke</h3>
<p>通过一个委托来进行同步方法的异步调用，也是.net提供的异步调用机制之一。但是Delegate.BeginInvoke方法是从ThreadPool取出一个线程来执行这个方法，以获得异步执行效果的。也就是说，如果采用这种方式提交多个异步委托，那么这些调用的顺序无法得到保证。而且由于是使用线程池里面的线程来完成任务，使用频繁，会对系统的性能造成影响。</p>
<p>Delegate.BeginInvoke也是讲一个委托方法封送到其它线程，从而通过异步机制执行一个方法。调用者线程则可以在完成封送以后去继续它的工作。但是这个方法封送到的最终执行线程是运行库从ThreadPool里面选取的一个线程。<br>
</p>
<p><span style="color:red">这里需要纠正一个误区，那就是Control类上的异步调用BeginInvoke并没有开辟新的线程完成委托任务，而是让界面控件的所属线程完成委托任务的。看来异步操作就是开辟新线程的说法不一定准确。</span>&nbsp;</p>
<h3>四、用Reflector察看一些相关代码</h3>
<h3>1、Control.BeginInvoke and Control.Invoke</h3>
<pre><span style="color:rgb(16,0,160)">public</span> <a title="System.IAsyncResult" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.IAsyncResult" style="color:rgb(0,153,51)">IAsyncResult</a> <strong><a href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/BeginInvoke(System.Delegate,Object%5b%5d):System.IAsyncResult" style="color:rgb(0,153,51)">BeginInvoke</a></strong>(<a title="System.Delegate" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.Delegate" style="color:rgb(0,153,51)">Delegate</a> method, <span style="color:rgb(16,0,160)">params <a title="System.Object" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.Object" style="color:rgb(0,153,51)">object</a>[] args)</span></pre>
<pre>{</pre>
<pre>&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">using (new <a title="System.Windows.Forms.Control&#43;MultithreadSafeCallScope.MultithreadSafeCallScope();" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control.MultithreadSafeCallScope/.ctor()" style="color:rgb(0,153,51)">MultithreadSafeCallScope</a>())</span></pre>
<pre>&nbsp;&nbsp;&nbsp; {</pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">return (<a title="System.IAsyncResult" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.IAsyncResult" style="color:rgb(0,153,51)">IAsyncResult</a>) this.<a title="Control System.Windows.Forms.Control.FindMarshalingControl();" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/FindMarshalingControl():System.Windows.Forms.Control" style="color:rgb(0,153,51)">FindMarshalingControl</a>().<a title="object System.Windows.Forms.Control.MarshaledInvoke(Control caller, Delegate method, object[] args, bool synchronous);" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/MarshaledInvoke(System.Windows.Forms.Control,System.Delegate,Object%5b%5d,Boolean):Object" style="color:rgb(0,153,51)">MarshaledInvoke</a>(this, method, args, <span style="color:maroon">false</span>);</span></pre>
<pre>&nbsp;&nbsp;&nbsp; }</pre>
<pre>}</pre>
<pre><span style="color:rgb(16,0,160)">public</span> <a title="System.Object" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.Object" style="color:rgb(0,153,51)">object</a> <strong><a href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/Invoke(System.Delegate,Object%5b%5d):Object" style="color:rgb(0,153,51)">Invoke</a></strong>(<a title="System.Delegate" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.Delegate" style="color:rgb(0,153,51)">Delegate</a> method, <span style="color:rgb(16,0,160)">params <a title="System.Object" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.Object" style="color:rgb(0,153,51)">object</a>[] args)</span></pre>
<pre>{</pre>
<pre>&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">using (new <a title="System.Windows.Forms.Control&#43;MultithreadSafeCallScope.MultithreadSafeCallScope();" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control.MultithreadSafeCallScope/.ctor()" style="color:rgb(0,153,51)">MultithreadSafeCallScope</a>())</span></pre>
<pre>&nbsp;&nbsp;&nbsp; {</pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">return this.<a title="Control System.Windows.Forms.Control.FindMarshalingControl();" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/FindMarshalingControl():System.Windows.Forms.Control" style="color:rgb(0,153,51)">FindMarshalingControl</a>().<a title="object System.Windows.Forms.Control.MarshaledInvoke(Control caller, Delegate method, object[] args, bool synchronous);" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/MarshaledInvoke(System.Windows.Forms.Control,System.Delegate,Object%5b%5d,Boolean):Object" style="color:rgb(0,153,51)">MarshaledInvoke</a>(this, method, args, <span style="color:maroon">true</span>);</span></pre>
<pre>&nbsp;&nbsp;&nbsp; }</pre>
<pre>}</pre>
<p>这里的<a title="Control System.Windows.Forms.Control.FindMarshalingControl();" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/FindMarshalingControl():System.Windows.Forms.Control" style="color:rgb(0,153,51)"><span style="color:windowtext">FindMarshalingControl</span></a>方法通过一个循环向上回溯，从当前控件开始回溯父控件，直到找到最顶级的父控件，用它作为封送对象。例如，我们调用窗体上一个进度条的Invoke方法封送委托，但是实际上会回溯到主窗体，通过这个控件对象来封送委托。因为主窗体是主线程消息队列相关的，发送给主窗体的消息才能发送到界面主线程消息队列。</p>
<p>我们可以看到Invoke和BeginInvoke方法使用了同样的实现，只是<a title="object System.Windows.Forms.Control.MarshaledInvoke(Control caller, Delegate method, object[] args, bool synchronous);" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/MarshaledInvoke(System.Windows.Forms.Control,System.Delegate,Object%5b%5d,Boolean):Object" style="color:rgb(0,153,51)"><span style="color:windowtext">MarshaledInvoke</span></a>方法的最后一个参数&#20540;不一样。</p>
<h3>2、<a title="object System.Windows.Forms.Control.MarshaledInvoke(Control caller, Delegate method, object[] args, bool synchronous);" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/MarshaledInvoke(System.Windows.Forms.Control,System.Delegate,Object%5b%5d,Boolean):Object" style="color:rgb(0,153,51)"><span style="color:windowtext">MarshaledInvoke</span></a></h3>
<pre><span style="color:rgb(16,0,160)">private</span> <a title="System.Object" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.Object" style="color:rgb(0,153,51)">object</a> <strong><a href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/MarshaledInvoke(System.Windows.Forms.Control,System.Delegate,Object%5b%5d,Boolean):Object" style="color:rgb(0,153,51)">MarshaledInvoke</a></strong>(<a title="System.Windows.Forms.Control" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control" style="color:rgb(0,153,51)">Control</a> caller, <a title="System.Delegate" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.Delegate" style="color:rgb(0,153,51)">Delegate</a> method, <a title="System.Object" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.Object" style="color:rgb(0,153,51)">object</a>[] args, <a title="System.Boolean" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.Boolean" style="color:rgb(0,153,51)">bool</a> synchronous)</pre>
<pre>{</pre>
<pre>&nbsp;&nbsp;&nbsp; <a title="System.Int32" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.Int32" style="color:rgb(0,153,51)">int</a> <strong>num</strong>;</pre>
<pre>&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">if (!this.<a title="bool System.Windows.Forms.Control.IsHandleCreated { ... }" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/property:IsHandleCreated:Boolean" style="color:rgb(0,153,51)">IsHandleCreated</a>)</span></pre>
<pre>&nbsp;&nbsp;&nbsp; {</pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">throw new <a title="System.InvalidOperationException.InvalidOperationException(string);" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.InvalidOperationException/.ctor(String)" style="color:rgb(0,153,51)">InvalidOperationException</a>(<a title="System.Windows.Forms.SR" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.SR" style="color:rgb(0,153,51)">SR</a>.<a title="string System.Windows.Forms.SR.GetString(string name);" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.SR/GetString(String):String" style="color:rgb(0,153,51)">GetString</a>(<span style="color:maroon">&quot;ErrorNoMarshalingThread&quot;</span>));</span></pre>
<pre>&nbsp;&nbsp;&nbsp; }</pre>
<pre>&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">if (((<a title="System.Windows.Forms.Control&#43;ActiveXImpl" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control.ActiveXImpl" style="color:rgb(0,153,51)">ActiveXImpl</a>) this.<a title="PropertyStore System.Windows.Forms.Control.Properties { ... }" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/property:Properties:System.Windows.Forms.PropertyStore" style="color:rgb(0,153,51)">Properties</a>.<a title="object System.Windows.Forms.PropertyStore.GetObject(int key);" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.PropertyStore/GetObject(Int32):Object" style="color:rgb(0,153,51)">GetObject</a>(<a title="int System.Windows.Forms.Control.PropActiveXImpl;" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/PropActiveXImpl:Int32" style="color:rgb(0,153,51)">PropActiveXImpl</a>)) != <span style="color:maroon">null</span>)</span></pre>
<pre>&nbsp;&nbsp;&nbsp; {</pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a title="System.Windows.Forms.IntSecurity" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.IntSecurity" style="color:rgb(0,153,51)">IntSecurity</a>.<a title="CodeAccessPermission System.Windows.Forms.IntSecurity.UnmanagedCode { ... }" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.IntSecurity/property:UnmanagedCode:System.Security.CodeAccessPermission" style="color:rgb(0,153,51)">UnmanagedCode</a>.<a title="void System.Security.CodeAccessPermission.Demand();" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.Security.CodeAccessPermission/Demand()" style="color:rgb(0,153,51)">Demand</a>();</pre>
<pre>&nbsp;&nbsp;&nbsp; }</pre>
<pre>&nbsp;&nbsp;&nbsp; <a title="System.Boolean" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.Boolean" style="color:rgb(0,153,51)">bool</a> <strong>flag</strong> = <span style="color:maroon">false;</span></pre>
<pre>&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">if ((<a title="System.Windows.Forms.SafeNativeMethods" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.SafeNativeMethods" style="color:rgb(0,153,51)">SafeNativeMethods</a>.<a title="int System.Windows.Forms.SafeNativeMethods.GetWindowThreadProcessId(HandleRef hWnd, out int lpdwProcessId);" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.SafeNativeMethods/GetWindowThreadProcessId(System.Runtime.InteropServices.HandleRef,Int32&amp;):Int32" style="color:rgb(0,153,51)">GetWindowThreadProcessId</a>(new <a title="System.Runtime.InteropServices.HandleRef.HandleRef(object, IntPtr);" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.Runtime.InteropServices.HandleRef/.ctor(Object,IntPtr)" style="color:rgb(0,153,51)">HandleRef</a>(this, this.<a title="IntPtr System.Windows.Forms.Control.Handle { ... }" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/property:Handle:IntPtr" style="color:rgb(0,153,51)">Handle</a>), out num) == <a title="System.Windows.Forms.SafeNativeMethods" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.SafeNativeMethods" style="color:rgb(0,153,51)">SafeNativeMethods</a>.<a title="int System.Windows.Forms.SafeNativeMethods.GetCurrentThreadId();" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.SafeNativeMethods/GetCurrentThreadId():Int32" style="color:rgb(0,153,51)">GetCurrentThreadId</a>()) &amp;&amp; synchronous)</span></pre>
<pre>&nbsp;&nbsp;&nbsp; {</pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; flag = <span style="color:maroon">true;</span></pre>
<pre>&nbsp;&nbsp;&nbsp; }</pre>
<pre>&nbsp;&nbsp;&nbsp; <a title="System.Threading.ExecutionContext" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.Threading.ExecutionContext" style="color:rgb(0,153,51)">ExecutionContext</a> <strong>executionContext</strong> = <span style="color:maroon">null;</span></pre>
<pre>&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">if (!flag)</span></pre>
<pre>&nbsp;&nbsp;&nbsp; {</pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; executionContext = <a title="System.Threading.ExecutionContext" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.Threading.ExecutionContext" style="color:rgb(0,153,51)">ExecutionContext</a>.<a title="ExecutionContext System.Threading.ExecutionContext.Capture();" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.Threading.ExecutionContext/Capture():System.Threading.ExecutionContext" style="color:rgb(0,153,51)">Capture</a>();</pre>
<pre>&nbsp;&nbsp;&nbsp; }</pre>
<pre>&nbsp;&nbsp;&nbsp; <a title="System.Windows.Forms.Control&#43;ThreadMethodEntry" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control.ThreadMethodEntry" style="color:rgb(0,153,51)">ThreadMethodEntry</a> <strong>entry</strong> = <span style="color:rgb(16,0,160)">new <a title="System.Windows.Forms.Control&#43;ThreadMethodEntry.ThreadMethodEntry(Control caller, Delegate method, object[] args, bool synchronous, ExecutionContext executionContext);" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control.ThreadMethodEntry/.ctor(System.Windows.Forms.Control,System.Delegate,Object%5b%5d,Boolean,System.Threading.ExecutionContext)" style="color:rgb(0,153,51)">ThreadMethodEntry</a>(caller, method, args, synchronous, executionContext);</span></pre>
<pre>&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">lock (this)</span></pre>
<pre>&nbsp;&nbsp;&nbsp; {</pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">if (this.<a title="Queue System.Windows.Forms.Control.threadCallbackList;" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/threadCallbackList:System.Collections.Queue" style="color:rgb(0,153,51)">threadCallbackList</a> == <span style="color:maroon">null</span>)</span></pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">this.<a title="Queue System.Windows.Forms.Control.threadCallbackList;" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/threadCallbackList:System.Collections.Queue" style="color:rgb(0,153,51)">threadCallbackList</a> = new <a title="System.Collections.Queue.Queue();" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.Collections.Queue/.ctor()" style="color:rgb(0,153,51)">Queue</a>();</span></pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</pre>
<pre>&nbsp;&nbsp;&nbsp; }</pre>
<pre>&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">lock (this.<a title="Queue System.Windows.Forms.Control.threadCallbackList;" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/threadCallbackList:System.Collections.Queue" style="color:rgb(0,153,51)">threadCallbackList</a>)</span></pre>
<pre>&nbsp;&nbsp;&nbsp; {</pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span style="color:rgb(16,0,160)">if (<a title="int System.Windows.Forms.Control.threadCallbackMessage;" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/threadCallbackMessage:Int32" style="color:rgb(0,153,51)">threadCallbackMessage</a> == <span style="color:maroon">0</span>)</span></pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a title="int System.Windows.Forms.Control.threadCallbackMessage;" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/threadCallbackMessage:Int32" style="color:rgb(0,153,51)">threadCallbackMessage</a> = <a title="System.Windows.Forms.SafeNativeMethods" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.SafeNativeMethods" style="color:rgb(0,153,51)">SafeNativeMethods</a>.<a title="int System.Windows.Forms.SafeNativeMethods.RegisterWindowMessage(string msg);" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.SafeNativeMethods/RegisterWindowMessage(String):Int32" style="color:rgb(0,153,51)">RegisterWindowMessage</a>(<a title="System.Windows.Forms.Application" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Application" style="color:rgb(0,153,51)">Application</a>.<a title="string System.Windows.Forms.Application.WindowMessagesVersion { ... }" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Application/property:WindowMessagesVersion:String" style="color:rgb(0,153,51)">WindowMessagesVersion</a> &#43; <span style="color:maroon">&quot;_ThreadCallbackMessage&quot;);</span></pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">this.<a title="Queue System.Windows.Forms.Control.threadCallbackList;" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/threadCallbackList:System.Collections.Queue" style="color:rgb(0,153,51)">threadCallbackList</a>.<a title="void System.Collections.Queue.Enqueue(object);" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.Collections.Queue/Enqueue(Object)" style="color:rgb(0,153,51)">Enqueue</a>(entry);</span></pre>
<pre>&nbsp;&nbsp;&nbsp; }</pre>
<pre>&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">if (flag)</span></pre>
<pre>&nbsp;&nbsp;&nbsp; {</pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">this.<a title="void System.Windows.Forms.Control.InvokeMarshaledCallbacks();" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/InvokeMarshaledCallbacks()" style="color:rgb(0,153,51)">InvokeMarshaledCallbacks</a>();</span></pre>
<pre>&nbsp;&nbsp;&nbsp; }</pre>
<pre>&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">else</span></pre>
<pre>&nbsp;&nbsp;&nbsp; {            <span style="color:rgb(51,153,102)">//终于找到你了，PostMessage</span></pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a title="System.Windows.Forms.UnsafeNativeMethods" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.UnsafeNativeMethods" style="color:rgb(0,153,51)">UnsafeNativeMethods</a>.<a title="bool System.Windows.Forms.UnsafeNativeMethods.PostMessage(HandleRef hwnd, int msg, IntPtr wparam, IntPtr lparam);" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.UnsafeNativeMethods/PostMessage(System.Runtime.InteropServices.HandleRef,Int32,IntPtr,IntPtr):Boolean" style="color:rgb(0,153,51)">PostMessage</a>(<span style="color:rgb(16,0,160)">new <a title="System.Runtime.InteropServices.HandleRef.HandleRef(object, IntPtr);" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.Runtime.InteropServices.HandleRef/.ctor(Object,IntPtr)" style="color:rgb(0,153,51)">HandleRef</a>(this, this.<a title="IntPtr System.Windows.Forms.Control.Handle { ... }" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/property:Handle:IntPtr" style="color:rgb(0,153,51)">Handle</a>), <a title="int System.Windows.Forms.Control.threadCallbackMessage;" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/threadCallbackMessage:Int32" style="color:rgb(0,153,51)">threadCallbackMessage</a>, <a title="System.IntPtr" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.IntPtr" style="color:rgb(0,153,51)">IntPtr</a>.<a title="IntPtr System.IntPtr.Zero;" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.IntPtr/Zero" style="color:rgb(0,153,51)">Zero</a>, <a title="System.IntPtr" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.IntPtr" style="color:rgb(0,153,51)">IntPtr</a>.<a title="IntPtr System.IntPtr.Zero;" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.IntPtr/Zero" style="color:rgb(0,153,51)">Zero</a>);</span></pre>
<pre>&nbsp;&nbsp;&nbsp; }</pre>
<pre>&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">if (!synchronous) <span style="color:rgb(0,176,80)">//</span></span><span style="color:rgb(0,176,80)">如果是异步，那么马上返回吧</span></pre>
<pre>&nbsp;&nbsp;&nbsp; {</pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">return entry;</span></pre>
<pre>&nbsp;&nbsp;&nbsp; }</pre>
<pre>&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">if (!entry.<a title="bool System.Windows.Forms.Control&#43;ThreadMethodEntry.IsCompleted { ... }" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control.ThreadMethodEntry/property:IsCompleted:Boolean" style="color:rgb(0,153,51)">IsCompleted</a>) <span style="color:rgb(0,176,80)">//</span></span><span style="color:rgb(0,176,80)">同步调用没结束，阻塞起来等待吧</span></pre>
<pre>&nbsp;&nbsp;&nbsp; {</pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">this.<a title="void System.Windows.Forms.Control.WaitForWaitHandle(WaitHandle waitHandle);" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/WaitForWaitHandle(System.Threading.WaitHandle)" style="color:rgb(0,153,51)">WaitForWaitHandle</a>(entry.<a title="WaitHandle System.Windows.Forms.Control&#43;ThreadMethodEntry.AsyncWaitHandle { ... }" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control.ThreadMethodEntry/property:AsyncWaitHandle:System.Threading.WaitHandle" style="color:rgb(0,153,51)">AsyncWaitHandle</a>);</span></pre>
<pre>&nbsp;&nbsp;&nbsp; }</pre>
<pre>&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">if (entry.<a title="Exception System.Windows.Forms.Control&#43;ThreadMethodEntry.exception;" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control.ThreadMethodEntry/exception:System.Exception" style="color:rgb(0,153,51)">exception</a> != <span style="color:maroon">null</span>)</span></pre>
<pre>&nbsp;&nbsp;&nbsp; {</pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">throw entry.<a title="Exception System.Windows.Forms.Control&#43;ThreadMethodEntry.exception;" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control.ThreadMethodEntry/exception:System.Exception" style="color:rgb(0,153,51)">exception</a>;</span></pre>
<pre>&nbsp;&nbsp;&nbsp; }</pre>
<pre>&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">return entry.<a title="object System.Windows.Forms.Control&#43;ThreadMethodEntry.retVal;" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control.ThreadMethodEntry/retVal:Object" style="color:rgb(0,153,51)">retVal</a>;</span></pre>
<pre>}</pre>
<p>怎么样，我们终于看到PostMessage了吧？通过windows消息机制实现了封送。而需要封送的委托方法作为消息的参数进行了传递。关于其它的代码这里不作进一步解释。</p>
<h3>3、InvokeRequired</h3>
<pre><span style="color:rgb(16,0,160)">public</span> <a title="System.Boolean" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.Boolean" style="color:rgb(0,153,51)">bool</a> <strong><a href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/property:InvokeRequired:Boolean" style="color:rgb(0,153,51)">InvokeRequired</a></strong></pre>
<pre>{</pre>
<pre>&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">get</span></pre>
<pre>&nbsp;&nbsp;&nbsp; {</pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">using (new <a title="System.Windows.Forms.Control&#43;MultithreadSafeCallScope.MultithreadSafeCallScope();" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control.MultithreadSafeCallScope/.ctor()" style="color:rgb(0,153,51)">MultithreadSafeCallScope</a>())</span></pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a title="System.Runtime.InteropServices.HandleRef" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.Runtime.InteropServices.HandleRef" style="color:rgb(0,153,51)">HandleRef</a> <strong>ref2</strong>;</pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a title="System.Int32" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.Int32" style="color:rgb(0,153,51)">int</a> <strong>num</strong>;</pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">if (this.<a title="bool System.Windows.Forms.Control.IsHandleCreated { ... }" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/property:IsHandleCreated:Boolean" style="color:rgb(0,153,51)">IsHandleCreated</a>)</span></pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ref2 = <span style="color:rgb(16,0,160)">new <a title="System.Runtime.InteropServices.HandleRef.HandleRef(object, IntPtr);" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.Runtime.InteropServices.HandleRef/.ctor(Object,IntPtr)" style="color:rgb(0,153,51)">HandleRef</a>(this, this.<a title="IntPtr System.Windows.Forms.Control.Handle { ... }" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/property:Handle:IntPtr" style="color:rgb(0,153,51)">Handle</a>);</span></pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">else</span></pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a title="System.Windows.Forms.Control" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control" style="color:rgb(0,153,51)">Control</a> <strong>wrapper</strong> = <span style="color:rgb(16,0,160)">this.<a title="Control System.Windows.Forms.Control.FindMarshalingControl();" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/FindMarshalingControl():System.Windows.Forms.Control" style="color:rgb(0,153,51)">FindMarshalingControl</a>();</span></pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">if (!wrapper.<a title="bool System.Windows.Forms.Control.IsHandleCreated { ... }" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/property:IsHandleCreated:Boolean" style="color:rgb(0,153,51)">IsHandleCreated</a>)</span></pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">return <span style="color:maroon">false</span>;</span></pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ref2 = <span style="color:rgb(16,0,160)">new <a title="System.Runtime.InteropServices.HandleRef.HandleRef(object, IntPtr);" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.Runtime.InteropServices.HandleRef/.ctor(Object,IntPtr)" style="color:rgb(0,153,51)">HandleRef</a>(wrapper, wrapper.<a title="IntPtr System.Windows.Forms.Control.Handle { ... }" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.Control/property:Handle:IntPtr" style="color:rgb(0,153,51)">Handle</a>);</span></pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a title="System.Int32" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.Int32" style="color:rgb(0,153,51)">int</a> <strong>windowThreadProcessId</strong> = <a title="System.Windows.Forms.SafeNativeMethods" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.SafeNativeMethods" style="color:rgb(0,153,51)">SafeNativeMethods</a>.<a title="int System.Windows.Forms.SafeNativeMethods.GetWindowThreadProcessId(HandleRef hWnd, out int lpdwProcessId);" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.SafeNativeMethods/GetWindowThreadProcessId(System.Runtime.InteropServices.HandleRef,Int32&amp;):Int32" style="color:rgb(0,153,51)">GetWindowThreadProcessId</a>(ref2, <span style="color:rgb(16,0,160)">out num);</span></pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a title="System.Int32" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://mscorlib:2.0.0.0:b77a5c561934e089/System.Int32" style="color:rgb(0,153,51)">int</a> <strong>currentThreadId</strong> = <a title="System.Windows.Forms.SafeNativeMethods" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.SafeNativeMethods" style="color:rgb(0,153,51)">SafeNativeMethods</a>.<a title="int System.Windows.Forms.SafeNativeMethods.GetCurrentThreadId();" href="http://www.aisto.com/roeder/dotnet/Default.aspx?Target=code://System.Windows.Forms:2.0.0.0:b77a5c561934e089/System.Windows.Forms.SafeNativeMethods/GetCurrentThreadId():Int32" style="color:rgb(0,153,51)">GetCurrentThreadId</a>();</pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:rgb(16,0,160)">return (windowThreadProcessId != currentThreadId);</span></pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</pre>
<pre>&nbsp;&nbsp;&nbsp; }</pre>
<p>}</p>
<p>终于看到了，这是在判断windows窗体线程和当前的调用者线程是否是同一个，如果是同一个就没有必要封送了，直接访问这个GUI控件吧。否则，就不要那么直接表白了，就需要Invoke或者BeginInvoke做媒了。</p>
</div>

            <div>
                作者：xiaogui340 发表于2012/4/18 11:11:21 <a href="http://blog.csdn.net/xiaogui340/article/details/7472712">原文链接</a>
            </div>
            <div>
            阅读：166 评论：0 <a href="http://blog.csdn.net/xiaogui340/article/details/7472712#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
</channel>
</rss>
