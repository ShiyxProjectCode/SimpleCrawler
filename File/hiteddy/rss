<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text">博客园_Hi Teddy!</title><subtitle type="text">Teddy Li的技术博客 - 人生就像try/catch, catch不住你就挂了</subtitle><id>uuid:971835c7-82da-4e01-b7c4-e5e6e4bb659b;id=5111</id><updated>2014-07-25T09:48:24Z</updated><author><name>Teddy Li</name><uri>http://www.cnblogs.com/hiteddy/</uri></author><generator>feed.cnblogs.com</generator><entry><id>http://www.cnblogs.com/hiteddy/p/Linq_to_SQL_Discard_Cancel_Clear_Pending_Changes.html</id><title type="text">Linq to SQL - 撤销所有未提交的改动 - Teddy Li</title><summary type="text">在某些情况下我们需要撤销/丢弃所有未提交的改动，包括Update, Delete和Insert本文通过Extension Method将DiscardPendingChanges方法附加到DataContext对象中，并实现清空ChangeSet从而撤销所有未提交的改动。</summary><published>2013-09-26T04:36:00Z</published><updated>2013-09-26T04:36:00Z</updated><author><name>Teddy Li</name><uri>http://www.cnblogs.com/hiteddy/</uri></author><link rel="alternate" href="http://www.cnblogs.com/hiteddy/p/Linq_to_SQL_Discard_Cancel_Clear_Pending_Changes.html" /><link rel="alternate" type="text/html" href="http://www.cnblogs.com/hiteddy/p/Linq_to_SQL_Discard_Cancel_Clear_Pending_Changes.html" /><content type="html">在某些情况下我们需要撤销/丢弃所有未提交的改动，包括Update, Delete和Insert本文通过Extension Method将DiscardPendingChanges方法附加到DataContext对象中，并实现清空ChangeSet从而撤销所有未提交的改动。&lt;img src="http://counter.cnblogs.com/blog/rss/3340583" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/hiteddy/p/Linq_to_SQL_Discard_Cancel_Clear_Pending_Changes.html" target="_blank"&gt;Linq to SQL - 撤销所有未提交的改动&lt;/a&gt;，转载请注明。&lt;/p&gt;</content></entry><entry><id>http://www.cnblogs.com/hiteddy/p/IIS7_Mixed_Authentication_WindowsAuthentication_FormAuthentication.html</id><title type="text">Mixed Authentication in IIS7 - Teddy Li</title><summary type="text">For Intranet Web Sites, we may need to support both WindowsAuthentication (AD Login) and FormAuthentication. This post introduce how to configurate in IIS7 for mixed authentication.</summary><published>2013-08-30T02:01:00Z</published><updated>2013-08-30T02:01:00Z</updated><author><name>Teddy Li</name><uri>http://www.cnblogs.com/hiteddy/</uri></author><link rel="alternate" href="http://www.cnblogs.com/hiteddy/p/IIS7_Mixed_Authentication_WindowsAuthentication_FormAuthentication.html" /><link rel="alternate" type="text/html" href="http://www.cnblogs.com/hiteddy/p/IIS7_Mixed_Authentication_WindowsAuthentication_FormAuthentication.html" /><content type="html">For Intranet Web Sites, we may need to support both WindowsAuthentication (AD Login) and FormAuthentication. This post introduce how to configurate in IIS7 for mixed authentication.&lt;img src="http://counter.cnblogs.com/blog/rss/3290830" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/hiteddy/p/IIS7_Mixed_Authentication_WindowsAuthentication_FormAuthentication.html" target="_blank"&gt;Mixed Authentication in IIS7&lt;/a&gt;，转载请注明。&lt;/p&gt;</content></entry><entry><id>http://www.cnblogs.com/hiteddy/p/An_Example_on_Closure_and_Javascript_function_scope.html</id><title type="text">An Example for Javascript Function Scoping and Closure - Teddy Li</title><summary type="text">This is a post from my team wiki, which is written in English, will translate to Chinese when I have time.An example of invoking ajax in loop, it's about closure and function scope.</summary><published>2013-08-21T02:34:00Z</published><updated>2013-08-21T02:34:00Z</updated><author><name>Teddy Li</name><uri>http://www.cnblogs.com/hiteddy/</uri></author><link rel="alternate" href="http://www.cnblogs.com/hiteddy/p/An_Example_on_Closure_and_Javascript_function_scope.html" /><link rel="alternate" type="text/html" href="http://www.cnblogs.com/hiteddy/p/An_Example_on_Closure_and_Javascript_function_scope.html" /><content type="html">This is a post from my team wiki, which is written in English, will translate to Chinese when I have time.An example of invoking ajax in loop, it's about closure and function scope.&lt;img src="http://counter.cnblogs.com/blog/rss/3272100" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/hiteddy/p/An_Example_on_Closure_and_Javascript_function_scope.html" target="_blank"&gt;An Example for Javascript Function Scoping and Closure&lt;/a&gt;，转载请注明。&lt;/p&gt;</content></entry><entry><id>http://www.cnblogs.com/hiteddy/archive/2012/09/07/Team_Fundation_Server_TFS_Remove_Changes_Made_By_Merge.html</id><title type="text">TFS - 在某分支中"移除"另一分支带来的代码 - Teddy Li</title><summary type="text">这是在并行开发中，由于不正确的merge/branch操作，导致分支B中混进了分支A的代码，但是分支B需要在分支A之前发布到生产环境。本文记录了如何将分支A所引进的代码从分支B中移除。这里需要做两件事，一是将A代码从DEV B中移除，然后按照正常流程提交到QA和Production，二是因为之前移除了A的代码，所以需要重新将A的代码提交。对于后者，直接重新merge是行不通的，所以采用了两次回滚和merge的方法。同时本文提供了用HTML5 canvas画版本树的代码。</summary><published>2012-09-07T06:36:00Z</published><updated>2012-09-07T06:36:00Z</updated><author><name>Teddy Li</name><uri>http://www.cnblogs.com/hiteddy/</uri></author><link rel="alternate" href="http://www.cnblogs.com/hiteddy/archive/2012/09/07/Team_Fundation_Server_TFS_Remove_Changes_Made_By_Merge.html" /><link rel="alternate" type="text/html" href="http://www.cnblogs.com/hiteddy/archive/2012/09/07/Team_Fundation_Server_TFS_Remove_Changes_Made_By_Merge.html" /><content type="html">这是在并行开发中，由于不正确的merge/branch操作，导致分支B中混进了分支A的代码，但是分支B需要在分支A之前发布到生产环境。本文记录了如何将分支A所引进的代码从分支B中移除。这里需要做两件事，一是将A代码从DEV B中移除，然后按照正常流程提交到QA和Production，二是因为之前移除了A的代码，所以需要重新将A的代码提交。对于后者，直接重新merge是行不通的，所以采用了两次回滚和merge的方法。同时本文提供了用HTML5 canvas画版本树的代码。&lt;img src="http://counter.cnblogs.com/blog/rss/2675042" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/hiteddy/archive/2012/09/07/Team_Fundation_Server_TFS_Remove_Changes_Made_By_Merge.html" target="_blank"&gt;TFS - 在某分支中&amp;quot;移除&amp;quot;另一分支带来的代码&lt;/a&gt;，转载请注明。&lt;/p&gt;</content></entry><entry><id>http://www.cnblogs.com/hiteddy/archive/2012/03/29/Prevent_Resubmit_When_Refresh_Reload_In_ASP_NET_Web_Form_MVC.html</id><title type="text">在ASP.NET Web Form和MVC中防止F5刷新引起的重复提交 - Teddy Li</title><summary type="text">IE中的刷新(Refresh)，在FF和Chrome中称为重新载入(Reload)，与正常进入页面的区别在于 1. 缓存控制 2. 重复提交上一次的请求.防止重复提交的方法与PRG(POST-Redirect-GET)模式有一些相似之处，具体来说，当Web服务器识别到一个重复提交的POST请求的时候，重定向到当前页面，然后浏览器以GET的方式请求该页面。本文提供了在ASP.NET Web Form以及MVC中的实现，并避免了IE8及之前版本IE浏览器中的一个缺陷。</summary><published>2012-03-29T07:59:00Z</published><updated>2012-03-29T07:59:00Z</updated><author><name>Teddy Li</name><uri>http://www.cnblogs.com/hiteddy/</uri></author><link rel="alternate" href="http://www.cnblogs.com/hiteddy/archive/2012/03/29/Prevent_Resubmit_When_Refresh_Reload_In_ASP_NET_Web_Form_MVC.html" /><link rel="alternate" type="text/html" href="http://www.cnblogs.com/hiteddy/archive/2012/03/29/Prevent_Resubmit_When_Refresh_Reload_In_ASP_NET_Web_Form_MVC.html" /><content type="html">IE中的刷新(Refresh)，在FF和Chrome中称为重新载入(Reload)，与正常进入页面的区别在于 1. 缓存控制 2. 重复提交上一次的请求.防止重复提交的方法与PRG(POST-Redirect-GET)模式有一些相似之处，具体来说，当Web服务器识别到一个重复提交的POST请求的时候，重定向到当前页面，然后浏览器以GET的方式请求该页面。本文提供了在ASP.NET Web Form以及MVC中的实现，并避免了IE8及之前版本IE浏览器中的一个缺陷。&lt;img src="http://counter.cnblogs.com/blog/rss/2423520" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/hiteddy/archive/2012/03/29/Prevent_Resubmit_When_Refresh_Reload_In_ASP_NET_Web_Form_MVC.html" target="_blank"&gt;在ASP.NET Web Form和MVC中防止F5刷新引起的重复提交&lt;/a&gt;，转载请注明。&lt;/p&gt;</content></entry><entry><id>http://www.cnblogs.com/hiteddy/archive/2012/01/29/Add_Short_Cut_And_Bookmark_Icon_For_Your_Blog.html</id><title type="text">为你的博客添加标题栏图标 - Teddy Li</title><summary type="text">对于自己掌握源代码的网站，为网页添加标题栏图标的方法一般是在根目录下放一个名为"favicon.ico"的文件。想cnblog这种站点其实也可以自己添加标题栏图标，只需要在 "设置" - "页首Html代码" 中加入以下代码</summary><published>2012-01-29T04:57:00Z</published><updated>2012-01-29T04:57:00Z</updated><author><name>Teddy Li</name><uri>http://www.cnblogs.com/hiteddy/</uri></author><link rel="alternate" href="http://www.cnblogs.com/hiteddy/archive/2012/01/29/Add_Short_Cut_And_Bookmark_Icon_For_Your_Blog.html" /><link rel="alternate" type="text/html" href="http://www.cnblogs.com/hiteddy/archive/2012/01/29/Add_Short_Cut_And_Bookmark_Icon_For_Your_Blog.html" /><content type="html">对于自己掌握源代码的网站，为网页添加标题栏图标的方法一般是在根目录下放一个名为"favicon.ico"的文件。想cnblog这种站点其实也可以自己添加标题栏图标，只需要在 "设置" - "页首Html代码" 中加入以下代码&lt;link   rel="Shortcut Icon"   href="http://xxx/a.jpg"&gt;&lt;link   rel="Bookmark"   href="http://xxx/a.jpg"&gt;&lt;img src="http://counter.cnblogs.com/blog/rss/2331004" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/hiteddy/archive/2012/01/29/Add_Short_Cut_And_Bookmark_Icon_For_Your_Blog.html" target="_blank"&gt;为你的博客添加标题栏图标&lt;/a&gt;，转载请注明。&lt;/p&gt;</content></entry><entry><id>http://www.cnblogs.com/hiteddy/archive/2012/01/17/Manual_Commit_transaction_in_sql_Server_management_Studio.html</id><title type="text">在SQL Server Management Studio中使用手动提交更改 - Teddy Li</title><summary type="text">之前一直使用了PL/SQL作为数据库管理工具，所有执行过了的改动都必须按提交按钮才commit到数据库，后来用SQL Server Management Studio，都是自动提交的方式，特别是在生产环境上，总是如履薄冰，担心出什么乱子。在SQL Server Management Studio中禁用自动提交的设置如下：在选项-查询执行-sql server-ANSI中将"SET_IMPLICIT_TRANSACTIONS"勾上</summary><published>2012-01-17T01:36:00Z</published><updated>2012-01-17T01:36:00Z</updated><author><name>Teddy Li</name><uri>http://www.cnblogs.com/hiteddy/</uri></author><link rel="alternate" href="http://www.cnblogs.com/hiteddy/archive/2012/01/17/Manual_Commit_transaction_in_sql_Server_management_Studio.html" /><link rel="alternate" type="text/html" href="http://www.cnblogs.com/hiteddy/archive/2012/01/17/Manual_Commit_transaction_in_sql_Server_management_Studio.html" /><content type="html">之前一直使用了PL/SQL作为数据库管理工具，所有执行过了的改动都必须按提交按钮才commit到数据库，后来用SQL Server Management Studio，都是自动提交的方式，特别是在生产环境上，总是如履薄冰，担心出什么乱子。在SQL Server Management Studio中禁用自动提交的设置如下：在选项-查询执行-sql server-ANSI中将"SET_IMPLICIT_TRANSACTIONS"勾上&lt;img src="http://counter.cnblogs.com/blog/rss/2321925" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/hiteddy/archive/2012/01/17/Manual_Commit_transaction_in_sql_Server_management_Studio.html" target="_blank"&gt;在SQL Server Management Studio中使用手动提交更改&lt;/a&gt;，转载请注明。&lt;/p&gt;</content></entry><entry><id>http://www.cnblogs.com/hiteddy/archive/2011/12/16/Object_Oriented_javascript_prototype_inheritance.html</id><title type="text">面向对象的Javascript - 通过原型(Prototype)实现继承 - Teddy Li</title><summary type="text">Prototype(原型)是Javascript中实现对象继承的基础方式。绝大多数的javascript对象都有原型对象，这些原型对象的应用形成一条“原型链”，链的尽头是Object.prototype。当调用对象的某属性或方法时，js引擎现在当前对象中查找，找不到的话就会查找其原型对象，如此上溯直到到达Object.prototype。我们所熟知的toString,valueOf等方法正是定义在Object.prototype中，因此所有js对象都通过继承获得这些方法。在Chrome和Firefox里，原型对象可以通过对象的属性"__proto__"访问，该属性实际上指向对应类型的”prototype”属性。</summary><published>2011-12-16T10:45:00Z</published><updated>2011-12-16T10:45:00Z</updated><author><name>Teddy Li</name><uri>http://www.cnblogs.com/hiteddy/</uri></author><link rel="alternate" href="http://www.cnblogs.com/hiteddy/archive/2011/12/16/Object_Oriented_javascript_prototype_inheritance.html" /><link rel="alternate" type="text/html" href="http://www.cnblogs.com/hiteddy/archive/2011/12/16/Object_Oriented_javascript_prototype_inheritance.html" /><content type="html">Prototype(原型)是Javascript中实现对象继承的基础方式。绝大多数的javascript对象都有原型对象，这些原型对象的应用形成一条“原型链”，链的尽头是Object.prototype。当调用对象的某属性或方法时，js引擎现在当前对象中查找，找不到的话就会查找其原型对象，如此上溯直到到达Object.prototype。我们所熟知的toString,valueOf等方法正是定义在Object.prototype中，因此所有js对象都通过继承获得这些方法。在Chrome和Firefox里，原型对象可以通过对象的属性"__proto__"访问，该属性实际上指向对应类型的”prototype”属性。&lt;img src="http://counter.cnblogs.com/blog/rss/2290565" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/hiteddy/archive/2011/12/16/Object_Oriented_javascript_prototype_inheritance.html" target="_blank"&gt;面向对象的Javascript - 通过原型(Prototype)实现继承&lt;/a&gt;，转载请注明。&lt;/p&gt;</content></entry><entry><id>http://www.cnblogs.com/hiteddy/archive/2011/10/01/Difference_among_IQueryable_IEnumeralb_IList_in_Entity_Framework.html</id><title type="text">Entity Framework中IQueryable, IEnumerable, IList的区别 - Teddy Li</title><summary type="text">使用Tracing and Caching Provider Wrappers for Entity Framework追踪Entity Framework生成的SQL语句，并据此分析IQueryable,IEnumerable和IList的区别和使用场景。</summary><published>2011-09-30T16:57:00Z</published><updated>2011-09-30T16:57:00Z</updated><author><name>Teddy Li</name><uri>http://www.cnblogs.com/hiteddy/</uri></author><link rel="alternate" href="http://www.cnblogs.com/hiteddy/archive/2011/10/01/Difference_among_IQueryable_IEnumeralb_IList_in_Entity_Framework.html" /><link rel="alternate" type="text/html" href="http://www.cnblogs.com/hiteddy/archive/2011/10/01/Difference_among_IQueryable_IEnumeralb_IList_in_Entity_Framework.html" /><content type="html">使用Tracing and Caching Provider Wrappers for Entity Framework追踪Entity Framework生成的SQL语句，并据此分析IQueryable,IEnumerable和IList的区别和使用场景。&lt;img src="http://counter.cnblogs.com/blog/rss/2196751" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/hiteddy/archive/2011/10/01/Difference_among_IQueryable_IEnumeralb_IList_in_Entity_Framework.html" target="_blank"&gt;Entity Framework中IQueryable, IEnumerable, IList的区别&lt;/a&gt;，转载请注明。&lt;/p&gt;</content></entry><entry><id>http://www.cnblogs.com/hiteddy/archive/2011/09/21/understanding_Compiled_LINQ.html</id><title type="text">理解LINQ预编译查询(Compiled LINQ) - Teddy Li</title><summary type="text">从上一篇NHibernate与Entity Framework性能比较中可以看出来LINQ预编译查询可以大大提高性能。本文对预编译查询做简单介绍。</summary><published>2011-09-21T09:52:00Z</published><updated>2011-09-21T09:52:00Z</updated><author><name>Teddy Li</name><uri>http://www.cnblogs.com/hiteddy/</uri></author><link rel="alternate" href="http://www.cnblogs.com/hiteddy/archive/2011/09/21/understanding_Compiled_LINQ.html" /><link rel="alternate" type="text/html" href="http://www.cnblogs.com/hiteddy/archive/2011/09/21/understanding_Compiled_LINQ.html" /><content type="html">从上一篇NHibernate与Entity Framework性能比较中可以看出来LINQ预编译查询可以大大提高性能。本文对预编译查询做简单介绍。&lt;img src="http://counter.cnblogs.com/blog/rss/2183776" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/hiteddy/archive/2011/09/21/understanding_Compiled_LINQ.html" target="_blank"&gt;理解LINQ预编译查询(Compiled LINQ)&lt;/a&gt;，转载请注明。&lt;/p&gt;</content></entry></feed>