<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">博客园_自由、创新、研究、探索</title>
  <subtitle type="text">Linux/Windows Mono/DotNet              [ Open Source .NET Development/ 使用开源工具进行DotNet软件开发]</subtitle>
  <id>uuid:18ea288a-ebec-4d38-9454-6bf8b4bdc3f6;id=5195</id>
  <updated>2015-09-14T22:25:50Z</updated>
  <author>
    <name>张善友</name>
    <uri>http://www.cnblogs.com/shanyou/</uri>
  </author>
  <generator>feed.cnblogs.com</generator>
  <entry>
    <id>http://www.cnblogs.com/shanyou/p/4806990.html</id>
    <title type="text">ASP.NET 5 Beta 7 版本 - 张善友</title>
    <summary type="text">Beta7版本在9月2日发布了. 之前的DNX的跨平台特性在非Windows平台上主要依赖Mono来实现，.NET Core的支持极其有限。这个版本重点放在实现基于 .NET Core 的跨平台开发，为 Mac 与 Linux 平台提供基于 .NET Core 的 dnx，实现完整的 .NET 跨平台开发工作流，第一次实现了不再依赖于Mono。</summary>
    <published>2015-09-14T22:25:00Z</published>
    <updated>2015-09-14T22:25:00Z</updated>
    <author>
      <name>张善友</name>
      <uri>http://www.cnblogs.com/shanyou/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/shanyou/p/4806990.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/shanyou/p/4806990.html" />
    <content type="html">Beta7版本在9月2日发布了. 之前的DNX的跨平台特性在非Windows平台上主要依赖Mono来实现，.NET Core的支持极其有限。这个版本重点放在实现基于 .NET Core 的跨平台开发，为 Mac 与 Linux 平台提供基于 .NET Core 的 dnx，实现完整的 .NET 跨平台开发工作流，第一次实现了不再依赖于Mono。&lt;img src="http://counter.cnblogs.com/blog/rss/4806990" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/shanyou/p/4806990.html" target="_blank"&gt;ASP.NET 5 Beta 7 版本&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/shanyou/p/4790530.html</id>
    <title type="text">软件开发设计原则 - 张善友</title>
    <summary type="text">下文摘自http://www.csdn.net/article/2015-09-06/2825621 GoF（四人帮），传说中的四位大神们，他们联手搞出了一套设计模式，堪称OOD（面向对象设计）的经典之作！震惊了整个软件开发领域。但这四个老家伙非常怪异，总是喜欢显摆一些高深的理论，甚至有时候不说人话，十分让人费解。 除了最经典的六大设计原则以外，还有一些其他的设计原则也非常重要。我将尽可...</summary>
    <published>2015-09-08T00:33:00Z</published>
    <updated>2015-09-08T00:33:00Z</updated>
    <author>
      <name>张善友</name>
      <uri>http://www.cnblogs.com/shanyou/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/shanyou/p/4790530.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/shanyou/p/4790530.html" />
    <content type="html">下文摘自http://www.csdn.net/article/2015-09-06/2825621 GoF（四人帮），传说中的四位大神们，他们联手搞出了一套设计模式，堪称OOD（面向对象设计）的经典之作！震惊了整个软件开发领域。但这四个老家伙非常怪异，总是喜欢显摆一些高深的理论，甚至有时候不说人话，十分让人费解。 除了最经典的六大设计原则以外，还有一些其他的设计原则也非常重要。我将尽可...&lt;img src="http://counter.cnblogs.com/blog/rss/4790530" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/shanyou/p/4790530.html" target="_blank"&gt;软件开发设计原则&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/shanyou/p/4782762.html</id>
    <title type="text">Immutable（不可变）集合 - 张善友</title>
    <summary type="text">不可变集合，顾名思义就是说集合是不可被修改的。集合的数据项是在创建的时候提供，并且在整个生命周期中都不可改变。为什么要用immutable对象？immutable对象有以下的优点：对不可靠的客户代码库来说，它使用安全，可以在未受信任的类库中安全的使用这些对象线程安全的：immutable对象在多线程...</summary>
    <published>2015-09-05T01:22:00Z</published>
    <updated>2015-09-05T01:22:00Z</updated>
    <author>
      <name>张善友</name>
      <uri>http://www.cnblogs.com/shanyou/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/shanyou/p/4782762.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/shanyou/p/4782762.html" />
    <content type="html">不可变集合，顾名思义就是说集合是不可被修改的。集合的数据项是在创建的时候提供，并且在整个生命周期中都不可改变。为什么要用immutable对象？immutable对象有以下的优点：对不可靠的客户代码库来说，它使用安全，可以在未受信任的类库中安全的使用这些对象线程安全的：immutable对象在多线程...&lt;img src="http://counter.cnblogs.com/blog/rss/4782762" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/shanyou/p/4782762.html" target="_blank"&gt;Immutable（不可变）集合&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/shanyou/p/4752226.html</id>
    <title type="text">使用Hystrix提高系统可用性 - 张善友</title>
    <summary type="text">超时机制和断路器能够很好的保护我们的服务，不受依赖服务不可用的影响太大，具体可以参看文章《 使用熔断器设计模式保护软件》。然而具体实现这两个模式还是有一定的复杂度的，所幸 Netflix 开源的 Hystrix框架 帮我们大大简化了超时机制和断路器的实现，Hystrix：供分布式系统使用，提供延迟和容错功能，隔离远程系统、访问和第三方程序库的访问点，防止级联失败，保证复杂的分布系统在面临不可避免的失败时，仍能有其弹性。在Codeplex上有一个.NET的移植版本https://hystrixnet.codeplex.com/。</summary>
    <published>2015-08-23T22:15:00Z</published>
    <updated>2015-08-23T22:15:00Z</updated>
    <author>
      <name>张善友</name>
      <uri>http://www.cnblogs.com/shanyou/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/shanyou/p/4752226.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/shanyou/p/4752226.html" />
    <content type="html">超时机制和断路器能够很好的保护我们的服务，不受依赖服务不可用的影响太大，具体可以参看文章《 使用熔断器设计模式保护软件》。然而具体实现这两个模式还是有一定的复杂度的，所幸 Netflix 开源的 Hystrix框架 帮我们大大简化了超时机制和断路器的实现，Hystrix：供分布式系统使用，提供延迟和容错功能，隔离远程系统、访问和第三方程序库的访问点，防止级联失败，保证复杂的分布系统在面临不可避免的失败时，仍能有其弹性。在Codeplex上有一个.NET的移植版本https://hystrixnet.codeplex.com/。&lt;img src="http://counter.cnblogs.com/blog/rss/4752226" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/shanyou/p/4752226.html" target="_blank"&gt;使用Hystrix提高系统可用性&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/shanyou/p/4746338.html</id>
    <title type="text">微软发布 Windows Server 2016 预览版第三版，开发者要重点关注Nano Server - 张善友</title>
    <summary type="text">微软已经发布 Windows Server 2016 和 System Center 2016 第三个技术预览版，已经提供下载。Windows Server 2016 技术预览版第三版也是首个包括了容器技术的支持的版本，也提供了 Nano Server 和数据中心增强的功能。Windows Serv...</summary>
    <published>2015-08-20T13:37:00Z</published>
    <updated>2015-08-20T13:37:00Z</updated>
    <author>
      <name>张善友</name>
      <uri>http://www.cnblogs.com/shanyou/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/shanyou/p/4746338.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/shanyou/p/4746338.html" />
    <content type="html">微软已经发布 Windows Server 2016 和 System Center 2016 第三个技术预览版，已经提供下载。Windows Server 2016 技术预览版第三版也是首个包括了容器技术的支持的版本，也提供了 Nano Server 和数据中心增强的功能。Windows Serv...&lt;img src="http://counter.cnblogs.com/blog/rss/4746338" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/shanyou/p/4746338.html" target="_blank"&gt;微软发布 Windows Server 2016 预览版第三版，开发者要重点关注Nano Server&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/shanyou/p/4733555.html</id>
    <title type="text">Akka.NET v1.0 已发布，支持Mono - 张善友</title>
    <summary type="text">Akka.NET 是Java/Scala 流行框架Akka的一个 .NET 开源移植。可用于构建高并发，分布式和容错事件驱动的应用在 .NET 和 Mono 平台之上。Akka.NET 经过一年多的努力，发布 1.0 正式版，最新版本是1.0.4 ，具体参见 https://github.com/akkadotnet/akka.net/releases ！Akka.NET 1.0 已经支持Mono...</summary>
    <published>2015-08-15T23:47:00Z</published>
    <updated>2015-08-15T23:47:00Z</updated>
    <author>
      <name>张善友</name>
      <uri>http://www.cnblogs.com/shanyou/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/shanyou/p/4733555.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/shanyou/p/4733555.html" />
    <content type="html">Akka.NET 是Java/Scala 流行框架Akka的一个 .NET 开源移植。可用于构建高并发，分布式和容错事件驱动的应用在 .NET 和 Mono 平台之上。Akka.NET 经过一年多的努力，发布 1.0 正式版，最新版本是1.0.4 ，具体参见 https://github.com/akkadotnet/akka.net/releases ！Akka.NET 1.0 已经支持Mono...&lt;img src="http://counter.cnblogs.com/blog/rss/4733555" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/shanyou/p/4733555.html" target="_blank"&gt;Akka.NET v1.0 已发布，支持Mono&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/shanyou/p/4733267.html</id>
    <title type="text">C#与yaml解析 - 张善友</title>
    <summary type="text">YAML 官方网站称 YAML 是"一种所有编程语言可用的友好的数据序列化标准"。YAML Ain't Markup Language，和GNU一样，YAML是一个递归着说"不"的名字。不同的是，GNU对UNIX说不，YAML说不的对象是XML。YAML不是XML。为什么不是XML呢？因为：YAM...</summary>
    <published>2015-08-15T14:30:00Z</published>
    <updated>2015-08-15T14:30:00Z</updated>
    <author>
      <name>张善友</name>
      <uri>http://www.cnblogs.com/shanyou/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/shanyou/p/4733267.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/shanyou/p/4733267.html" />
    <content type="html">YAML 官方网站称 YAML 是&amp;quot;一种所有编程语言可用的友好的数据序列化标准&amp;quot;。YAML Ain&amp;#39;t Markup Language，和GNU一样，YAML是一个递归着说&amp;quot;不&amp;quot;的名字。不同的是，GNU对UNIX说不，YAML说不的对象是XML。YAML不是XML。为什么不是XML呢？因为：YAM...&lt;img src="http://counter.cnblogs.com/blog/rss/4733267" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/shanyou/p/4733267.html" target="_blank"&gt;C#与yaml解析&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/shanyou/p/4714838.html</id>
    <title type="text">使用C# 和Consul进行分布式系统协调 - 张善友</title>
    <summary type="text">随着大数据时代的到来，分布式是解决大数据问题的一个主要手段，随着越来越多的分布式的服务，如何在分布式的系统中对这些服务做协调变成了一个很棘手的问题。今天我们就来看看如何使用C# ，利用开源对分布式服务做协调。在对分布式的应用做协调的时候，主要会碰到以下的应用场景：业务发现（service disco...</summary>
    <published>2015-08-09T03:35:00Z</published>
    <updated>2015-08-09T03:35:00Z</updated>
    <author>
      <name>张善友</name>
      <uri>http://www.cnblogs.com/shanyou/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/shanyou/p/4714838.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/shanyou/p/4714838.html" />
    <content type="html">随着大数据时代的到来，分布式是解决大数据问题的一个主要手段，随着越来越多的分布式的服务，如何在分布式的系统中对这些服务做协调变成了一个很棘手的问题。今天我们就来看看如何使用C# ，利用开源对分布式服务做协调。在对分布式的应用做协调的时候，主要会碰到以下的应用场景：业务发现（service disco...&lt;img src="http://counter.cnblogs.com/blog/rss/4714838" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/shanyou/p/4714838.html" target="_blank"&gt;使用C# 和Consul进行分布式系统协调&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/shanyou/p/4713234.html</id>
    <title type="text">Windows更新清理工具 (winsxs 清理工具) - 张善友</title>
    <summary type="text">Windows 更新清理工具是一款效果非常显著的Windows7、Windows8操作系统清理优化工具！经常安装系统的朋友相比有所体会，刚刚安装完成的Win7、Win8其实占的空间并不大，去掉页面文件和休眠文件后，真正的系统只几个G而已，但如果你给系统升级了补丁后，你会发现系统所需要占用的空间直线上升！轻松突破10G的门槛！加上休眠文件和页面文件，本来预留给系统的30G空间马上变得也不富裕了。 ...</summary>
    <published>2015-08-08T07:31:00Z</published>
    <updated>2015-08-08T07:31:00Z</updated>
    <author>
      <name>张善友</name>
      <uri>http://www.cnblogs.com/shanyou/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/shanyou/p/4713234.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/shanyou/p/4713234.html" />
    <content type="html">Windows 更新清理工具是一款效果非常显著的Windows7、Windows8操作系统清理优化工具！经常安装系统的朋友相比有所体会，刚刚安装完成的Win7、Win8其实占的空间并不大，去掉页面文件和休眠文件后，真正的系统只几个G而已，但如果你给系统升级了补丁后，你会发现系统所需要占用的空间直线上升！轻松突破10G的门槛！加上休眠文件和页面文件，本来预留给系统的30G空间马上变得也不富裕了。 ...&lt;img src="http://counter.cnblogs.com/blog/rss/4713234" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/shanyou/p/4713234.html" target="_blank"&gt;Windows更新清理工具 (winsxs 清理工具)&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/shanyou/p/CircuitBreaker.html</id>
    <title type="text">使用熔断器设计模式保护软件 - 张善友</title>
    <summary type="text">熔断器模式在内部采用状态机的形式，使得对这些可能会导致请求失败的远程服务进行了包装，当远程服务发生异常时，可以立即对进来的请求返回错误响应，并告知系统管理员，将错误控制在局部范围内，从而提高系统的稳定性和可靠性。</summary>
    <published>2015-08-02T22:21:00Z</published>
    <updated>2015-08-02T22:21:00Z</updated>
    <author>
      <name>张善友</name>
      <uri>http://www.cnblogs.com/shanyou/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/shanyou/p/CircuitBreaker.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/shanyou/p/CircuitBreaker.html" />
    <content type="html">熔断器模式在内部采用状态机的形式，使得对这些可能会导致请求失败的远程服务进行了包装，当远程服务发生异常时，可以立即对进来的请求返回错误响应，并告知系统管理员，将错误控制在局部范围内，从而提高系统的稳定性和可靠性。&lt;img src="http://counter.cnblogs.com/blog/rss/4695716" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/shanyou/p/CircuitBreaker.html" target="_blank"&gt;使用熔断器设计模式保护软件&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
</feed>