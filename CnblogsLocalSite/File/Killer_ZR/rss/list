<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet type="text/xsl" title="XSL Formatting" href="/rss.xsl" media="all" ?>
<rss version="2.0">
<channel>
    <title>西洋薇</title>
    <image>
    <link>http://blog.csdn.net</link>
    <url>http://static.blog.csdn.net/images/logo.gif</url>
    </image>
    <description>……</description>
	<link>http://blog.csdn.net/killer_zr</link>
	<language>zh-cn</language>
	<generator>http://blog.csdn.net</generator>
	<ttl>5</ttl>
	<copyright><![CDATA[Copyright &copy; Killer_ZR]]></copyright> 
	<pubDate>2015/9/17 14:31:09</pubDate>
    <item>
        <title><![CDATA[[转]网站防刷方案]]></title>
        <link>http://blog.csdn.net/killer_zr/article/details/48180929</link>
        <guid>http://blog.csdn.net/killer_zr/article/details/48180929</guid>
        <author>Killer_ZR</author>
        <pubDate>2015/9/2 17:18:06</pubDate>
        <description><![CDATA[
            
<div style="padding:0px; margin:0px; color:rgb(51,51,51); font-family:'Microsoft YaHei',Verdana,sans-serif,宋体; font-size:13px; line-height:22.5px">
<div style="padding:0px; margin:0px">
<h2 style="padding:0px; margin:20px 0px 10px; line-height:36px; font-size:20px">1.&nbsp;访问网站所涉及环节</h2>
</div>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
简单说就是重复相同的请求</p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
首先看看访问流程所设计的每个环节</p>
<pre class="screen" style="padding:5px; margin-top:0px; margin-bottom:0px; line-height:18px; font-size:9pt; font-family:'Courier New',Arial; border:1px solid rgb(221,221,221); background:rgb(246,246,246)">User -&gt; Browse -&gt; CDN/Proxy Cache -&gt; Web Server -&gt; App Server / fastcgi pool -&gt; Cache -&gt; Database</pre>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
大部分网站都是这样的结构：用户，浏览器，CDN或反向代理，Web服务器，应用服务器，缓存，数据库</p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
这个访问过程中所涉及的设备</p>
<pre class="screen" style="padding:5px; margin-top:0px; margin-bottom:0px; line-height:18px; font-size:9pt; font-family:'Courier New',Arial; border:1px solid rgb(221,221,221); background:rgb(246,246,246)">PC -&gt; ADSL/Cable/Ethernet -&gt; Route -&gt; ... -&gt; Route -&gt; Firewall -&gt; Load Balance -&gt; Switch -&gt; Server</pre>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
我们看看从那些环节可以截获用户的刷新行为</p>
<div style="padding:0px; margin:0px">
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
<span style="padding:0px; margin:0px">可控制环节</span></p>
<ol style="padding:0px; margin:10px 20px">
<li style="padding:0px; margin:0px">
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
CDN / 反向代理，提供一些基本防护功能，过于简单。</p>
</li><li style="padding:0px; margin:0px">
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
3/4层设备，防火墙/路由器/交换机，主要还是靠防火墙设备，例如Cisco ASA 系列防火墙，都提供IPS/IDS服务（需要单独采购，设备默认没有）主要是针对IP地址的请求频率做出策略控制，</p>
</li><li style="padding:0px; margin:0px">
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
4/7 层负载均衡设备， 一半负载均衡设备都附带此功能。但不是他主要的功能，没有能力购买防火墙设备的中小公司可以使用该功能，7层功能非常强大，但都是通用功能，不一定满足你的个性化需求。</p>
</li><li style="padding:0px; margin:0px">
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
浏览器，这是主要是改变浏览器端设置，利用Cookie变化，Javascript等技术，阻止重复请求</p>
</li><li style="padding:0px; margin:0px">
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
WEB 服务器，在web上通过扩展模块与相应的配置也能达到一定的效果</p>
</li><li style="padding:0px; margin:0px">
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
应用服务器， 主要是通过编写程序在阻止恶意访问。</p>
</li></ol>
</div>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
依次从上至下，越能提前在上一层阻止行为越好，否则就在下一层截获。</p>
</div>
<div style="padding:0px; margin:0px; color:rgb(51,51,51); font-family:'Microsoft YaHei',Verdana,sans-serif,宋体; font-size:13px; line-height:22.5px">
<div style="padding:0px; margin:0px"><span id="OSC_h2_5" style="padding:0px; margin:0px"></span>
<h2 style="padding:0px; margin:20px 0px 10px; line-height:36px; font-size:20px"><a target="_blank" rel="nofollow" style="padding:0px; margin:0px; color:rgb(255,131,115); outline:0px; font-size:12px"></a>2.&nbsp;浏览器款控制方案</h2>
</div>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
通过 Javascript 防止重复点击提交按钮，通常的做法是将按钮禁用 通过 disabled 属性实现。下面是Jquery例子</p>
<pre class="screen" style="padding:5px; margin-top:0px; margin-bottom:0px; line-height:18px; font-size:9pt; font-family:'Courier New',Arial; border:1px solid rgb(221,221,221); background:rgb(246,246,246)">$(&quot;form&quot;).submit(function(){
  $(&quot;:submit&quot;,this).attr(&quot;disabled&quot;,&quot;disabled&quot;);
});</pre>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
在上面的例子基础上可以改良，增加计时器，限制一定时间内不可重复提交。</p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
通过 Cookie技术控制重复访问动作</p>
<pre class="screen" style="padding:5px; margin-top:0px; margin-bottom:0px; line-height:18px; font-size:9pt; font-family:'Courier New',Arial; border:1px solid rgb(221,221,221); background:rgb(246,246,246)">访问第一个页面 login.example.com/form.ext 的时候设置一个 cookie 变量
访问第二个页面 login.example.com/auth.ext 的时候判断上一个页面设置的 cookie 是否有效，如果无效拒绝访问。</pre>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
可以进一步增加难度，例如用户注册分为很多步骤，每一个步骤都会设置一个标记，如果用户行为不是安装顺序访问，直接在最后一个页面提交，明显可以判断是非法行为。</p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
这里的方案是针对人工操作，更多的时采用程序实现刷新，采集，爬虫等等。</p>
</div>
<div style="padding:0px; margin:0px; color:rgb(51,51,51); font-family:'Microsoft YaHei',Verdana,sans-serif,宋体; font-size:13px; line-height:22.5px">
<div style="padding:0px; margin:0px"><span id="OSC_h2_6" style="padding:0px; margin:0px"></span>
<h2 style="padding:0px; margin:20px 0px 10px; line-height:36px; font-size:20px"><a target="_blank" rel="nofollow" style="padding:0px; margin:0px; color:rgb(255,131,115); outline:0px; font-size:12px"></a>3.&nbsp;CDN 与 反向代理</h2>
</div>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
CDN 都提供一些基本的防护功能，主要是针对 IP 地址， URL 做一些限制</p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
如果自己做反向代理，控制权更大，可以充分使用操作系统带的包过滤防火墙与代理软件所提供的7层功能</p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
由于很多web server 具备代理服务器功能，配置也相差无几，所有在后面web server 会详细介绍。</p>
</div>
<div style="padding:0px; margin:0px; color:rgb(51,51,51); font-family:'Microsoft YaHei',Verdana,sans-serif,宋体; font-size:13px; line-height:22.5px">
<div style="padding:0px; margin:0px"><span id="OSC_h2_7" style="padding:0px; margin:0px"></span>
<h2 style="padding:0px; margin:20px 0px 10px; line-height:36px; font-size:20px"><a target="_blank" rel="nofollow" style="padding:0px; margin:0px; color:rgb(255,131,115); outline:0px; font-size:12px"></a>4.&nbsp;网络设备控制方法</h2>
</div>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
每一个网络设备使用方法都不同，这里无法举例，但原理都是相同的。</p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
3/4 层网络设备可以按照IP地址与端口号访问情况做具体限制，如单位时间内允许的访问次数，这种对于大量的攻击比较有效</p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
7层网络设备功能非常强大，就可以根据HTTP头做规则策略，如限制URL的单位时间访问的IP数量，判断 Cookie 等信息，</p>
</div>
<div style="padding:0px; margin:0px; color:rgb(51,51,51); font-family:'Microsoft YaHei',Verdana,sans-serif,宋体; font-size:13px; line-height:22.5px">
<div style="padding:0px; margin:0px"><span id="OSC_h2_8" style="padding:0px; margin:0px"></span>
<h2 style="padding:0px; margin:20px 0px 10px; line-height:36px; font-size:20px"><a target="_blank" rel="nofollow" style="padding:0px; margin:0px; color:rgb(255,131,115); outline:0px; font-size:12px"></a>5.&nbsp;服务器上做控制</h2>
</div>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
这部分分为，操作系统与web服务器两个部分</p>
<div style="padding:0px; margin:0px">
<div style="padding:0px; margin:0px"><span id="OSC_h3_9" style="padding:0px; margin:0px"></span>
<h3 style="padding:0px; margin:15px 0px 10px; line-height:28.7999992370605px; font-size:16px">
<a target="_blank" rel="nofollow" style="padding:0px; margin:0px; color:rgb(255,131,115); outline:0px; font-size:12px"></a>5.1.&nbsp;操作系统部分</h3>
</div>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
操作系统部分，主要是通过linux内核提供的包过滤功能，通常所说的iptables</p>
<pre class="screen" style="padding:5px; margin-top:0px; margin-bottom:0px; line-height:18px; font-size:9pt; font-family:'Courier New',Arial; border:1px solid rgb(221,221,221); background:rgb(246,246,246)">iptables -A INPUT -p icmp -m limit --limit 3/s -j LOG --log-level INFO --log-prefix &quot;ICMP packet IN: &quot;

iptables -N syn-flood
iptables -A INPUT -p tcp --syn -j syn-flood
iptables -I syn-flood -p tcp -m limit --limit 3/s --limit-burst 6 -j RETURN
iptables -A syn-flood -j REJECT</pre>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
限制源IP的访问数量</p>
<pre class="screen" style="padding:5px; margin-top:0px; margin-bottom:0px; line-height:18px; font-size:9pt; font-family:'Courier New',Arial; border:1px solid rgb(221,221,221); background:rgb(246,246,246)">-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 --tcp-flags FIN,SYN,RST,ACK SYN -m connlimit --connlimit-above 50 --connlimit-mask 32 -j REJECT --reject-with icmp-port-unreachable
-A INPUT -p tcp -m state --state NEW -m tcp --dport 443 --tcp-flags FIN,SYN,RST,ACK SYN -m connlimit --connlimit-above 50 --connlimit-mask 32 -j REJECT --reject-with icmp-port-unreachable</pre>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
关键字，字符串过略</p>
<pre class="screen" style="padding:5px; margin-top:0px; margin-bottom:0px; line-height:18px; font-size:9pt; font-family:'Courier New',Arial; border:1px solid rgb(221,221,221); background:rgb(246,246,246)">iptables -A INPUT -p tcp --dport 80 -m string --algo bm --string &quot;XXDD0S&quot; -j DROP</pre>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
以上所讲都是被动方法，需要系统管理一条一条添加规则。</p>
<div style="padding:0px; margin:0px"><span id="OSC_h3_10" style="padding:0px; margin:0px"></span>
<h3 style="padding:0px; margin:15px 0px 10px; line-height:28.7999992370605px; font-size:16px">
提示</h3>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
基于IP与端口的方法有明显的不足，经常会误将某些正常的IP地址封锁。</p>
</div>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
下面通过脚本实现主动防御，通过提取 access.log 文件定位更精准，同时实现了黑/白名单可以将安全IP放置在白名单中。</p>
<pre class="screen" style="padding:5px; margin-top:0px; margin-bottom:0px; line-height:18px; font-size:9pt; font-family:'Courier New',Arial; border:1px solid rgb(221,221,221); background:rgb(246,246,246)">#!/bin/bash
########################################
# Homepage: http://netkiller.github.io
# Author: neo &lt;netkiller@msn.com&gt;
########################################
PIPE=/tmp/pipe
pidfile=/tmp/firewall.pid

ACCCESS_LOG=/tmp/access.log
TIMEPOINT='24/May/2012'
BLACKLIST=/var/tmp/black.lst
WHITELIST=/var/tmp/white.lst
########################################

if [ -z &quot;$( egrep &quot;CentOS|Redhat&quot; /etc/issue)&quot; ]; then
	echo 'Only for Redhat or CentOS'
	exit
fi

if [ ! -f ${BLACKLIST} ]; then
    touch ${BLACKLIST}
fi

if [ ! -f ${WHITELIST} ]; then
    touch ${WHITELIST}
fi

for deny in $(grep ${TIMEPOINT} ${ACCCESS_LOG} | awk '{print $1}' | awk -F'.' '{print $1&quot;.&quot;$2&quot;.&quot;$3&quot;.&quot;$4}' | sort | uniq -c | sort -r -n | head -n 30| awk '{print $2}')
do

    if [ $(grep -c $deny ${WHITELIST}) -ne 0 ]; then
        echo 'Allow IP:' $deny
	iptables -D INPUT -p tcp --dport 443 -s $deny -j DROP
	iptables -D INPUT -p tcp --dport 80 -s $deny -j DROP
	continue
    fi

    if [ $(grep -c $deny ${BLACKLIST}) -eq 0 ] ; then

	echo 'Deny IP:' $deny
        echo $deny &gt;&gt; ${BLACKLIST}
        iptables -I INPUT -p tcp --dport 443 -s $deny -j DROP
        iptables -I INPUT -p tcp --dport 80 -s $deny -j DROP
    fi
done</pre>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
相比前面脚本，这个脚本更高级，实现关键字过滤，管道实时处理，这样不回因为日志尺寸变大，影响到脚本的处理性能。</p>
<pre class="screen" style="padding:5px; margin-top:0px; margin-bottom:0px; line-height:18px; font-size:9pt; font-family:'Courier New',Arial; border:1px solid rgb(221,221,221); background:rgb(246,246,246)">#!/bin/bash
########################################
# Homepage: http://netkiller.github.io
# Author: neo &lt;netkiller@msn.com&gt;
########################################
ACCESSLOG=/www/logs/www.example.com/access.$(date &#43;'%Y-%m-%d').log
TIMEPOINT='24/May/2012'
KEYWORD=send.php
BLACKLIST=/var/tmp/black.lst
WHITELIST=/var/tmp/white.lst
PIPE=/var/tmp/pipe
pidfile=/var/tmp/firewall.pid
logfile=/var/tmp/firewall.log
########################################
if [ -z &quot;$( egrep &quot;CentOS|Redhat&quot; /etc/issue)&quot; ]; then
	echo 'Only for Redhat or CentOS'
	exit
fi

if [ -z $1 ]; then
    echo &quot;$0 clear|fw|collect|process|close&quot;
fi

if [ &quot;$1&quot; == &quot;clear&quot; ]; then
    rm -rf $BLACKLIST
    rm -rf $PIPE
    echo &quot;Clear OK!!!&quot;
fi

if [ &quot;$1&quot; == &quot;close&quot; ]; then
	killall tail
    kill `cat $pidfile`
    echo &gt; $pidfile
fi

if [ ! -e $PIPE ]; then
    mkfifo $PIPE
fi

if [ &quot;$1&quot; == 'fw' ]; then
    iptables -A OUTPUT -p tcp --dport 2049 -j REJECT
    iptables -A OUTPUT -p tcp -m multiport --dports 22,21 -j REJECT

	for ipaddr in ${WHITELIST}
	do
		if [ $(grep -c $ipaddr ${WHITELIST}) -ne 0 ]; then
			iptables -A INPUT -p tcp --dport 443 -s $ipaddr -j ACCEPT
			iptables -A INPUT -p tcp --dport 80 -s $ipaddr -j ACCEPT
			echo 'Allow IP:' $ipaddr &gt;&gt; $logfile
		fi
		if [ $(grep -c $ipaddr ${BLACKLIST}) -eq 0 ] ; then
			iptables -D INPUT -p tcp --dport 443 -s $ipaddr -j DROP
			iptables -D INPUT -p tcp --dport 80 -s $ipaddr -j DROP
			echo 'Deny IP:' $ipaddr

		fi
	done

fi

if [ &quot;$1&quot; == &quot;collect&quot; ]; then
    killall tail
    for (( ; ; ))
    do
        tail -f $ACCESSLOG | grep $KEYWORD | cut -d ' ' -f1 &gt; $PIPE
    done &amp;
    echo $! &gt; $pidfile
fi

if [ &quot;$1&quot; == &quot;process&quot; ]; then

	if [ ! -f $BLACKLIST ]; then
		touch $BLACKLIST
	fi

	if [ ! -f ${WHITELIST} ]; then
		touch ${WHITELIST}
	fi

	for (( ; ; ))
	do
		while read ipaddr
		do
			if [ $(grep -c $ipaddr ${WHITELIST}) -ne 0 ]; then
				echo 'Allow IP:' $ipaddr &gt;&gt; $logfile
				continue
			fi

			grep $ipaddr ${BLACKLIST}
			if [ $? -eq 1 ] ; then
				echo $ipaddr &gt;&gt; ${BLACKLIST}
				iptables -I INPUT -p tcp --dport 80 -s $ipaddr -j DROP
				echo &quot;Deny IP: $ipaddr&quot; &gt;&gt; $logfile
			fi
		done &lt; $PIPE
	done &amp;
	echo $! &gt;&gt; $pidfile
fi</pre>
</div>
<div style="padding:0px; margin:0px">
<div style="padding:0px; margin:0px"><span id="OSC_h3_11" style="padding:0px; margin:0px"></span>
<h3 style="padding:0px; margin:15px 0px 10px; line-height:28.7999992370605px; font-size:16px">
<a target="_blank" rel="nofollow" style="padding:0px; margin:0px; color:rgb(255,131,115); outline:0px; font-size:12px"></a>5.2.&nbsp;WEB 服务器部分</h3>
</div>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
下面所讲技术，适用于反向代理，负载均衡，web服务器</p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
Web 服务器也可以实现前面所说的防火墙等设备3/4层的功能，同时具备七层功能，很多负载均衡设备7层采用web服务器实现，例如 F5 7层的高级功能是由 Apache httpd 来完成（apache 是经过二次开发的）， 所以7层的部门我们主要在这里深入讨论</p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
如果你有防火墙设备应该首先考虑在防火墙端做控制，如果没有防火墙那麽就考虑在负载均衡设备中做控制，这些设备你都没有，最后考虑在反向代理中处理，最后考虑web服务器。</p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
限制IP地址在这里可以做到更细腻的控制，例如实现某个目录的，某URL的IP访问策略。请自行查找手册或参考《Netkiller Web 手札》</p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
HTTP 协议头</p>
<div style="padding:0px; margin:0px">
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
<span style="padding:0px; margin:0px">我们要做以下几种限制</span></p>
<ol style="padding:0px; margin:10px 20px">
<li style="padding:0px; margin:0px">
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
限制 http_referer， 常说的防盗链。</p>
</li><li style="padding:0px; margin:0px">
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
限制 http_user_agent， 主要是防爬虫</p>
</li><li style="padding:0px; margin:0px">
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
限制 request_method， 不是所有页面都允许 POST</p>
</li><li style="padding:0px; margin:0px">
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
限制 http_cookie， 没有携带正确的 cookie 不允许访问</p>
</li></ol>
</div>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
上面7层访问控制还是比较粗糙的，主要是给应用程序减压，更细腻的控制需要通过程序手段，实现更智能判断。 不过同上上面的层层限制，已经足矣改善你的状况，如果还是无效继续往下看。</p>
<pre class="screen" style="padding:5px; margin-top:0px; margin-bottom:0px; line-height:18px; font-size:9pt; font-family:'Courier New',Arial; border:1px solid rgb(221,221,221); background:rgb(246,246,246)">valid_referers none blocked *.example.com example.com;
if ($invalid_referer) {
	#rewrite ^(.*)$  http://www.example.com/cn/$1;
	return 403;
}</pre>
<pre class="screen" style="padding:5px; margin-top:0px; margin-bottom:0px; line-height:18px; font-size:9pt; font-family:'Courier New',Arial; border:1px solid rgb(221,221,221); background:rgb(246,246,246)">if ($http_user_agent = &quot;&quot;) { 
	return 403; 
}</pre>
</div>
</div>
<div style="padding:0px; margin:0px; color:rgb(51,51,51); font-family:'Microsoft YaHei',Verdana,sans-serif,宋体; font-size:13px; line-height:22.5px">
<div style="padding:0px; margin:0px"><span id="OSC_h2_12" style="padding:0px; margin:0px"></span>
<h2 style="padding:0px; margin:20px 0px 10px; line-height:36px; font-size:20px"><a target="_blank" rel="nofollow" style="padding:0px; margin:0px; color:rgb(255,131,115); outline:0px; font-size:12px"></a>6.&nbsp;通过程序控制访问行为</h2>
</div>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
设计应用防火墙，将所有资源纳入管理范围</p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
IP地址，上面已经反复强调怎样封锁IP地址，但都过于粗糙，很多时候是一刀切。在程序中实现禁止IP访问，更灵活</p>
<div style="padding:0px; margin:0px">
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
<span style="padding:0px; margin:0px">我们要做以下几种限制</span></p>
<ol style="padding:0px; margin:10px 20px">
<li style="padding:0px; margin:0px">
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
单位时间内访问次数</p>
</li><li style="padding:0px; margin:0px">
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
访问时间间隔设置</p>
</li><li style="padding:0px; margin:0px">
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
封锁时间设置</p>
</li><li style="padding:0px; margin:0px">
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
黑白名单</p>
</li></ol>
</div>
<pre class="screen" style="padding:5px; margin-top:0px; margin-bottom:0px; line-height:18px; font-size:9pt; font-family:'Courier New',Arial; border:1px solid rgb(221,221,221); background:rgb(246,246,246)"></pre>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
验证码，最常用的，最有效的方法，分为图片扭曲法，问提/答案 法，手机验证码，语音验证码等等方法，形式多重多样</p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
http_referer， 虽然上面已经做了 http_referer 限制，但是web 服务器只能做粗糙限制，允许 *.example.com 域进行访问，但我需要更精确的控制。例如：</p>
<pre class="screen" style="padding:5px; margin-top:0px; margin-bottom:0px; line-height:18px; font-size:9pt; font-family:'Courier New',Arial; border:1px solid rgb(221,221,221); background:rgb(246,246,246)">www.example.com (此时 http_referer 为空，或者其他，这不重要) -&gt; login.example.com (http_referer: www.example.com)-&gt; login.example.com/auth.ext (http_referer: login.example.com) -&gt; login.example.com/secussed.ext (http_referer: login.example.com/auth.ext)</pre>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
看明白了吗 http_referer 每次都是上一个页面，我们程序中判断，如果上一个页面不是我们所指定的，或者不再允许列表内，就拒绝访问</p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
request_method</p>
<pre class="screen" style="padding:5px; margin-top:0px; margin-bottom:0px; line-height:18px; font-size:9pt; font-family:'Courier New',Arial; border:1px solid rgb(221,221,221); background:rgb(246,246,246)">www.example.com (GET) -&gt; login.example.com (GET)-&gt; login.example.com/auth.ext (POST) -&gt; login.example.com/secussed.ext (GET)</pre>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
同理，在不允许的页面POST操作，将立即拒绝</p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
http_cookie</p>
<pre class="screen" style="padding:5px; margin-top:0px; margin-bottom:0px; line-height:18px; font-size:9pt; font-family:'Courier New',Arial; border:1px solid rgb(221,221,221); background:rgb(246,246,246)">www.example.com (cookie 1) -&gt; login.example.com (cookie 2)-&gt; login.example.com/auth.ext (cookie 3) -&gt; login.example.com/secussed.ext (cookie 4)</pre>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
没有按照指定流程访问，cookie &#20540;不会变化，属于异常行为</p>
cookie &#43; redis 间隔时间
<div style="padding:0px; margin:0px"><span id="OSC_h3_13" style="padding:0px; margin:0px"></span>
<h3 style="padding:0px; margin:15px 0px 10px; line-height:28.7999992370605px; font-size:16px">
提示</h3>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
上面所有的操作都将计入日志，通过脚本可以将异常访问行文达到一定次数后，放入iptables DROP链中。</p>
</div>
</div>
<div style="padding:0px; margin:0px; color:rgb(51,51,51); font-family:'Microsoft YaHei',Verdana,sans-serif,宋体; font-size:13px; line-height:22.5px">
<div style="padding:0px; margin:0px"><span id="OSC_h2_14" style="padding:0px; margin:0px"></span>
<h2 style="padding:0px; margin:20px 0px 10px; line-height:36px; font-size:20px"><a target="_blank" rel="nofollow" style="padding:0px; margin:0px; color:rgb(255,131,115); outline:0px; font-size:12px"></a>7.&nbsp;总结</h2>
</div>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
上面提方法单一使用过于简单，需要组合使用，同时经常调整组合方式才能更有效阻止各种良性与恶性网站访问行为。</p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
<br>
</p>
<p style="padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all">
转自：http://my.oschina.net/neochen/blog/164341</p>
</div>

            <div>
                作者：Killer_ZR 发表于2015/9/2 17:18:06 <a href="http://blog.csdn.net/killer_zr/article/details/48180929">原文链接</a>
            </div>
            <div>
            阅读：16 评论：0 <a href="http://blog.csdn.net/killer_zr/article/details/48180929#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]1125--来hc一年了]]></title>
        <link>http://blog.csdn.net/killer_zr/article/details/7010971</link>
        <guid>http://blog.csdn.net/killer_zr/article/details/7010971</guid>
        <author>Killer_ZR</author>
        <pubDate>2014/6/23 15:02:14</pubDate>
        <description><![CDATA[
            
<p>这篇文章写了一半，一直在我的草稿箱保存，今天无意中看到，O(∩_∩)O~，不一样的感觉</p>
<p><br>
</p>
<p>很少写代码 ,最近开始做一些小东西,发现很多的问题,曾经熟悉的东西已经不熟了;曾经很关注的技术,渐渐远离了;曾经看过的一些原理和实践,也逐步的退出脑海了...作为一个电子商务公司,我们用了很多技术和web前端的东西,却懒得去看代码,懒得去实践,懒得关注新技术...注定了脚步的停滞!</p>
<p>&nbsp;前段时间再看flex ,也做了几个小demo,过了一段时间发现代码又陌生了! ... 学习学习,只学不习,永远都不是自己的,突然不知不觉的反省自己.却没有改过自新的勇气,怕丢掉的太多,已经拣不起 ,呵呵 ,有点汗颜了!</p>
<p>很庆幸来到这个公司,大家都很好.部门的同事都很热心很好相处,也许是这个行业的关系,大家都很老实,不像有的行业那种尔虞我诈,勾心斗角,天天演绎宫廷大戏&#20284;的感觉...我毕业后的第一家公司,就是已经上市经营多年的公司,呵呵,又该感恩了,也许自从被公司打电话通知面试开始,我的周围就布满了贵人..所谓贵人，一路上帮助我的人</p>
<p>来公司面试那天,记得也相当清楚:那天面试了三家,公司是最后一个,但是地点总是找不到,下午5点左右天已经黑了,真不想去了,看见一个穿着整洁的人便过去问路,结果他也不知道,&quot;北京大,连出租车司机都不知道很多很多地方,算了吧,不浪费时间了,还是先回去吧..&quot;正想着,他却拿出手机拨了一个电话,很客气很热心的帮我问路,听说是他的一个朋友正好在这家公司,他告诉我坐什么车,怎么走..然后他上车前递我一张名片,嘱咐我:如果还是找不到,打名片上得电话找他,他帮我问路...嘿,天不绝我!在我无助准备放弃的时候,一个陌生人竟然都这么努力的帮我,我除了感谢,然后就是自己不气馁的找...</p>
<p>终于找到了,可是天黑了,天堂在左,地狱在右,我该不去呢还是该给自己一个机会???终于进去了,按通知找了顾小姐,呵呵,后来知道她是我们大部门的美女助理,她递我一套笔试题,我拿去找地开始做了 ,都是基础还有附加题,很快我做完了按照我的思想,...在我对面还有一个男生在做题,比我早到,他做完了随后有人面试他,我做完题目,没事就看看他们说话.第一个人面试完他,随后又有第二人面试，后来他成为我的同事，那两个面试我的就是我们的部门经理。</p>

            <div>
                作者：Killer_ZR 发表于2014/6/23 15:02:14 <a href="http://blog.csdn.net/killer_zr/article/details/7010971">原文链接</a>
            </div>
            <div>
            阅读：163 评论：0 <a href="http://blog.csdn.net/killer_zr/article/details/7010971#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]Google gson 和 alibaba  性能测试]]></title>
        <link>http://blog.csdn.net/killer_zr/article/details/26608765</link>
        <guid>http://blog.csdn.net/killer_zr/article/details/26608765</guid>
        <author>Killer_ZR</author>
        <pubDate>2014/5/22 18:29:32</pubDate>
        <description><![CDATA[
            
<p><pre code_snippet_id="358740" snippet_file_name="blog_20140522_1_8486377"  name="code" class="java">  List list = new ArrayList();
        int j = 0;
        U u = null;
        while (j&lt;1000000){
            u = new U();
            u.setAge(j);
            u.setName(&quot;zhangsan &quot; + j);
            u.setNo(&quot;&quot; + j);
            list.add(u);
            j++;
        }</pre></p>
<p>运行结果：</p>
ali fastjson
<p><pre code_snippet_id="358740" snippet_file_name="blog_20140522_2_8202969"  name="code" class="java"> long s = System.currentTimeMillis();
        System.out.println(&quot;before alibaba:&quot; +s);
        String aliJson = com.alibaba.fastjson.JSON.toJSONString(list);
        long e = System.currentTimeMillis();
        System.out.println(&quot;after alibaba:&quot; +e);
        System.out.println(&quot;diff:&quot; + (e-s));
        list = null;
        long s3 = System.currentTimeMillis();
        List sult = (List) com.alibaba.fastjson.JSONObject.parse(aliJson);
        long e3 = System.currentTimeMillis();
        System.out.println(&quot;反 diff:&quot; + (e3-s3));</pre>gson&nbsp;</p>
<p><pre code_snippet_id="358740" snippet_file_name="blog_20140522_3_2521368"  name="code" class="java"> long s1 = System.currentTimeMillis();
        System.out.println(&quot;before Gson:&quot; + s1);
        Gson gson = new Gson();
        String gsonStr = gson.toJson(list);
        long e1 = System.currentTimeMillis();
        System.out.println(&quot;after Gson:&quot; + e1);
        System.out.println(&quot;diff:&quot; + (e1-s1));
        list = null;
        long s4 = System.currentTimeMillis();
        List sult2 = gson.fromJson(gsonStr,List.class);
        long e4 = System.currentTimeMillis();
        System.out.println(&quot;反 diff:&quot; + (e4-s4));</pre></p>
<p><br>
</p>
<br>
测试结果：
<p>数据较少时，gson还是比较快的</p>
<p>当数据多时，【当前测试数据100万】gson 比较慢，而且非常耗内存</p>
<p><pre code_snippet_id="358740" snippet_file_name="blog_20140522_4_5759971"  name="code" class="plain">比较来说, Gson 比 fastjson 考虑更全面, 对用 URL , UUID, BIT_SET, CALENDAR 等等,都有特定的输出规则.
小数量的调用 Gson 比 fastjson 快一点. (几十毫秒,可以毫不在意.猜测是因为 javassist 生成新的 Wrapper 类导致,因为还要编译的.)
大数量的调用 fastjson 比 Gson 快. (千万级别的.还不太确定为什么会变快, 猜测是 gson 的反射调用,毕竟比不上 fastjson Wrapper 类的真实调用.)
代码可阅读性: fastjson  比 Gson 好很多很多.
fastjson 在要序列化对象的类型的判断上,使用的是 if else , 
Gson 使用的是遍历 TypeAdapterFactory集合,在每个 TypeAdapterFactory 里面做判断.而且使用了 N 多的匿名内部类, 想要一眼看出有哪些 TypeAdapterFactory 的实现都很困难.
如果普通日常使用,推荐使用 fastjson,简单易懂,并且是国内程序员开发,有问题可以较容易的获得支持.
Gson 有对各种类型的属性支持, 如果有特殊类型json化需求可以选择 gson ,并自定义扩充.</pre><br>
<br>
</p>
<p><br>
</p>

            <div>
                作者：Killer_ZR 发表于2014/5/22 18:29:32 <a href="http://blog.csdn.net/killer_zr/article/details/26608765">原文链接</a>
            </div>
            <div>
            阅读：2350 评论：1 <a href="http://blog.csdn.net/killer_zr/article/details/26608765#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]java  Map,ArrayList 排序]]></title>
        <link>http://blog.csdn.net/killer_zr/article/details/24804061</link>
        <guid>http://blog.csdn.net/killer_zr/article/details/24804061</guid>
        <author>Killer_ZR</author>
        <pubDate>2014/4/30 17:16:38</pubDate>
        <description><![CDATA[
            
<p>1.Map&lt;key,value&gt; 排序</p>
<p>&nbsp; &nbsp;<pre code_snippet_id="321087" snippet_file_name="blog_20140430_1_3645577"  name="code" class="java">    /**
     * map 排序
     *
     * @param map
     * @param reverse true:降序，false:升序
     * @return
     */
    public static Map sortByValue(Map&lt;String, Double&gt; map, final boolean reverse) {
        List list = new LinkedList(map.entrySet());
        Collections.sort(list, new Comparator() {
            public int compare(Object o1, Object o2) {
                if (reverse) {
                    return -((Comparable) ((Map.Entry) o1).getValue())
                            .compareTo(((Map.Entry) o2).getValue());
                }
                return ((Comparable) ((Map.Entry) o1).getValue())
                        .compareTo(((Map.Entry) o2).getValue());
            }
        });
        Map result = new LinkedHashMap();
        for (Iterator it = list.iterator(); it.hasNext(); ) {
            Map.Entry entry = (Map.Entry) it.next();
            result.put(entry.getKey(), entry.getValue());
        }
        return result;

    }</pre>2.List&lt;String&gt; &nbsp;排序</p>
<p><pre code_snippet_id="321087" snippet_file_name="blog_20140430_2_8182126"  name="code" class="java">  /**
     * 根据销量排序
     *  String &nbsp;&quot;aa:39:ww&quot;
     * @param list 二级分类下的产品集合
     * @param
     */
    public static void sortListValue(List&lt;String&gt; list) {
        for (int i = 0; i &lt; list.size(); i++) {
            for (int j = 1; j &lt; list.size(); j++) {
                //ddd:20: j的值
                String key1 = list.get(j);
                String[] array1 = key1.split(&quot;:&quot;);
                int salesVolume1 = Integer.parseInt(array1[1]);
                // j -1 的值
                String key2 = list.get(j - 1);
                String[] array2 = key2.split(&quot;:&quot;);
                int salesVolume2 = Integer.parseInt(array2[1]);
                String temp;
                if (salesVolume1 - salesVolume2 &gt; 0) { // 比较两个整数的大小
                    temp = list.get(j);
                    list.set(j, list.get(j - 1));
                    list.set((j - 1), temp);
                }
            }
        }

    }
</pre><br>
<br>
</p>

            <div>
                作者：Killer_ZR 发表于2014/4/30 17:16:38 <a href="http://blog.csdn.net/killer_zr/article/details/24804061">原文链接</a>
            </div>
            <div>
            阅读：187 评论：0 <a href="http://blog.csdn.net/killer_zr/article/details/24804061#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]语法笔记]]></title>
        <link>http://blog.csdn.net/killer_zr/article/details/24266477</link>
        <guid>http://blog.csdn.net/killer_zr/article/details/24266477</guid>
        <author>Killer_ZR</author>
        <pubDate>2014/4/21 17:53:19</pubDate>
        <description><![CDATA[
            
<p>ibaits 联合主键批量删除</p>
<p>DAO 定义：public void batchDelete(List&lt;SysSource&gt; list);<br>
</p>
<p></p>
<pre code_snippet_id="304692" snippet_file_name="blog_20140421_1_5479727"  code_snippet_id="304692" snippet_file_name="blog_20140421_1_5479727" name="code" class="html">&lt;delete id=&quot;batchDelete&quot; parameterClass=&quot;java.util.List&quot;&gt;
        DELETE 	FROM SYS_SOURCE 	/*  */
        WHERE
        &lt;iterate open=&quot;(&quot; close=&quot;)&quot; conjunction=&quot;OR&quot; &gt;
            DATA_SOURCE = #list[].dataSource#		/* 数据库类型 */
            AND DB_NAME = #list[].dbName#		/* 数据库名 */
            AND SYS_ID = #list[].sysId#		/* 系统编号 */
        &lt;/iterate&gt;
    &lt;/delete&gt;</pre><br>
<p>mybatis&nbsp;</p>
<p>&nbsp;&nbsp;<pre code_snippet_id="304692" snippet_file_name="blog_20140509_2_6351853"  name="code" class="java"> &lt;collection property=&quot;subList&quot; column=&quot;menu_id&quot; ofType=&quot;SysMenu&quot;
                     select=&quot;searchSubMenu&quot; javaType=&quot;ArrayList&quot;/&gt;</pre><pre code_snippet_id="304692" snippet_file_name="blog_20140509_3_5937932"  name="code" class="java"><pre code_snippet_id="304692" snippet_file_name="blog_20140509_3_5937932"  name="code" class="java">&lt;select id=&quot;searchSubMenu&quot; resultMap=&quot;sysMenuMap&quot; parameterType=&quot;String&quot;&gt;
            SELECT
		    *
		    FROM sys_right s
		    WHERE
		    s.parent_id = #{menu_id}
    &lt;/select&gt;</pre><br>
<br>
</p>
<pre></pre>
<br>
<p></p>
<p></p>
<p><br>
</p>

            <div>
                作者：Killer_ZR 发表于2014/4/21 17:53:19 <a href="http://blog.csdn.net/killer_zr/article/details/24266477">原文链接</a>
            </div>
            <div>
            阅读：131 评论：0 <a href="http://blog.csdn.net/killer_zr/article/details/24266477#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[转]javascript【性能调优】]]></title>
        <link>http://blog.csdn.net/killer_zr/article/details/21977163</link>
        <guid>http://blog.csdn.net/killer_zr/article/details/21977163</guid>
        <author>Killer_ZR</author>
        <pubDate>2014/3/24 19:28:41</pubDate>
        <description><![CDATA[
            
<p></p>
<p style="font-family:arial,nsimsun,sans-serif; margin-top:0px; margin-bottom:0px; padding:0.3em 5px 0.7em">
</p>
<h2><strong>一. javascript 性能出现的原因？</strong></h2>
<p></p>
<p align="left">JavaScript 语言由于它的单线程和解释执行的两个特点，决定了它本身有很多地方有性能问题，所以可改进的地方有不少。</p>
<h2>二. 需要注意的方面及解决方案</h2>
<h3>1.eval() 的问题</h3>
<p style="font-family:arial,nsimsun,sans-serif; margin-top:0px; margin-bottom:0px; padding:0.3em 5px 0.7em">
</p>
<pre code_snippet_id="254076" snippet_file_name="blog_20140324_1_399096"  name="code" class="javascript"> var reference = {}, props = “p1”; 
 eval(“reference.” + props + “=5”) 

 var reference = {}, props = “p1”; 
 reference[props] = 5 
</pre><br>
<p></p>
<p align="left">有“eval”的代码比没有“eval”的代码要慢上 100 倍以上。</p>
<p align="left">主要原因是：JavaScript 代码在执行前会进行类&#20284;“预编译”的操作：首先会创建一个当前执行环境下的活动对象，并将那些用 var 申明的变量设置为活动对象的属性，但是此时这些变量的赋&#20540;都是 undefined，并将那些以 function 定义的函数也添加为活动对象的属性，而且它们的&#20540;正是函数的定义。但是，如果你使用了“eval”，则“eval”中的代码（实际上为字符串）无法预先识别其上下文，无法被提前解析和优化，即无法进行预编译的操作。所以，其性能也会大幅度降低。</p>
<h3>2.Function的用法</h3>
<pre code_snippet_id="254076" snippet_file_name="blog_20140324_2_8861168"  name="code" class="javascript"> var func1 = new Function(“return arguments[0] + arguments[1]”);
 func1(10, 20); 

 var func2 = function(){ return arguments[0] + arguments[1] };
 func2(10, 20); 
</pre>
<p align="left">这里类&#20284;之前提到的“eval”方法，这里“func1”的效率会比“func2”的效率差很多，所以推荐使用第二种方式。</p>
<h3>3.函数的作用域链【scope chain】</h3>
<p style="margin-top:0px; margin-bottom:0px; padding:0.3em 5px 0.7em"></p>
<p align="left" style="font-family:arial,nsimsun,sans-serif">JavaScript 代码解释执行，在进入函数内部时，它会预先分析当前的变量，并将这些变量归入不同的层级（level），一般情况下：</p>
<p align="left" style="font-family:arial,nsimsun,sans-serif">局部变量放入层级 1（浅），全局变量放入层级 2（深）。如果进入“with”或“try – catch”代码块，则会增加新的层级，即将“with”或“catch”里的变量放入最浅层（层 1），并将之前的层级依次加深。</p>
<p align="left" style="font-family:arial,nsimsun,sans-serif">参考如下代码：</p>
<pre code_snippet_id="254076" snippet_file_name="blog_20140324_3_5305355"  name="code" class="javascript" style="font-family: arial, nsimsun, sans-serif;">var myObj = … .. 
… .. 
 function process(){ 
 var images = document.getElementsByTagName(&quot;img&quot;), 
 widget = document.getElementsByTagName(&quot;input&quot;), 
 combination = []; 
 for(var i = 0; i &lt; images.length; i++){ 
 combination.push(combine(images[i], widget[2*i])); 
 } 
 myObj.container.property1 = combination[0]; 
 myObj.container.property2 = combination[combination.length-1]; 
 } 
</pre><br>
<p align="left" style="font-family:arial,nsimsun,sans-serif">这里我们可以看到，“images”，“widget”，“combination”属于局部变量，在层 1。“document”，“myObj”属于全局变量，在层 2。</p>
<p align="left" style="font-family:arial,nsimsun,sans-serif">变量所在的层越浅，访问（读取或修改）速度越快，层越深，访问速度越慢。所以这里对“images”，“widget”，“combination”的访问速度比“document”，“myObj”要快一些。所以推荐尽量使用局部变量，可见如下代码：</p>
<h3 style="font-family:arial,nsimsun,sans-serif">4.使用局部变量</h3>
<div><pre code_snippet_id="254076" snippet_file_name="blog_20140324_4_2862357"  name="code" class="javascript" style="font-family: arial, nsimsun, sans-serif;"> var myObj = … .. 
… .. 
 function process(){ 
 var doc = document;
 var images = doc.getElementsByTagName(&quot;img&quot;), 
 widget = doc.getElementsByTagName(&quot;input&quot;), 
 combination = []; 
 for(var i = 0; i &lt; images.length; i++){ 
 combination.push(combine(images[i], widget[2*i])); 
 } 
 myObj.container.property1 = combination[0]; 
 myObj.container.property2 = combination[combination.length-1]; 
 } 
</pre>
<p align="left" style="font-family:arial,nsimsun,sans-serif">我们用局部变量“doc”取代全局变量“document”，这样可以改进性能，尤其是对于大量使用全局变量的函数里面。</p>
<p align="left" style="font-family:arial,nsimsun,sans-serif">再看如下代码：</p>
<h3 style="font-family:arial,nsimsun,sans-serif">5.慎用with</h3>
<pre code_snippet_id="254076" snippet_file_name="blog_20140324_5_7039051"  name="code" class="javascript" style="font-family: arial, nsimsun, sans-serif;">var myObj = … .. 
… .. 
 function process(){ 
 var doc = document; 
    var images = doc.getElementsByTagName(&quot;img&quot;), 
 widget = doc.getElementsByTagName(&quot;input&quot;), 
 combination = []; 
 for(var i = 0; i &lt; images.length; i++){ 
 combination.push(combine(images[i], widget[2*i])); 
 } 
 with (myObj.container) {
 property1 = combination[0];
 property2 = combination[combination.length-1];
				 }
 } 
</pre>
<div style="font-family:arial,nsimsun,sans-serif">
<p align="left">加上“with”关键字，我们让代码更加简洁清晰了，但是这样做性能会受影响。正如之前说的，当我们进入“with”代码块时，“combination”便从原来的层 1 变到了层 2，这样，效率会大打折扣。所以比较一下，还是使用原来的代码：</p>
<h3>6.改进with</h3>
</div>
<div style="font-family:arial,nsimsun,sans-serif"><pre code_snippet_id="254076" snippet_file_name="blog_20140324_6_8151084"  name="code" class="javascript"> var myObj = … .. 
… .. 
 function process(){ 
 var doc = document; 
 var images = doc.getElementsByTagName(&quot;img&quot;), 
 widget = doc.getElementsByTagName(&quot;input&quot;), 
 combination = []; 
 for(var i = 0; i &lt; images.length; i++){ 
 combination.push(combine(images[i], widget[2*i])); 
 } 
 myObj.container.property1 = combination[0];
 myObj.container.property2 = combination[combination.length-1];
      } 
</pre><span style="font-size:9pt; font-family:宋体">但是这样并不是最好的方式，</span><span lang="EN-US" style="font-size:9pt; font-family:Arial,sans-serif">JavaScript</span><span style="font-size:9pt; font-family:宋体">有个特点，对于</span><span lang="EN-US" style="font-size:9pt; font-family:Arial,sans-serif">
 object</span><span style="font-size:9pt; font-family:宋体">对象来说，其属性访问层级越深，效率越低，比如这里的</span><span lang="EN-US" style="font-size:9pt; font-family:Arial,sans-serif">“myObj”</span><span style="font-size:9pt; font-family:宋体">已经访问到了第</span><span lang="EN-US" style="font-size:9pt; font-family:Arial,sans-serif">
 3 </span><span style="font-size:9pt; font-family:宋体">层，我们可以这样改进一下：</span></div>
<div>
<h3><span style="font-family:宋体">7.缩写对象访问层级</span></h3>
</div>
<pre code_snippet_id="254076" snippet_file_name="blog_20140324_7_4803014"  name="code" class="javascript"> var myObj = … .. 
… .. 
 function process(){ 
 var doc = document; 
    var images = doc.getElementsByTagName(&quot;img&quot;), 
 widget = doc.getElementsByTagName(&quot;input&quot;), 
 combination = []; 
 for(var i = 0; i &lt; images.length; i++){ 
 combination.push(combine(images[i], widget[2*i])); 
 } 
 var ctn = myObj.container;
 ctn.property1 = combination[0];
 ctn.property2 = combination[combination.length-1];
      } 
</pre><span style="font-size:9pt; font-family:宋体">我们用局部变量来代替</span><span lang="EN-US" style="font-size:9pt; font-family:Arial,sans-serif">“myObj”</span><span style="font-size:9pt; font-family:宋体">的第</span><span lang="EN-US" style="font-size:9pt; font-family:Arial,sans-serif">
 2 </span><span style="font-size:9pt; font-family:宋体">层的</span><span lang="EN-US" style="font-size:9pt; font-family:Arial,sans-serif">“container”</span><span style="font-size:9pt; font-family:宋体">对象。如果有大量的这种对对象深层属性的访问，可以参照以上方式提高性能</span><br>
<br>
</div>
<h3>8.字符串简单拼接</h3>
<h3><span style="background-color:rgb(240,240,240); font-size:12px">&nbsp;str &#43;= “str1” &#43; “str2”</span></h3>
<div><span style="background-color:rgb(240,240,240); font-size:12px"></span>
<p align="left">这是我们拼接字符串常用的方式，但是这种方式会有一些临时变量的创建和销毁，影响性能，所以推荐使用如下方式拼接：</p>
<h3><span style="background-color:rgb(240,240,240); font-size:12px">9.字符串数组方式拼接</span></h3>
</div>
<div><span style="background-color:rgb(240,240,240); font-size:12px"></span><pre code_snippet_id="254076" snippet_file_name="blog_20140324_8_375149"  name="code" class="javascript"> var str_array = []; 
 str_array.push(“str1”); 
 str_array.push(“str2”); 
 str = str_array.join(“”);
</pre>
<p align="left">这里我们利用数组（array）的“join”方法实现字符串的拼接，尤其是程序的老版本的 Internet Explore（IE6）上运行时，会有非常明显的性能上的改进。</p>
<p align="left">当然，最新的浏览器（如火狐 Firefox3&#43;，IE8&#43; 等等）对字符串的拼接做了优化，我们也可以这样写：</p>
<h3><span style="background-color:rgb(240,240,240); font-size:12px">10.字符串快速拼接</span></h3>
</div>
<div><span style="background-color:rgb(240,240,240); font-size:12px"></span><pre code_snippet_id="254076" snippet_file_name="blog_20140324_9_9568352"  name="code" class="javascript"> str +=“str1”
 str +=“str2”
</pre><span style="font-size:9pt; font-family:宋体">新的浏览器对</span><span lang="EN-US" style="font-size:9pt; font-family:Arial,sans-serif">“&#43;=”</span><span style="font-size:9pt; font-family:宋体">做了优化，性能略快于数组的</span><span lang="EN-US" style="font-size:9pt; font-family:Arial,sans-serif">“join”</span><span style="font-size:9pt; font-family:宋体">方法。在不久的将来更新版本浏览器可能对</span><span lang="EN-US" style="font-size:9pt; font-family:Arial,sans-serif">“&#43;”</span><span style="font-size:9pt; font-family:宋体">也会做优化，所以那时我们可以直接写：</span><span lang="EN-US" style="font-size:9pt; font-family:Arial,sans-serif">str
 &#43;= “str1” &#43; “str2”</span><br>
<h3><span style="background-color:rgb(240,240,240); font-size:12px">11.隐式类型转换</span></h3>
</div>
<div><span style="background-color:rgb(240,240,240); font-size:12px"></span><pre code_snippet_id="254076" snippet_file_name="blog_20140324_10_680386"  name="code" class="javascript"> var str = “12345678”, arr = []; 
 for(var i = 0; i &lt;= s.length; i++){ 
 arr.push( str.charAt(i)); 
 } 
</pre><span style="font-size:9pt; font-family:宋体">这里我们在每个循环时都会调用字符串的</span><span lang="EN-US" style="font-size:9pt; font-family:Arial,sans-serif">“charAt”</span><span style="font-size:9pt; font-family:宋体">方法，但是由于我们是将常量</span><span lang="EN-US" style="font-size:9pt; font-family:Arial,sans-serif">“12345678”</span><span style="font-size:9pt; font-family:宋体">赋&#20540;给</span><span lang="EN-US" style="font-size:9pt; font-family:Arial,sans-serif">“str”</span><span style="font-size:9pt; font-family:宋体">，所以</span><span lang="EN-US" style="font-size:9pt; font-family:Arial,sans-serif">“str”</span><span style="font-size:9pt; font-family:宋体">这里事实上并不是一个字符串对象，当它每次调用</span><span lang="EN-US" style="font-size:9pt; font-family:Arial,sans-serif">“charAt”</span><span style="font-size:9pt; font-family:宋体">函数时，都会临时构造&#20540;为</span><span lang="EN-US" style="font-size:9pt; font-family:Arial,sans-serif">“12345678”</span><span style="font-size:9pt; font-family:宋体">的字符串对象，然后调用</span><span lang="EN-US" style="font-size:9pt; font-family:Arial,sans-serif">“charAt”</span><span style="font-size:9pt; font-family:宋体">方法，最后再释放这个字符串临时对象。我们可以做一些改进</span></div>
<div><span style="background-color:rgb(240,240,240); font-size:12px"><span style="font-family:宋体"><br>
</span></span></div>
<div>
<h3><span style="background-color:rgb(240,240,240); font-size:12px"><span style="font-family:宋体">12.避免隐式类型转换</span></span></h3>
<div><span style="background-color:rgb(240,240,240); font-size:12px"><span style="font-family:宋体"></span></span><pre code_snippet_id="254076" snippet_file_name="blog_20140324_11_4300672"  name="code" class="javascript"> var str = new Stirng(“12345678”), arr = []; 
 for(var i = 0; i &lt;= s.length; i++){ 
 arr.push( str.charAt(i)); 
 } 
</pre><span style="font-size:9pt; font-family:宋体">这样一来，变量</span><span lang="EN-US" style="font-size:9pt; font-family:Arial,sans-serif">“str”</span><span style="font-size:9pt; font-family:宋体">作为一个字符串对象，就不会有这种隐式类型转换的过程了，这样一来，效率会显著提高</span></div>
<div><span style="background-color:rgb(240,240,240); font-size:12px"><span style="font-family:宋体"><br>
</span></span></div>
<h3><span style="background-color:rgb(240,240,240); font-size:12px"><span style="font-family:宋体">13.正则表达式</span></span></h3>
<div><span style="background-color:rgb(240,240,240); font-size:12px"><span style="font-family:宋体"></span></span>
<p align="left">JavaScript 有 RegExp 对象，支持对字符串的正则表达式匹配。是一个很好的工具，但是它的性能并不是非常理想。相反，字符串对象（String）本身的一些基本方法的效率是非常高的，比如“substring”，“indexOf”，“charAt”等等，在我们需要用正则表达式匹配字符串时，可以考虑一下：</p>
<p align="left">&nbsp; &nbsp; &nbsp;是否能够通过字符串对象本身支持的基本方法解决问题。</p>
<p align="left">&nbsp; &nbsp; &nbsp;是否可以通过“substring”来缩小需要用正则表达式的范围。</p>
<p align="left">这些方式都能够有效的提高程序的效率。</p>
<p align="left">关于正则表达式对象，还有一点需要注意，参考如下代码：</p>
<pre code_snippet_id="254076" snippet_file_name="blog_20140324_12_4540652"  name="code" class="javascript"> for(var i = 0; i &lt;= str_array.length; i++){ 
 if(str_array[i].match(/^s*extra\s/)){ 
……………………
 } 
 } 
</pre>
<p align="left">这里，我们往“match”方法传入“/^s*extra\s/”是会影响效率的，它会构建临时&#20540;为“/^s*extra\s/”的正则表达式对象，执行“match”方法，然后销毁临时的正则表达式对象。我们可以这样做：</p>
<h3><span style="background-color:rgb(240,240,240); font-size:12px"><span style="font-family:宋体">14.利用变量</span></span></h3>
</div>
<div><span style="background-color:rgb(240,240,240); font-size:12px"><span style="font-family:宋体"></span></span><pre code_snippet_id="254076" snippet_file_name="blog_20140324_13_1508227"  name="code" class="javascript">var sExpr = /^s*extra\s/;
 for(var i = 0; i &lt;= str_array.length; i++){ 
 if(str_array[i].match(sExpr)){ 
……………………
 } 
 } 
</pre>
<p align="left">这样就不会有临时对象了。</p>
<p align="left"><strong>setTimeout 和 setInterval</strong></p>
<p align="left">“setTimeout”和“setInterval”这两个函数可以接受字符串变量，但是会带来和之前谈到的“eval”类&#20284;的性能问题，所以建议还是直接传入函数对象本身。</p>
<p align="left"><strong>利用提前退出</strong></p>
<p align="left">参考如下两段代码：</p>
<h3><span style="background-color:rgb(240,240,240); font-size:12px"><span style="font-family:宋体">15.利用提前退出</span></span></h3>
<span style="background-color:rgb(240,240,240); font-size:12px"><span style="font-family:宋体"></span></span><pre code_snippet_id="254076" snippet_file_name="blog_20140324_14_2304615"  name="code" class="javascript">// 代码 1
 var name = … .; 
 var source = …… ; 
 if(source.match(/ …… /)){ 
……………………………
 } 


 // 代码 2
 var name = … .; 
 var source = …… ; 
 if(name.indexOf( … ) &amp;&amp;source.match(/ …… /)){ 
……………………………
 } 
</pre><br>
<p align="left">代码 2 多了一个对“name.indexOf( … )”的判断，这使得程序每次走到这一段时会先执行“indexOf”的判断，再执行后面的“match”，在“indexOf”比“match”效率高很多的前提下，这样做会减少“match”的执行次数，从而一定程度的提高效率。</p>
----------------------------------------------------------------------</div>
<div>
<p align="left"><span style="background-color:rgb(204,204,204)">DOM操作性能调优</span></p>
<p align="left"><span style="background-color:rgb(204,204,204)">JavaScript 的开发离不开 DOM 的操作，所以对 DOM 操作的性能调优在 Web 开发中也是非常重要的。</span></p>
<p align="left"><span style="background-color:rgb(204,204,204)">Repaint 和 Reflow</span></p>
<p align="left" style="font-family:宋体; font-size:12px"><span style="background-color:rgb(204,204,204)">Repaint 也叫 Redraw，它指的是一种不会影响当前 DOM 的结构和布局的一种重绘动作。如下动作会产生 Repaint 动作：</span></p>
<p align="left" style="font-family:宋体; font-size:12px"><span style="background-color:rgb(204,204,204)">1.&nbsp;&nbsp;&nbsp;&nbsp; 不可见到可见（visibility 样式属性）</span></p>
<p align="left" style="font-family:宋体; font-size:12px"><span style="background-color:rgb(204,204,204)">2.&nbsp;&nbsp;&nbsp;&nbsp; 颜色或图片变化（background, border-color, color 样式属性）</span></p>
<p align="left" style="font-family:宋体; font-size:12px"><span style="background-color:rgb(204,204,204)">3.&nbsp;&nbsp;&nbsp;&nbsp; 不改变页面元素大小，形状和位置，但改变其外观的变化</span></p>
<p align="left" style="font-family:宋体; font-size:12px"><span style="background-color:rgb(204,204,204)">Reflow 比起 Repaint 来讲就是一种更加显著的变化了。它主要发生在 DOM 树被操作的时候，任何改变 DOM 的结构和布局都会产生 Reflow。但一个元素的 Reflow 操作发生时，它的所有父元素和子元素都会放生 Reflow，最后 Reflow 必然会导致 Repaint 的产生。举例说明，如下动作会产生
 Repaint 动作：</span></p>
<p align="left" style="font-family:宋体; font-size:12px"><span style="background-color:rgb(204,204,204)">1.&nbsp;&nbsp;&nbsp;&nbsp; 浏览器窗口的变化</span></p>
<p align="left" style="font-family:宋体; font-size:12px"><span style="background-color:rgb(204,204,204)">2.&nbsp;&nbsp;&nbsp;&nbsp; DOM 节点的添加删除操作</span></p>
<p align="left" style="font-family:宋体; font-size:12px"><span style="background-color:rgb(204,204,204)">3.&nbsp;&nbsp;&nbsp;&nbsp; 一些改变页面元素大小，形状和位置的操作的触发</span></p>
<br>
<h3><span style="font-family:宋体"><span style="background-color:rgb(240,240,240)">16.Reflow</span></span></h3>
</div>
<div><span style="font-family:宋体"></span>
<p align="left">通过 Reflow 和 Repaint 的介绍可知，每次 Reflow 比其 Repaint 会带来更多的资源消耗，我们应该尽量减少 Reflow 的发生，或者将其转化为只会触发 Repaint 操作的代码。</p>
<p align="left">参考如下代码：</p>
<p align="left"><pre code_snippet_id="254076" snippet_file_name="blog_20140324_15_5924902"  name="code" class="javascript"> var pDiv = document.createElement(“div”); 
 document.body.appendChild(pDiv);----- reflow
 var cDiv1 = document.createElement(“div”); 
 var cDiv2 = document.createElement(“div”); 
 pDiv.appendChild(cDiv1);----- reflow
 pDiv.appendChild(cDiv2);----- reflow
</pre><span style="font-size:9pt; font-family:宋体">这是我们经常接触的代码了，但是这段代码会产生</span><span lang="EN-US" style="font-size:9pt; font-family:Arial,sans-serif"> 3
</span><span style="font-size:9pt; font-family:宋体">次</span><span lang="EN-US" style="font-size:9pt; font-family:Arial,sans-serif"> reflow</span><span style="font-size:9pt; font-family:宋体">。再看如下代码:</span></p>
<h3>17.减少Reflow</h3>
<p align="left"><pre code_snippet_id="254076" snippet_file_name="blog_20140324_16_4877343"  name="code" class="javascript"> var pDiv = document.createElement(“div”); 
 var cDiv1 = document.createElement(“div”); 
 var cDiv2 = document.createElement(“div”); 
 pDiv.appendChild(cDiv1); 
 pDiv.appendChild(cDiv2); 
 document.body.appendChild(pDiv);----- reflow
</pre></p>
<p align="left">这里便只有一次 reflow，所以我们推荐这种 DOM 节点操作的方式。</p>
关于上述较少 Reflow 操作的解决方案，还有一种可以参考的模式：<br>
<h3>18.使用display减少reflow</h3>
<pre code_snippet_id="254076" snippet_file_name="blog_20140324_17_7069171"  name="code" class="javascript">var pDiv = document.getElementById(“parent”); 
 pDiv.style.display = “none”----- reflow

 pDiv.appendChild(cDiv1); 
 pDiv.appendChild(cDiv2); 
 pDiv.appendChild(cDiv3); 
 pDiv.appendChild(cDiv4); 
 pDiv.appendChild(cDiv5); 
 pDiv.style.width = “100px”; 
 pDiv.style.height = “100px”; 

 pDiv.style.display = “block”----- reflow
</pre><br>
<p align="left">先隐藏 pDiv，再显示，这样，隐藏和显示之间的操作便不会产生任何的 Reflow，提高了效率。</p>
--------------------------------------------------------------
<p align="left">特殊测量属性及方法</p>
<p align="left">DOM 元素里面有一些特殊的测量属性的访问和方法的调用，也会触发 Reflow，比较典型的就是“offsetWidth”属性和“getComputedStyle”方法。<br>
</p>
<img src="" alt=""><br>
</div>
<div><span style="font-family:宋体"></span>
<p align="left">这些测量属性和方法大致有这些：</p>
<ul type="disc">
<li>offsetLeft </li><li>offsetTop </li><li>offsetHeight </li><li>offsetWidth </li><li>scrollTop/Left/Width/Height </li><li>clientTop/Left/Width/Height </li><li>getComputedStyle() </li><li>currentStyle(in IE))</li></ul>
<p align="left">这些属性和方法的访问和调用，都会触发 Reflow 的产生，我们应该尽量减少对这些属性和方法的访问和调用，参考如下代码：</p>
<h3><span style="font-family:宋体">19.特殊测量属性和方法</span></h3>
</div>
<div><span style="font-family:宋体"></span><pre code_snippet_id="254076" snippet_file_name="blog_20140324_18_9294018"  name="code" class="javascript"> var pe = document.getElementById(“pos_element”); 
 var result = document.getElementById(“result_element”); 
 var pOffsetWidth = pe.offsetWidth;
 result.children[0].style.width  = pOffsetWidth; 
 result.children[1].style.width  = pOffsetWidth; 
 result.children[2].style.width  = pOffsetWidth; 
…………其他修改…………
</pre><br>
<p align="left">这里我们可以用临时变量将“offsetWidth”的&#20540;缓存起来，这样就不用每次访问“offsetWidth”属性。这种方式在循环里面非常适用，可以极大地提高性能。</p>
<br>
</div>
</div>
<p style="margin-top:0px; margin-bottom:0px; padding:0.3em 5px 0.7em"></p>
<h3>20.样式相关</h3>
<p></p>
<p align="left"><pre code_snippet_id="254076" snippet_file_name="blog_20140324_19_6261592"  name="code" class="javascript">				 
 var sElement = document.getElementById(“pos_element”); 
 sElement.style.border = ‘ 1px solid red ’
 sElement.style.backgroundColor = ‘ silver ’
 sElement.style.padding = ‘ 2px 3px ’
 sElement.style.marginLeft = ‘ 5px ’
</pre></p>
<p align="left">但是可以看到，这里的每一个样式的改变，都会产生 Reflow。需要减少这种情况的发生，我们可以这样做：</p>
<p align="left"><strong>解决方案 1：</strong></p>
<h3>21.className解决方案</h3>
<div><pre code_snippet_id="254076" snippet_file_name="blog_20140324_20_2390135"  name="code" class="javascript">.class1 { 
 border: ‘ 1px solid red ’
 background-color: ‘ silver ’
 padding: ‘ 2px 3px ’
 margin-left: ‘ 5px ’
 } 
 document.getElementById(“pos_element”).className = ‘class1’ ;
</pre>
<p align="left">用 class 替代 style，可以将原有的所有 Reflow 或 Repaint 的次数都缩减到一个。</p>
<strong>解决方案 2：</strong></div>
<h3><strong>22.CSSText 解决</strong></h3>
<div><pre code_snippet_id="254076" snippet_file_name="blog_20140324_21_9598472"  name="code" class="javascript">var sElement = document.getElementById(“pos_element”); 
 var newStyle = ‘ border: 1px solid red; ’ + ‘ background-color: silver; ’ + 
                                 ‘ padding: 2px 3px; ’ + “margin-left: 5px;”
 sElement.style.cssText += newStyle;<strong>
</strong></pre><br>
<p align="left">一次性设置所有样式，也是减少 Reflow 提高性能的方法。</p>
<p align="left"><br>
</p>
<h3><strong>23.Xpath解决方案</strong></h3>
<p align="left">一个页面上往往包含 1000 多页面元素，在定位具体元素的时候，往往需要一定的时间。如果用 id 或 name 定位可能效率不会太慢，如果用元素的一些其他属性（比如 className 等等）定位，可能效率有不理想了。有的可能只能通过遍历所有元素（getElementsByTagName）然后过滤才能找到相应元素，这就更加低效了，这里我们推荐使用 XPath 查找元素，这是很多浏览器本身支持的功能。</p>
<pre code_snippet_id="254076" snippet_file_name="blog_20140324_22_4298555"  name="code" class="javascript">if(document.evaluate){ 
 var tblHeaders = document.evaluate(“//body/div/table//th”);
 var result = tblHeaders.iterateNext(); 
 while(result) { 
 result.style.border = “1px dotted blue”; 
 result ………………
 result = xpathResult.iterateNext(); 
 } 
 } else{ //getElementsByTagName() ……
 // 处理浏览器不支持 XPath 的情况
………………………………
 } 
</pre>
<p align="left">浏览器 XPath 的搜索引擎会优化搜索效率，大大缩短结果返回时间。</p>
<h3>24.http connection 对象</h3>
<p align="left"></p>
<div>
<p align="left">这是一类特殊的对象，它们有点像数组，但不完全是数组。下述方法的返回&#20540;一般都是 HTMLCollection 对象：</p>
<ul type="disc">
<li>document.images, document.forms</li><li>getElementsByTagName()</li><li>getElementsByClassName()</li></ul>
<p align="left">这些 HTMLCollection 对象并不是一个固定的&#20540;，而是一个动态的结果。它们是一些比较特殊的查询的返回&#20540;，在如下情况下，它们会重新执行之前的查询而得到新的返回&#20540;（查询结果），虽然多数情况下会和前一次或几次的返回&#20540;都一样：</p>
<ul type="disc">
<li>Length 属性</li><li>具体的某个成员</li></ul>
<p align="left">所以，HTMLCollection 对象对这些属性和成员的访问，比起数组来要慢很多。当然也有例外，Opera 和 Safari 对这种情况就处理的很好，不会有太大性能问题。</p>
<p align="left">参考如下代码：</p>
<br>
</div>
<div><pre code_snippet_id="254076" snippet_file_name="blog_20140324_23_6839046"  name="code" class="javascript">var items = [“test1”, “test2”, “test3”, ……………… ];
 for(var i = 0; i &lt; items.length; i++){ 
………………………………
 } 

 var items = document.getElementsByTagName(“div”);
 for(var i = 0; i &lt; items.length; i++){ 
…………………………………… . 
 } 
</pre><br>
<p align="left">上述两端代码，下面的效率比起上面一段要慢很多，因为每一个循环都会有“items.length”的触发，也就会导致“document.getElementsByTagName(..)”方法的再次调用，这便是效率便会大幅度下降的原因。我们可以这样解决：</p>
<h3>25.http connection 对象解决方案</h3>
</div>
<div><pre code_snippet_id="254076" snippet_file_name="blog_20140324_24_1539129"  name="code" class="javascript"> var items = document.getElementsByTagName(“div”); 
 var len = items.length
 for(var i = 0; i &lt; len; i++){ 
…………………………………… . 
 } 
</pre>
<p align="left">这样一来，效率基本与普通数组一样。</p>
<h3>26.动态创建Script 标签</h3>
</div>
<div>加载并执行一段 JavaScript 脚本是需要一定时间的，在我们的程序中，有时候有些 JavaScript 脚本被加载后基本没有被使用过 （比如：脚本里的函数从来没有被调用等等）。加载这些脚本只会占用 CPU 时间和增加内存消耗，降低 Web 应用的性能。所以推荐动态的加载 JavaScript 脚本文件，尤其是那些内容较多，消耗资源较大的脚本文件<br>
</div>
<div><pre code_snippet_id="254076" snippet_file_name="blog_20140324_25_142907"  name="code" class="javascript">if(needXHR){ 
 document.write(“&lt;script type= ’ test\/JavaScript ’ src= 'dojo_xhr.js' &gt;”); 
 } 
 if(dojo.isIE){ 
 document.write(“&lt;script type= ’ test\/JavaScript ’ src= 'vml.js' &gt;”); 
 } 
</pre><br>
<br>
<br>
</div>
<p></p>
<p align="left"><br>
</p>
<br>
<br>
<br>
<br>
<br>
</div>
<br>
<br>
<br>
<p style="font-family:arial,nsimsun,sans-serif; margin-top:0px; margin-bottom:0px; padding:0.3em 5px 0.7em">
<br>
<br>
</p>

            <div>
                作者：Killer_ZR 发表于2014/3/24 19:28:41 <a href="http://blog.csdn.net/killer_zr/article/details/21977163">原文链接</a>
            </div>
            <div>
            阅读：142 评论：0 <a href="http://blog.csdn.net/killer_zr/article/details/21977163#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]javascript【继承实现方式 】]]></title>
        <link>http://blog.csdn.net/killer_zr/article/details/21538217</link>
        <guid>http://blog.csdn.net/killer_zr/article/details/21538217</guid>
        <author>Killer_ZR</author>
        <pubDate>2014/3/19 16:25:18</pubDate>
        <description><![CDATA[
            
<h2>一.call() 和 apply()用法</h2>
<p>这两个方法，之前确实没有使用过，看起来貌&#20284;以后会为我省点代码，直接做个demo 吧。</p>
<p>1.&nbsp;</p>
<p></p>
<pre code_snippet_id="244955" snippet_file_name="blog_20140319_1_8538390"  code_snippet_id="244955" snippet_file_name="blog_20140319_1_8538390" name="code" class="javascript"> function Animail(){
      this.name=&quot;动物&quot;;
	  this.showName = function(){
		  alert(this.name);
	  };
    }
    function Cat(){
	   this.name = &quot;猫咪&quot;;
	}
	var animail = new Animail();
	var cat = new Cat();
    animail.showName.call(cat);</pre>打印效果：
<p></p>
<p><br>
<img src="http://img.blog.csdn.net/20140319161202890?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvS2lsbGVyX1pS/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br>
</p>
<p>2. &nbsp;具体applay 和 call 作用一样，只是语法不一样</p>
<pre code_snippet_id="244955" snippet_file_name="blog_20140319_2_1111902"  code_snippet_id="244955" snippet_file_name="blog_20140319_2_1111902" name="code" class="javascript">      function myFunction(a,b,c){
		this.a = a;
		this.b = b;
		this.c = c;

	}
    var obj = new Object();
    alert(obj.a); // undefined
    myFunction.apply(obj,[2,5,8]);
   //myFunction.call(obj,2,5,8);
    alert(obj.a);//2</pre>
<h2>二. prototype&nbsp;</h2>
<div><pre code_snippet_id="244955" snippet_file_name="blog_20140319_3_7809138"  name="code" class="javascript">function Animail(){}

    Animail.prototype.name = &quot;动物&quot;;
	Animail.prototype.age = 2;
	Animail.prototype.type = &quot;001&quot;;
	function Cat(){
		this.name = &quot;猫咪&quot;;
		this.age = 3;
	}

    Cat.prototype = Animail.prototype;

	var animail = new Animail();
	var cat = new Cat();
     
	 
	 alert(cat.name); // cat 自己的name:猫咪
	 alert(cat.age); //cat 自己的age:3
	 alert(cat.type); //Animail的type:2</pre><br>
<br>
</div>
<p></p>

            <div>
                作者：Killer_ZR 发表于2014/3/19 16:25:18 <a href="http://blog.csdn.net/killer_zr/article/details/21538217">原文链接</a>
            </div>
            <div>
            阅读：79 评论：0 <a href="http://blog.csdn.net/killer_zr/article/details/21538217#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[转]web 开发【js在IE和FF下的兼容性问题】]]></title>
        <link>http://blog.csdn.net/killer_zr/article/details/21382855</link>
        <guid>http://blog.csdn.net/killer_zr/article/details/21382855</guid>
        <author>Killer_ZR</author>
        <pubDate>2014/3/17 13:29:15</pubDate>
        <description><![CDATA[
            
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px">
本文出自前端档案，以作学习参考之用。自己也补充了一些内容</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px">
长久以来JavaScript兼容性一直是Web开发者的一个主要问题。在正式规范、事实标准以及各种实现之间的存在的差异让许多开发者日夜煎熬。为此，主要从以下几方面差异总结IE和Firefox的Javascript兼容性:</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px">
　　一、<a target="_blank" target="_blank" href="http://www.cnblogs.com/ilexcai/archive/2011/08/20/2147173.html#t1" style="margin:0px; padding:0px; text-decoration:none; color:rgb(0,0,0); border-bottom-width:1px; border-bottom-style:dotted; border-bottom-color:rgb(51,51,51)">函数和方法差异</a>；</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px">
　　二、<a target="_blank" target="_blank" href="http://www.cnblogs.com/ilexcai/archive/2011/08/20/2147173.html#t2" style="margin:0px; padding:0px; text-decoration:none; color:rgb(0,0,0); border-bottom-width:1px; border-bottom-style:dotted; border-bottom-color:rgb(51,51,51)">样式访问和设置</a>；</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px">
　　三、<a target="_blank" target="_blank" href="http://www.cnblogs.com/ilexcai/archive/2011/08/20/2147173.html#t3" style="margin:0px; padding:0px; text-decoration:none; color:rgb(0,0,0); border-bottom-width:1px; border-bottom-style:dotted; border-color:rgb(153,153,153)">DOM方法及对象引用</a>；</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px">
　　四、<a target="_blank" target="_blank" href="http://www.cnblogs.com/ilexcai/archive/2011/08/20/2147173.html#t4" style="margin:0px; padding:0px; text-decoration:none; color:rgb(0,0,0); border-bottom-width:1px; border-bottom-style:dotted; border-bottom-color:rgb(51,51,51)">事件处理</a>；</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px">
　　五、<a target="_blank" target="_blank" href="http://www.cnblogs.com/ilexcai/archive/2011/08/20/2147173.html#t5" style="margin:0px; padding:0px; text-decoration:none; color:rgb(0,0,0); border-bottom-width:1px; border-bottom-style:dotted; border-bottom-color:rgb(51,51,51)">其他差异的兼容处理</a>。</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px">
</p>
<p style="color:rgb(51,51,51)"><span style="color:rgb(255,102,0)">一、函数和方法差异</span></p>
<p style="color:rgb(51,51,51)"><em>1</em>. getYear()方法</p>
<p style="color:rgb(51,51,51)">【分析说明】先看一下以下代码：</p>
<div style="color:rgb(51,51,51)"><pre code_snippet_id="240195" snippet_file_name="blog_20140317_1_4992601"  code_snippet_id="240195" snippet_file_name="blog_20140317_1_4992601" name="code" class="javascript">var year= new Date().getYear();
document.write(year);</pre>　　在IE中得到的日期是&quot;2010&quot;，在Firefox中看到的日期是&quot;110&quot;，主要是因为在 Firefox 里面 getYear 返回的是 &quot;当前年份-1900&quot; 的&#20540;。</div>
<p style="color:rgb(51,51,51)">【兼容处理】</p>
<p style="color:rgb(51,51,51)">　　加上对年份的判断，如:</p>
<p style="color:rgb(51,51,51)"></p>
<pre code_snippet_id="240195" snippet_file_name="blog_20140317_2_2931287"  code_snippet_id="240195" snippet_file_name="blog_20140317_2_2931287" name="code" class="javascript">var year= new Date().getYear();
year = (year&lt;1900?(1900+year):year);
document.write(year);</pre>
<p style="color:rgb(51,51,51)">　也可以通过 getFullYear getUTCFullYear 去调用:</p>
<div style="color:rgb(51,51,51)"><pre code_snippet_id="240195" snippet_file_name="blog_20140317_3_6202909"  code_snippet_id="240195" snippet_file_name="blog_20140317_3_6202909" name="code" class="javascript">var year = new Date().getFullYear();
document.write(year);</pre></div>
<p style="color:rgb(51,51,51)"><em>2</em>. eval()函数</p>
<p style="color:rgb(51,51,51)">【分析说明】在IE中，可以使用eval(&quot;idName&quot;)或getElementById(&quot;idName&quot;)来取得id为idName的HTML对象；Firefox下只能使用getElementById(&quot;idName&quot;)来取得id为idName的HTML对象。</p>
<p style="color:rgb(51,51,51)">【兼容处理】统一用getElementById(&quot;idName&quot;)来取得id为idName的HTML对象。</p>
<p style="color:rgb(51,51,51)"><em>3</em>. const声明</p>
<p style="color:rgb(51,51,51)">【分析说明】在 IE 中不能使用 const 关键字。如：</p>
<div style="color:rgb(51,51,51)">
<div><span style="color:rgb(0,0,0)">const constVar&nbsp;</span><span style="color:rgb(0,0,0)">=</span><span style="color:rgb(0,0,0)">&nbsp;</span><span style="color:rgb(0,0,0)">32</span><span style="color:rgb(0,0,0)">;</span></div>
</div>
<p style="color:rgb(51,51,51)">在IE中这是语法错误。</p>
<p style="color:rgb(51,51,51)">【兼容处理】不使用 const ，以 var 代替。</p>
<p style="color:rgb(51,51,51)"><em>4</em>. var</p>
<p style="color:rgb(51,51,51)">【分析说明】请看以下代码：</p>
<div style="color:rgb(51,51,51)"><pre code_snippet_id="240195" snippet_file_name="blog_20140317_4_7314941"  code_snippet_id="240195" snippet_file_name="blog_20140317_4_7314941" name="code" class="javascript">echo=function(str){
document.write(str);
}</pre></div>
<p style="color:rgb(51,51,51)">　　这个函数在IE上运行正常，Firefox下却报错了。</p>
<p style="color:rgb(51,51,51)">【兼容处理】而在echo前加上var就正常了，这个就是我们提到var的目的。</p>
<p style="color:rgb(51,51,51)"><em>5</em>. const 问题</p>
<p style="color:rgb(51,51,51)">【分析说明】在 IE 中不能使用 const 关键字。如&nbsp;const constVar = 32;&nbsp;在IE中这是语法错误。</p>
<p style="color:rgb(51,51,51)">【解决方法】不使用 const ，以 var 代替。</p>
<p style="color:rgb(51,51,51)"><a target="_blank" target="_blank" name="t2" style="color:rgb(0,0,0)"></a><span style="color:rgb(255,102,0)">二、样式访问和设置</span></p>
<p style="color:rgb(51,51,51)"><em>1</em>. CSS的&quot;float&quot;属性</p>
<p style="color:rgb(51,51,51)">【分析说明】Javascript访问一个给定CSS &#20540;的最基本句法是：object.style.property，但部分CSS属性跟Javascript中的保留字命名相同，如&quot;float&quot;，&quot;for&quot;，&quot;class&quot;等，不同浏览器写法不同。</p>
<p style="color:rgb(51,51,51)">在IE中这样写：</p>
<div style="color:rgb(51,51,51)"><pre code_snippet_id="240195" snippet_file_name="blog_20140317_5_935229"  code_snippet_id="240195" snippet_file_name="blog_20140317_5_935229" name="code" class="javascript">document.getElementById(&quot;header&quot;).style.styleFloat = &quot;left&quot;;</pre>在Firefox中这样写：</div>
<div style="color:rgb(51,51,51)"><pre code_snippet_id="240195" snippet_file_name="blog_20140317_6_6158699"  code_snippet_id="240195" snippet_file_name="blog_20140317_6_6158699" name="code" class="javascript">document.getElementById(&quot;header&quot;).style.cssFloat = &quot;left&quot;;</pre></div>
<p style="color:rgb(51,51,51)">【兼容处理】在写之前加一个判断，判断浏览器是否是IE：</p>
<div>
<div style="color:rgb(51,51,51)"><pre code_snippet_id="240195" snippet_file_name="blog_20140317_7_7794119"  code_snippet_id="240195" snippet_file_name="blog_20140317_7_7794119" name="code" class="javascript">if(document.all){ //
　　document.getElementById(&quot;header&quot;).style.styleFloat = &quot;left&quot;;
}
else{ //非ie 时为undefined
　　document.getElementById(&quot;header&quot;).style.cssFloat = &quot;left&quot;;
}</pre><br>
<br>
</div>
</div>
<p style="color:rgb(51,51,51)"><em>2</em>. 访问&lt;label&gt;标签中的&quot;for&quot;</p>
<p style="color:rgb(51,51,51)">【分析说明】和&quot;float&quot;属性一样，同样需要使用不现的句法区分来访问&lt;label&gt;标签中的&quot;for&quot;。</p>
<p style="color:rgb(51,51,51)">在IE中这样写：</p>
<div style="color:rgb(51,51,51)"><pre code_snippet_id="240195" snippet_file_name="blog_20140317_8_6082252"  code_snippet_id="240195" snippet_file_name="blog_20140317_8_6082252" name="code" class="javascript">var myObject = document.getElementById(&quot;myLabel&quot;);
var myAttribute = myObject.getAttribute(&quot;htmlFor&quot;);</pre><br>
</div>
<p style="color:rgb(51,51,51)">在Firefox中这样写：</p>
<div style="color:rgb(51,51,51)"><pre code_snippet_id="240195" snippet_file_name="blog_20140317_9_7717671"  code_snippet_id="240195" snippet_file_name="blog_20140317_9_7717671" name="code" class="javascript">var myObject = document.getElementById(&quot;myLabel&quot;);
var myAttribute = myObject.getAttribute(&quot;for&quot;);</pre><br>
</div>
<p style="color:rgb(51,51,51)">【兼容处理】解决的方法也是先&nbsp;判断浏览器类型。</p>
<p style="color:rgb(51,51,51)"><em>3</em>. 访问和设置class属性</p>
<p style="color:rgb(51,51,51)">【分析说明】同样由于class是Javascript保留字的原因，这两种浏览器使用不同的 JavaScript 方法来获取这个属性。</p>
<p style="color:rgb(51,51,51)">IE8.0之前的所有IE版本的写法：</p>
<div style="color:rgb(51,51,51)"><pre code_snippet_id="240195" snippet_file_name="blog_20140317_10_6354469"  code_snippet_id="240195" snippet_file_name="blog_20140317_10_6354469" name="code" class="javascript">var myObject = document.getElementById(&quot;header&quot;);
var myAttribute = myObject.getAttribute(&quot;className&quot;);</pre><br>
<br>
</div>
<p style="color:rgb(51,51,51)">适用于IE8.0 以及 firefox的写法：</p>
<div style="color:rgb(51,51,51)"><pre code_snippet_id="240195" snippet_file_name="blog_20140317_11_1926604"  code_snippet_id="240195" snippet_file_name="blog_20140317_11_1926604" name="code" class="javascript">var myObject = document.getElementById(&quot;header&quot;);
var myAttribute = myObject.getAttribute(&quot;class&quot;);</pre><br>
<br>
</div>
<p style="color:rgb(51,51,51)">　　另外，在使用setAttribute()设置Class属性的时候，两种浏览器也存在同样的差异。</p>
<p style="color:rgb(51,51,51)">　　setAttribute(&quot;className&quot;,value);</p>
<p style="color:rgb(51,51,51)">　　这种写法适用于IE8.0之前的所有IE版本，注意：IE8.0也不支持&quot;className&quot;属性了。</p>
<p style="color:rgb(51,51,51)">　　setAttribute(&quot;class&quot;,value);适用于IE8.0 以及 firefox。</p>
<p style="color:rgb(51,51,51)">【兼容处理】</p>
<p style="color:rgb(51,51,51)">方法一，两种都写上：</p>
<div style="color:rgb(51,51,51)"><pre code_snippet_id="240195" snippet_file_name="blog_20140317_12_1086789"  code_snippet_id="240195" snippet_file_name="blog_20140317_12_1086789" name="code" class="javascript">var myObject = document.getElementById(&quot;header&quot;);
myObject.setAttribute(&quot;class&quot;,&quot;classValue&quot;);
myObject.setAttribute(&quot;className&quot;,&quot;classValue&quot;);
 //设置header的class为classValue</pre><br>
<br>
</div>
<p style="color:rgb(51,51,51)">方法二，IE和FF都支持object.className，所以可以这样写：</p>
<div style="color:rgb(51,51,51)"><pre code_snippet_id="240195" snippet_file_name="blog_20140317_13_7182310"  code_snippet_id="240195" snippet_file_name="blog_20140317_13_7182310" name="code" class="javascript">var myObject = document.getElementById(&quot;header&quot;);
myObject.className=&quot;classValue&quot;;//设置header的class为classValue</pre><br>
<br>
</div>
<p style="color:rgb(51,51,51)">方法三，先判断浏览器类型，再根据浏览器类型采用对应的写法。</p>
<p style="color:rgb(51,51,51)"><em>4</em>. 对象宽高赋&#20540;问题</p>
<p style="color:rgb(51,51,51)">【分析说明】FireFox中类&#20284; obj.style.height = imgObj.height 的语句无效。</p>
<p style="color:rgb(51,51,51)">【兼容处理】统一使用 obj.style.height = imgObj.height &#43; ‘px’;</p>
<p style="color:rgb(51,51,51)"><em>5</em>.添加样式</p>
<p style="color:rgb(51,51,51)">【分析说明】IE中使用addRules()方法添加样式，如：styleSheet.addRule(&quot;p&quot;,&quot;color:#ccc&quot;,styleSheet.length).而该方法不兼容FF，在FF使用insetRule()方法替换。如styleSheet.insertRule(&quot;p{color:#ccc}&quot;,styleSheet.length).</p>
<p style="color:rgb(51,51,51)">【兼容处理】</p>
<p style="color:rgb(51,51,51)"></p>
<pre code_snippet_id="240195" snippet_file_name="blog_20140317_14_4914036"  code_snippet_id="240195" snippet_file_name="blog_20140317_14_4914036" name="code" class="javascript">            if(styleSheet.insertRule){
　　　　　　　　//insertRule()方法
　　　　　　}else{
　　　　　　　　//addRule()方法
　　　　　　}</pre><br>
<br>
<p></p>
<p style="color:rgb(51,51,51)"><em>6</em>.最终样式</p>
<p style="color:rgb(51,51,51)">【分析说明】有时候我们自定义的样式会失效，是因为发生了样式的重叠，如一个类选择符定义的样式和一个标签选择符定义的样式，此时后者失效。则此时需要用到最终样式了。IE中最终样式的写法是ele.currentStyle.属性名。DOM中标准写法是利用document.defaultView对象，如document.defaultView.getComputedStyle(elel,null),该方法兼容FF.</p>
<p style="color:rgb(51,51,51)">【兼容处理】先判断浏览器(document.all)，再执行上面的方法.</p>
<p style="color:rgb(51,51,51)"><a target="_blank" target="_blank" name="t3" style="color:rgb(0,0,0)"></a><span style="color:rgb(255,102,0)">三、DOM方法及对象引用</span></p>
<p style="color:rgb(51,51,51)"><em>1</em>. getElementById</p>
<p style="color:rgb(51,51,51)">【分析说明】先来看一组代码：</p>
<div style="color:rgb(51,51,51)">
<div id="cnblogs_code_open_6a3c4926-36d1-4e4a-afa3-1b7a9d3d3f84"><span style="color:rgb(0,128,0)">&lt;!--</span><span style="color:rgb(0,128,0)">&nbsp;input对象访问1&nbsp;</span><span style="color:rgb(0,128,0)">--&gt;</span><span style="color:rgb(0,0,0)"><br>
</span><pre code_snippet_id="240195" snippet_file_name="blog_20140317_15_4597608"  code_snippet_id="240195" snippet_file_name="blog_20140317_15_4597608" name="code" class="javascript">&lt;input id=&quot;id&quot; type=&quot;button&quot; 
value=&quot;click me&quot; ōnclick=&quot;alert(id.value)&quot;/&gt;</pre><br>
　在Firefox中，按钮没反应，在IE中，就可以，因为对于IE来说，一个HTML 元素的 ID 可以直接在脚本中当作变量名来使用，而Firefox中不可以。</div>
</div>
<p style="color:rgb(51,51,51)">【兼容处理】尽量采用W3C&nbsp;DOM&nbsp;的写法，访问对象的时候，用document.getElementById(&quot;id&quot;)&nbsp;以ID来访问对象，且一个ID在页面中必须是唯一的，同样在以标签名来访问对象的时候，用document.getElementsByTagName(&quot;div&quot;)[0] 。该方式得到较多浏览器的支持。</p>
<div style="color:rgb(51,51,51)"><span style="color:rgb(0,128,0)">&lt;!--</span><span style="color:rgb(0,128,0)">&nbsp;input对象访问2&nbsp;</span><span style="color:rgb(0,128,0)">--&gt;</span><span style="color:rgb(0,0,0)"><br>
</span><pre code_snippet_id="240195" snippet_file_name="blog_20140317_16_6581693"  code_snippet_id="240195" snippet_file_name="blog_20140317_16_6581693" name="code" class="javascript">&lt;input id=&quot;id&quot; type=&quot;button&quot; value=&quot;click me&quot;
  onclick=&quot;alert(document.getElementById('id').value)&quot; /&gt;</pre></div>
<p style="color:rgb(51,51,51)"><em>2</em>. 集合类对象访问</p>
<p style="color:rgb(51,51,51)">【分析说明】IE下，可以使用()或[]获取集合类对象；Firefox下，只能使用[]获取集合类对象。如：</p>
<div style="color:rgb(51,51,51)">
<div><span style="color:rgb(0,0,0)">document.write(document.forms(</span><span style="color:rgb(0,0,0)">&quot;</span><span style="color:rgb(0,0,0)">formName</span><span style="color:rgb(0,0,0)">&quot;</span><span style="color:rgb(0,0,0)">).src);</span></div>
<div><span style="color:rgb(0,0,0)"><span style="color:rgb(0,128,0)">//该写法在IE下能访问到Form对象的scrc属性</span></span></div>
</div>
<p style="color:rgb(51,51,51)">&nbsp;【兼容处理】将document.forms(&quot;formName&quot;)改为 document.forms[&quot;formName&quot;]。统一使用[]获取集合类对象。</p>
<p style="color:rgb(51,51,51)"><em>3</em>. frame的引用</p>
<p style="color:rgb(51,51,51)">【分析说明】IE可以通过id或者name访问这个frame对应的window对象，而Firefox只可以通过name来访问这个frame对应的window对象。</p>
<p style="color:rgb(51,51,51)">　　例如如果上述frame标签写在最上层的window里面的htm里面，那么可以这样访问：</p>
<p style="color:rgb(51,51,51)">IE： window.top.frameId或者window.top.frameName来访问这个window对象；</p>
<p style="color:rgb(51,51,51)">Firefox：只能这样window.top.frameName来访问这个window对象。</p>
<p style="color:rgb(51,51,51)">【兼容处理】使用frame的name来访问frame对象，另外，在IE和Firefox中都可以使用window.document.getElementById(”frameId”)来访问这个frame对象。</p>
<p style="color:rgb(51,51,51)"><em>4</em>. parentElement</p>
<p style="color:rgb(51,51,51)">【分析说明】IE中支持使用parentElement和parentNode获取父节点。而Firefox只可以使用parentNode。&nbsp;</p>
<p style="color:rgb(51,51,51)">【兼容处理】因为firefox与IE都支持DOM，因此统一使用parentNode来访问父节点。</p>
<p style="color:rgb(51,51,51)"><em>5</em>. table操作</p>
<p style="color:rgb(51,51,51)">【分析说明】IE下table中无论是用innerHTML还是appendChild插入&lt;tr&gt;都没有效果，而其他浏览器却显示正常。</p>
<p style="color:rgb(51,51,51)">【兼容处理】解决的方法是，将&lt;tr&gt;加到table的&lt;tbody&gt;元素中，如下面所示：</p>
<div style="color:rgb(51,51,51)">
<div id="cnblogs_code_open_ab407f81-f59d-4c6b-8be6-1b96ffba1840"><pre code_snippet_id="240195" snippet_file_name="blog_20140317_17_9886335"  code_snippet_id="240195" snippet_file_name="blog_20140317_17_9886335" name="code" class="javascript">var row = document.createElement(&quot;tr&quot;);
var cell = document.createElement(&quot;td&quot;);
var cell_text = document.createTextNode(&quot;插入的内容&quot;);
cell.appendChild(cell_text);
row.appendChild(cell);
document.getElementsByTagName(&quot;tbody&quot;)[0].appendChild(row);</pre><br>
<em>6</em>. 移除节点removeNode()和removeChild()</div>
</div>
<p style="color:rgb(51,51,51)">【分析说明】appendNode在IE和Firefox下都能正常使用，但是removeNode只能在IE下用。</p>
<p style="color:rgb(51,51,51)">　　removeNode方法的功能是删除一个节点，语法为node.removeNode（false）或者node.removeNode（true），返回&#20540;是被删除的节点。</p>
<p style="color:rgb(51,51,51)">　　removeNode（false）表示仅仅删除指定节点，然后这个节点的原孩子节点提升为原双亲节点的孩子节点。</p>
<p style="color:rgb(51,51,51)">　　removeNode（true）表示删除指定节点及其所有下属节点。被删除的节点成为了孤立节点，不再具有有孩子节点和双亲节点。</p>
<p style="color:rgb(51,51,51)">【兼容处理】Firefox中节点没有removeNode方法，只能用removeChild方法代替，先回到父节点，在从父节点上移除要移除的节点。</p>
<div style="color:rgb(51,51,51)">
<div><span style="color:rgb(0,0,0)">node.parentNode.removeChild(node);&nbsp;</span></div>
<div><span style="color:rgb(0,0,0)">&nbsp;</span><span style="color:rgb(0,128,0)">//</span><span style="color:rgb(0,128,0)">&nbsp;为了在ie和firefox下都能正常使用，取上一层的父结点，然后remove。</span></div>
</div>
<p style="color:rgb(51,51,51)"><em>7</em>. childNodes获取的节点</p>
<p style="color:rgb(51,51,51)">【分析说明】childNodes的下标的含义在IE和Firefox中不同，看一下下面的代码：</p>
<div style="color:rgb(51,51,51)"><pre code_snippet_id="240195" snippet_file_name="blog_20140317_18_1521756"  code_snippet_id="240195" snippet_file_name="blog_20140317_18_1521756" name="code" class="javascript">&lt;ul id=&quot;main&quot;&gt; 
&lt;li&gt;1&lt;/li&gt;
&lt;li&gt;2&lt;/li&gt;
&lt;li&gt;3&lt;/li&gt;
&lt;/ul&gt; 
&lt;input type=button value=&quot;click me!&quot; onclick=
&quot;alert(document.getElementById('main').childNodes.length)&quot;&gt;</pre><br>
分别用IE和Firefox运行，IE的结果是3，而Firefox则是7。Firefox使用DOM规范，&quot;#text&quot;表示文本（实际是无意义的空&#26684;和换行等）在Firefox里也会被解析成一个节点，在IE里只有有实际意义的文本才会解析成&quot;#text&quot;。</div>
<p style="color:rgb(51,51,51)">【兼容处理】</p>
<p style="color:rgb(51,51,51)">方法一，获取子节点时，可以通过node.getElementsByTagName()来回避这个问题。但是 getElementsByTagName对复杂的DOM结构遍历明显不如用childNodes，因为childNodes能更好的处理DOM的层次结构。</p>
<p style="color:rgb(51,51,51)">方法二，在实际运用中，Firefox在遍历子节点时，不妨在for循环里加上：</p>
<div style="color:rgb(51,51,51)">
<div><span style="color:rgb(0,0,255)">if</span><span style="color:rgb(0,0,0)">(childNode.nodeName</span><span style="color:rgb(0,0,0)">==&quot;</span><span style="color:rgb(0,0,0)">#text</span><span style="color:rgb(0,0,0)">&quot;</span><span style="color:rgb(0,0,0)">)&nbsp;</span><span style="color:rgb(0,0,255)">continue</span><span style="color:rgb(0,0,0)">;</span><span style="color:rgb(0,128,0)">//</span><span style="color:rgb(0,128,0)">或者使用nodeType
 == 1。</span></div>
</div>
<p style="color:rgb(51,51,51)">这样可以跳过一些文本节点。</p>
<p style="color:rgb(51,51,51)">延伸阅读</p>
<p style="color:rgb(51,51,51)">　　《<a target="_blank" target="_blank" href="http://space.cnblogs.com/group/topic/3976/" style="color:rgb(0,0,0)">IE和FireFox中的childNodes区别</a>》</p>
<p style="color:rgb(51,51,51)"><em>8</em>. Firefox不能对innerText支持</p>
<p style="color:rgb(51,51,51)">【分析说明】Firefox不支持innerText，它支持textContent来实现innerText，不过textContent没有像innerText一样考虑元素的display方式，所以不完全与IE兼容。如果不用textContent，字符串里面不包含HTML代码也可以用innerHTML代替。也可以用js写个方法实现，可参考《<a target="_blank" target="_blank" href="http://www.cnblogs.com/luoluo/archive/2008/11/24/1340111.html" style="color:rgb(0,0,0)">为firefox实现innerText属性</a>》一文。</p>
<p style="color:rgb(51,51,51)">【兼容处理】通过判断浏览器类型来兼容：</p>
<div style="color:rgb(51,51,51)"><pre code_snippet_id="240195" snippet_file_name="blog_20140317_19_7093890"  code_snippet_id="240195" snippet_file_name="blog_20140317_19_7093890" name="code" class="javascript">if(document.all){
document.getElementById('element').innerText = &quot;my text&quot;;
} else{
document.getElementById('element').textContent = &quot;my text&quot;;
}</pre><br>
<br>
</div>
<p style="color:rgb(51,51,51)"><a target="_blank" target="_blank" name="t4" style="color:rgb(0,0,0)"></a><span style="color:rgb(255,102,0)">四、事件处理</span></p>
<p style="color:rgb(51,51,51)">　　如果在使用javascript的时候涉及到event处理，就需要知道event在不同的浏览器中的差异，主要的JavaScript的事件模型有三种（参考《<a target="_blank" target="_blank" href="http://www.oreillynet.com/pub/a/javascript/synd/2001/09/25/event_models.html" style="color:rgb(0,0,0)">Supporting
 Three Event Models at Once</a>》），它们分别是NN4、IE4&#43;和W3C/Safar。</p>
<p style="color:rgb(51,51,51)"><em>1</em>. window.event</p>
<p style="color:rgb(51,51,51)">【分析说明】先看一段代码</p>
<div style="color:rgb(51,51,51)">
<div><span style="color:rgb(0,0,255)">function</span><span style="color:rgb(0,0,0)">&nbsp;et()<br>
{&nbsp;<br>
alert(event);</span><span style="color:rgb(0,128,0)">//</span><span style="color:rgb(0,128,0)">IE: [object]</span><span style="color:rgb(0,128,0)"><br>
</span><span style="color:rgb(0,0,0)">}</span></div>
</div>
<p style="color:rgb(51,51,51)">　　以上代码在IE运行的结果是[object]，而在Firefox无法运行。</p>
<p style="color:rgb(51,51,51)">　　因为在IE中event作为window对象的一个属性可以直接使用，但是在Firefox中却使用了W3C的模型，它是通过传参的方法来传播事件的，也就是说你需要为你的函数提供一个事件响应的接口。</p>
<p style="color:rgb(51,51,51)">【兼容处理】添加对event判断，根据浏览器的不同来得到正确的event：</p>
<div style="color:rgb(51,51,51)">
<div><span style="color:rgb(0,0,255)">function</span><span style="color:rgb(0,0,0)">&nbsp;et()<br>
{&nbsp;<br>
evt</span><span style="color:rgb(0,0,0)">=</span><span style="color:rgb(0,0,0)">evt</span><span style="color:rgb(0,0,0)">?</span><span style="color:rgb(0,0,0)">evt:(window.event</span><span style="color:rgb(0,0,0)">?</span><span style="color:rgb(0,0,0)">window.event:</span><span style="color:rgb(0,0,255)">null</span><span style="color:rgb(0,0,0)">);&nbsp;</span></div>
<div>&nbsp;　　<span style="color:rgb(0,128,0)">//</span><span style="color:rgb(0,128,0)">兼容IE和Firefox</span><span style="color:rgb(0,128,0)"><br>
</span><span style="color:rgb(0,0,0)">alert(evt);<br>
}</span></div>
</div>
<p style="color:rgb(51,51,51)"><em>2</em>. 键盘&#20540;的取得</p>
<p style="color:rgb(51,51,51)">【分析说明】IE和Firefox获取键盘&#20540;的方法不同，可以理解，Firefox下的event.which与IE下的event.keyCode相当。关于彼此不同，可参考《<a target="_blank" target="_blank" href="http://www.jb51.net/article/7556.htm" style="color:rgb(0,0,0)">键盘事件中keyCode、which和charCode 的兼容性测试</a>》</p>
<p style="color:rgb(51,51,51)">【兼容处理】</p>
<div style="color:rgb(51,51,51)">
<div><a target="_blank" target="_blank" title="复制代码" style="color:rgb(0,0,0)"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></div>
<div id="cnblogs_code_open_fe28838b-428e-43b5-9b9e-56bdc48b5eac">
<div><span style="color:rgb(0,0,255)">function</span><span style="color:rgb(0,0,0)">&nbsp;myKeyPress(evt){</span></div>
<div><span style="color:rgb(0,0,0)"><span style="color:rgb(0,128,0)">//兼容IE和Firefox获得keyBoardEvent对象<br>
</span>evt&nbsp;</span><span style="color:rgb(0,0,0)">=</span><span style="color:rgb(0,0,0)">&nbsp;(evt)&nbsp;</span><span style="color:rgb(0,0,0)">?</span><span style="color:rgb(0,0,0)">&nbsp;evt : ((window.event)&nbsp;</span><span style="color:rgb(0,0,0)">?</span><span style="color:rgb(0,0,0)">&nbsp;window.event
 :&nbsp;</span><span style="color:rgb(0,0,0)">&quot;&quot;</span><span style="color:rgb(0,0,0)">)&nbsp;</span></div>
<div><span style="color:rgb(0,0,0)">&nbsp;</span><span style="color:rgb(0,128,0)">&nbsp;</span><span style="color:rgb(0,128,0)"><span style="color:rgb(0,0,0)"><span face="Verdana"><span style="color:rgb(0,128,0)">//</span><span style="color:rgb(0,128,0)">兼容IE和Firefox获得keyBoardEvent对象的键&#20540;</span></span></span></span><span style="color:rgb(0,128,0)"><br>
</span><span style="color:rgb(0,0,255)">var</span><span style="color:rgb(0,0,0)">&nbsp;key&nbsp;</span><span style="color:rgb(0,0,0)">=</span><span style="color:rgb(0,0,0)">&nbsp;evt.keyCode</span><span style="color:rgb(0,0,0)">?</span><span style="color:rgb(0,0,0)">evt.keyCode:evt.which;&nbsp;</span></div>
<div><span style="color:rgb(0,0,255)">if</span><span style="color:rgb(0,0,0)">(evt.ctrlKey&nbsp;</span><span style="color:rgb(0,0,0)">&amp;&amp;</span><span style="color:rgb(0,0,0)">&nbsp;(key&nbsp;</span><span style="color:rgb(0,0,0)">==</span><span style="color:rgb(0,0,0)">&nbsp;</span><span style="color:rgb(0,0,0)">13</span><span style="color:rgb(0,0,0)">&nbsp;</span><span style="color:rgb(0,0,0)">||</span><span style="color:rgb(0,0,0)">&nbsp;key&nbsp;</span><span style="color:rgb(0,0,0)">==</span><span style="color:rgb(0,0,0)">&nbsp;</span><span style="color:rgb(0,0,0)">10</span><span style="color:rgb(0,0,0)">)){&nbsp;</span></div>
<div><span style="color:rgb(0,0,0)">&nbsp;</span><span style="color:rgb(0,128,0)">　　　　　　//</span><span style="color:rgb(0,128,0)">同时按下了Ctrl和回车键</span><span style="color:rgb(0,128,0)"><br>
</span><span style="color:rgb(0,128,0)">//</span><span style="color:rgb(0,128,0)">do something;</span><span style="color:rgb(0,128,0)"><br>
</span><span style="color:rgb(0,0,0)">}<br>
}</span></div>
</div>
<div><a target="_blank" target="_blank" title="复制代码" style="color:rgb(0,0,0)"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></div>
</div>
<p style="color:rgb(51,51,51)"><em>3</em>. 事件源的获取</p>
<p style="color:rgb(51,51,51)">【分析说明】在使用事件委托的时候，通过事件源获取来判断事件到底来自哪个元素，但是，在IE下，event对象有srcElement属性，但是没有target属性；Firefox下，even对象有target属性，但是没有srcElement属性。&nbsp;</p>
<p style="color:rgb(51,51,51)">【兼容处理】</p>
<div style="color:rgb(51,51,51)">
<div><span style="color:rgb(0,0,0)">ele</span><span style="color:rgb(0,0,0)">=</span><span style="color:rgb(0,0,255)">function</span><span style="color:rgb(0,0,0)">(evt){&nbsp;</span><span style="color:rgb(0,128,0)">//</span><span style="color:rgb(0,128,0)">捕获当前事件作用的对象</span><span style="color:rgb(0,128,0)"><br>
</span><span style="color:rgb(0,0,0)">evt</span><span style="color:rgb(0,0,0)">=</span><span style="color:rgb(0,0,0)">evt</span><span style="color:rgb(0,0,0)">||</span><span style="color:rgb(0,0,0)">window.event;<br>
</span><span style="color:rgb(0,0,255)">　　return</span></div>
<div><span style="color:rgb(0,0,255)">&nbsp;</span><span style="color:rgb(0,0,0)">　　(obj=event.srcElement?event.srcElement:event.target;</span><span style="color:rgb(0,0,0)">);<br>
}<br>
</span></div>
</div>
<p style="color:rgb(51,51,51)"><em>4</em>. 事件监听</p>
<p style="color:rgb(51,51,51)">【分析说明】在事件监听处理方面，IE提供了attachEvent和detachEvent两个接口，而Firefox提供的是addEventListener和removeEventListener。</p>
<p style="color:rgb(51,51,51)">【兼容处理】最简单的兼容性处理就是封装这两套接口：</p>
<div style="color:rgb(51,51,51)"><pre code_snippet_id="240195" snippet_file_name="blog_20140317_20_4302227"  code_snippet_id="240195" snippet_file_name="blog_20140317_20_4302227" name="code" class="javascript">function addEvent(elem, eventName, handler) {
　　if (elem.attachEvent) {
　　　　elem.attachEvent(&quot;on&quot; + eventName, function(){
　　　　　　　　　　　　　　　　　　　　handler.call(elem)});
 　　　　//此处使用回调函数call()，让this指向elem
　　} else if (elem.addEventListener) {
　　　　elem.addEventListener(eventName, handler, false);
　　}
}
function removeEvent(elem, eventName, handler) {
　　if (elem.detachEvent) {
　　　　elem.detachEvent(&quot;on&quot; + eventName, function(){
　　　　　　　　　　　　　　　　　　　　handler.call(elem)});
 　　　　//此处使用回调函数call()，让this指向elem
　　} else if (elem.removeEventListener) {
　　　　elem.removeEventListener(eventName, handler, false);
　　}
}</pre><br>
<br>
</div>
<p style="color:rgb(51,51,51)">　　需要特别注意，Firefox下，事件处理函数中的this指向被监听元素本身，而在IE下则不然,可使用回调函数call，让当前上下文指向监听的元素。</p>
<p style="color:rgb(51,51,51)"><em>5</em>. 鼠标位置</p>
<p style="color:rgb(51,51,51)">【分析说明】IE下，even对象有x，y属性，但是没有pageX，pageY属性；Firefox下，even对象有pageX，pageY属性，但是没有x，y属性。&nbsp;</p>
<p style="color:rgb(51,51,51)">【兼容处理】使用mX(mX = event.x ? event.x : event.pageX;)来代替IE下的event.x或者Firefox下的event.pageX。复杂点还要考虑绝对位置。</p>
<div style="color:rgb(51,51,51)"><pre code_snippet_id="240195" snippet_file_name="blog_20140317_21_954158"  code_snippet_id="240195" snippet_file_name="blog_20140317_21_954158" name="code" class="javascript">function getAbsPoint(e){
var x = e.offsetLeft, y = e.offsetTop;
while (e = e.offsetParent) {
x += e.offsetLeft;
y += e.offsetTop;
}
alert(&quot;x:&quot; + x + &quot;,&quot; + &quot;y:&quot; + y);
}</pre><br>
<br>
</div>
<p style="color:rgb(51,51,51)"><a target="_blank" target="_blank" name="t5" style="color:rgb(0,0,0)"></a><span style="color:rgb(255,102,0)">五、其他差异的兼容处理</span></p>
<p style="color:rgb(51,51,51)"><em>1</em>. XMLHttpRequest</p>
<p style="color:rgb(51,51,51)">【分析说明】new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);只在IE中起作用，Firefox不支持，但支持XMLHttpRequest。</p>
<p style="color:rgb(51,51,51)">【兼容处理】</p>
<div style="color:rgb(51,51,51)"><pre code_snippet_id="240195" snippet_file_name="blog_20140317_22_6177627"  code_snippet_id="240195" snippet_file_name="blog_20140317_22_6177627" name="code" class="javascript">function createXHR() {
var xhr=null; 
if(window.XMLHttpRequest){
xhr=new ActiveXObject(&quot;Msxml2.XMLHTTP&quot;); 
}else{ 
try { 
xhr=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); 
} 
catch() { 
xhr=null; 
} 
}
if(!xhr)return;
return xhr;
}</pre><br>
<br>
</div>
<p style="color:rgb(51,51,51)"><em>2</em>. 模态和非模态窗口</p>
<p style="color:rgb(51,51,51)">【分析说明】IE中可以通过showModalDialog和showModelessDialog打开模态和非模态窗口，但是Firefox不支持。&nbsp;</p>
<p style="color:rgb(51,51,51)">【解决办法】直接使用window.open(pageURL,name,parameters)方式打开新窗口。&nbsp;如果需要传递参数，可以使用frame或者iframe。</p>
<p style="color:rgb(51,51,51)"><em>3.&nbsp;</em>input.type属性问题</p>
<p style="color:rgb(51,51,51)">IE下 input.type属性为只读，但是Firefox下可以修改</p>
<p style="color:rgb(51,51,51)"><em>4</em>. 对select元素的option操作</p>
<p style="color:rgb(51,51,51)">设置options，IE和Firefox写法不同：</p>
<p style="color:rgb(51,51,51)">Firefox:可直接设置</p>
<div style="color:rgb(51,51,51)">
<div><span style="color:rgb(0,0,0)">option.text&nbsp;</span><span style="color:rgb(0,0,0)">=</span><span style="color:rgb(0,0,0)">&nbsp;</span><span style="color:rgb(0,0,0)">'</span><span style="color:rgb(0,0,0)">foooooooo</span><span style="color:rgb(0,0,0)">'</span><span style="color:rgb(0,0,0)">;</span></div>
</div>
<p style="color:rgb(51,51,51)">IE:只能设置</p>
<div style="color:rgb(51,51,51)">
<div><span style="color:rgb(0,0,0)">option.innerHTML&nbsp;</span><span style="color:rgb(0,0,0)">=</span><span style="color:rgb(0,0,0)">&nbsp;</span><span style="color:rgb(0,0,0)">'</span><span style="color:rgb(0,0,0)">fooooooo</span><span style="color:rgb(0,0,0)">'</span><span style="color:rgb(0,0,0)">;</span></div>
</div>
<p style="color:rgb(51,51,51)">删除一个select的option的方法：</p>
<p style="color:rgb(51,51,51)">Firefox:可以</p>
<div style="color:rgb(51,51,51)">
<div><span style="color:rgb(0,0,0)">select.options.remove(selectedIndex);</span></div>
</div>
<p style="color:rgb(51,51,51)">IE7:可以用</p>
<div style="color:rgb(51,51,51)">
<div><span style="color:rgb(0,0,0)">select.options[i]&nbsp;</span><span style="color:rgb(0,0,0)">=</span><span style="color:rgb(0,0,0)">&nbsp;</span><span style="color:rgb(0,0,255)">null</span><span style="color:rgb(0,0,0)">;</span></div>
</div>
<p style="color:rgb(51,51,51)">IE6:需要写</p>
<div style="color:rgb(51,51,51)">
<div><span style="color:rgb(0,0,0)">select.options[i].outerHTML&nbsp;</span><span style="color:rgb(0,0,0)">=</span><span style="color:rgb(0,0,0)">&nbsp;</span><span style="color:rgb(0,0,255)">null</span><span style="color:rgb(0,0,0)">;</span></div>
</div>
<p style="color:rgb(51,51,51)"><em>5</em>. img对象alt和title的解析</p>
<p style="color:rgb(51,51,51)">【分析说明】img对象有alt和title两个属性，区别在于，alt：当照片不存在或者load错误时的提示。</p>
<p style="color:rgb(51,51,51)">title：照片的tip说明,&nbsp;在IE中如果没有定义title，alt也可以作为img的tip使用，但是在Firefox中，两者完全按照标准中的定义使用&nbsp;</p>
<p style="color:rgb(51,51,51)">在定义img对象时。</p>
<p style="color:rgb(51,51,51)">【兼容处理】最好将alt和title对象都写全，保证在各种浏览器中都能正常使用 。</p>
<p style="color:rgb(51,51,51)"><em>6</em>. img的src刷新问题</p>
<p style="color:rgb(51,51,51)">【分析说明】先看一下代码：</p>
<div style="color:rgb(51,51,51)">
<div><span style="color:rgb(0,0,255)">&lt;</span><span style="color:rgb(128,0,0)">img&nbsp;</span><span style="color:rgb(255,0,0)">id</span><span style="color:rgb(0,0,255)">=&quot;pic&quot;</span><span style="color:rgb(255,0,0)">&nbsp;onclick</span><span style="color:rgb(0,0,255)">=
 &quot;this.src= 'a.jpg'&quot;</span></div>
<div><span style="color:rgb(0,0,255)">&nbsp;</span><span style="color:rgb(255,0,0)">&nbsp;src</span><span style="color:rgb(0,0,255)">=&quot;aa.jpg<span style="color:rgb(0,0,0)"><span face="Verdana"><span style="color:rgb(0,0,255)">&quot;</span><span style="color:rgb(255,0,0)">&nbsp;style</span><span style="color:rgb(0,0,255)">=&quot;cursor:
 pointer&quot;</span><span style="color:rgb(0,0,255)">/&gt;</span></span></span></span></div>
</div>
<p style="color:rgb(51,51,51)">在IE 下，这段代码可以用来刷新图片，但在FireFox下不行。主要是缓存问题。</p>
<p style="color:rgb(51,51,51)">【兼容处理】在地址后面加个随机数就解决了:&nbsp;</p>
<div style="color:rgb(51,51,51)"><pre code_snippet_id="240195" snippet_file_name="blog_20140317_23_5653457"  code_snippet_id="240195" snippet_file_name="blog_20140317_23_5653457" name="code" class="javascript">&lt;img id=&quot;pic&quot; onclick= &quot;javascript:this.src=this.src+'?'
　　　　　+Math.random()&quot;src=&quot;a.jpg&quot; style=&quot;cursor: pointer&quot;/&gt;</pre><br>
<br>
</div>
<p style="color:rgb(51,51,51)"><span style="color:rgb(255,102,0)">总结</span></p>
<p style="color:rgb(51,51,51)">　　IE和Firefox的Javascript方面存在着不少的差异，要做到兼容，我觉得很有必要把一些常见的整理成一个js库，如DOM的操作，事件的处理，XMLHttpRequest请求等，或者也可以选择使用现有的一些库(如jQuery，YUI，ExtJs等)，不过我觉得还是有必要了解一下这些差异，这样对于我们参加兼容性和可用性代码很有帮助。</p>
<p style="color:rgb(51,51,51)">　　办法总比问题多，无论浏览器兼容如何折腾人，做前端开发的总能迎刃而解的！</p>
本文来自：<a target="_blank" target="_blank" href="http://www.cnblogs.com/ilexcai/archive/2011/08/20/2147173.html">http://www.cnblogs.com/ilexcai/archive/2011/08/20/2147173.html</a>

            <div>
                作者：Killer_ZR 发表于2014/3/17 13:29:15 <a href="http://blog.csdn.net/killer_zr/article/details/21382855">原文链接</a>
            </div>
            <div>
            阅读：420 评论：0 <a href="http://blog.csdn.net/killer_zr/article/details/21382855#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]nodeJS 学习一【Hello World 篇】]]></title>
        <link>http://blog.csdn.net/killer_zr/article/details/20541575</link>
        <guid>http://blog.csdn.net/killer_zr/article/details/20541575</guid>
        <author>Killer_ZR</author>
        <pubDate>2014/3/5 14:28:52</pubDate>
        <description><![CDATA[
            
<p><span style="font-family:Arial; font-size:12px">经常听说node.js，却没有在实际中用过，昨天和一个移动app同事聊了会，【其实手机开发我一点都不会】，从他那里知道移动开发需要的技术，</span></p>
<p><span style="font-family:Arial; font-size:12px">html5,css3,jqueryMobile,nodejs....很多，当然都是我的盲区吧，有空的时候，我想我会逐步去了解学习，当然不代表我会去参与移动开发工作。</span></p>
<p><span style="font-family:Arial; font-size:12px">网上的node资料其实是蛮多的，做一个helloworld &nbsp;demo,相信大部分人的步骤都差不多，即使很多人已经写了，但是此刻还是期望记录一下我的小小鸡冻。</span></p>
<h5><span style="font-family:Arial; font-size:12px">1.官网：<a target="_blank" target="_blank" href="http://nodejs.org/">http://nodejs.org/</a>&nbsp;</span></h5>
<p><span style="font-family:Arial; font-size:12px">&nbsp; &nbsp;下载系统安装程序，我下载了node-v0.10.26-x64.msi【学习中所以windows 7系统】</span></p>
<h5><span style="font-family:Arial; font-size:12px">2.安装</span></h5>
<p><span style="font-family:Arial; font-size:12px">&nbsp; &nbsp;直接点击运行安装，win7默认安装在C:\Program Files\nodejs 目录下</span></p>
<p></p>
<h5><span style="margin:0px; padding:0px"><span style="font-family:Arial; font-size:12px">3.安装相关环境</span></span></h5>
<p></p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:28px">
<span style="font-family:Arial; font-size:12px">打开C:\Program Files\nodejs目录你会发现里面自带了npm,直接用npm安装相环境既可</span></p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:28px">
<span style="font-family:Arial; font-size:12px">&nbsp;进入node.js command prompt 命令窗口</span></p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:28px">
<span style="font-family:Arial; font-size:12px">进入nodejs 安装目录 C:\Program Files\nodejs</span></p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:28px">
<span style="font-family:Arial; font-size:12px">键入命令：cd C:\Program Files\nodejs 既可</span></p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:28px">
<span style="margin:0px; padding:0px"><span style="font-family:Arial; font-size:12px">现在开始安装相关环境</span></span></p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:28px">
<span style="font-family:Arial; font-size:12px">键入命令：npm express 回车等待安装express........</span></p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:28px">
<span style="font-family:Arial; font-size:12px">键入命令：npm&nbsp;jade 回车等待安装jade........</span></p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:28px">
<span style="font-family:Arial; font-size:12px">键入命令：npm&nbsp;mysql回车等待安装mysql........</span></p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:28px">
<span style="font-family:Arial; font-size:12px">........安装什么组件，取决于环境搭建需求</span></p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:28px">
<span style="font-family:Arial; font-size:12px">默认情况下上述组件都是安装在C:\Program Files\nodejs\node_modules文件夹下 这也是nodejs相关组件的自动查找路径</span></p>
<h5><span style="margin:0px; padding:0px"><span style="font-family:Arial; font-size:12px">4.创建一个工程</span></span></h5>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:28px">
<span style="font-family:Arial; font-size:12px">&nbsp;现在已经有express</span></p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:28px">
<span style="font-family:Arial; font-size:12px">express命令安装在全局才起作用!</span></p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:28px">
<span style="font-family:Arial; font-size:12px">所以express安装的时候要用 npm install express -g</span></p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:28px">
<span style="font-family:Arial; font-size:12px">或者直接修改全局路径:</span></p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:28px">
<span style="font-family:Arial; font-size:12px">npm config set prefix &quot;C:\Program Files\nodejs&quot;</span></p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:28px">
<span style="font-family:Arial; font-size:12px">npm config set cache &quot;C:\Program Files\nodejs\cache&quot; (先建好cache目录)</span></p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:28px">
<span style="font-family:Arial; font-size:12px">键入:express myapp (myapp是随意起的工程名称)</span></p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:28px">
<span style="font-family:Arial; font-size:12px">你会发现多了一个 C:\Program Files\nodejs\myapp 目录</span></p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; line-height:28px">
<span style="font-family:Arial; font-size:12px">默认情况下：里会自动创建&nbsp;</span></p>
<span style="font-family:Arial; font-size:12px"><img src="http://img.blog.csdn.net/20140305141116875?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvS2lsbGVyX1pS/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br>
</span>
<p><span style="font-family:Arial; font-size:12px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></p>
<p></p>
<h5><span style="font-family:Arial; font-size:12px">5.demo测试</span></h5>
<span style="font-family:Arial; font-size:12px"></span>
<p></p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; font-family:微软雅黑,Verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:28px">
复制node_modules到myapp下面</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; font-family:微软雅黑,Verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:28px">
环境搭建到此完工，下面做一个demo测试！</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; font-family:微软雅黑,Verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:28px">
在myapp里创建一个hello.js 内容：</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; font-family:微软雅黑,Verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:28px">
</p>
<pre code_snippet_id="218525" snippet_file_name="blog_20140305_1_1070731"  code_snippet_id="218525" snippet_file_name="blog_20140305_1_1070731" name="code" class="javascript">var http = require(&quot;http&quot;);
http.createServer(function(request, response) {  
    response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/plain&quot;});  
    response.write(&quot;Hello World&quot;);  
    response.end();
}).listen(8888);
console.log(&quot;nodejs start listen 8888 port!&quot;);</pre>
<p></p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; font-family:微软雅黑,Verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:28px">
进入node.js command prompt 命令窗口,进入C:\Program Files\nodejs\myapp目录</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; font-family:微软雅黑,Verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:28px">
键入node hello.js<span style="font-family:Arial; font-size:12px; line-height:28px">【</span><span style="font-family:Arial; font-size:12px; line-height:28px"><span style="color:#ff0000">注意：node命令不好使的时候，是不是忘记配置环境变量了呢？记得在path里添加C:\Program Files\nodejs</span></span><span style="font-family:Arial; font-size:12px; line-height:28px">】</span></p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; font-family:微软雅黑,Verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:28px">
<img src="http://img.blog.csdn.net/20140305142549500?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvS2lsbGVyX1pS/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>
</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; font-family:微软雅黑,Verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:28px">
</p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; font-family:微软雅黑,Verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:28px">
打开地址<a target="_blank" target="_blank" href="http://127.0.0.1:8888/" style="margin:0px; padding:0px; color:rgb(0,0,0)">http://127.0.0.1:8888/</a></p>
<p style="margin:10px auto; padding-top:0px; padding-bottom:0px; font-family:微软雅黑,Verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:28px">
发现输出 :</p>
<pre style="margin-top:0px; margin-bottom:0px; padding:0px; white-space:pre-wrap; word-wrap:break-word; font-size:14px; line-height:28px; background-color:rgb(255,255,255)">Hello World</pre>
<img src="http://img.blog.csdn.net/20140305142644484?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvS2lsbGVyX1pS/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>
来源<a target="_blank" target="_blank" href="http://www.cnblogs.com/pigtail/archive/2013/01/08/2850486.html">http://www.cnblogs.com/pigtail/archive/2013/01/08/2850486.html</a><br>
<br>
<p><span style="font-family:Arial; font-size:12px"><br>
</span></p>
<p><br>
</p>

            <div>
                作者：Killer_ZR 发表于2014/3/5 14:28:52 <a href="http://blog.csdn.net/killer_zr/article/details/20541575">原文链接</a>
            </div>
            <div>
            阅读：1811 评论：0 <a href="http://blog.csdn.net/killer_zr/article/details/20541575#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]web 开发jquery插件之jquery-autocomplete【一款联想自动提示的插件】]]></title>
        <link>http://blog.csdn.net/killer_zr/article/details/20364795</link>
        <guid>http://blog.csdn.net/killer_zr/article/details/20364795</guid>
        <author>Killer_ZR</author>
        <pubDate>2014/3/3 11:55:37</pubDate>
        <description><![CDATA[
            
<p>1.插件下载及api 地址</p>
<p><a target="_blank" href="http://www.oschina.net/p/autocomplete/">http://www.oschina.net/p/autocomplete/</a><br>
</p>
<p>2.控制层response.getWriter().write(jsonStr);</p>
<p>3.json &#26684;式为：</p>
<p><span style="color:#666666">联想搜索结果：[{&quot;des&quot;:&quot;嘉实&quot;,&quot;id&quot;:&quot;070030&quot;,&quot;name&quot;:&quot;嘉实中创400联接&quot;},{&quot;des&quot;:&quot;大成&quot;,&quot;id&quot;:&quot;096001&quot;,&quot;name&quot;:&quot;大成标普500等权重指数&quot;},{&quot;des&quot;:&quot;南方&quot;,&quot;id&quot;:&quot;160119&quot;,&quot;name&quot;:&quot;南方500&quot;},{&quot;des&quot;:&quot;诺安&quot;,&quot;id&quot;:&quot;320010&quot;,&quot;name&quot;:&quot;诺安中证100指数&quot;},{&quot;des&quot;:&quot;建信&quot;,&quot;id&quot;:&quot;530018&quot;,&quot;name&quot;:&quot;建信深证100&quot;}]</span><br>
</p>
<p><span style="color:#666666">4.页面ajax请求。</span></p>
<p><span style="color:#666666"><img src="http://img.blog.csdn.net/20140303115447656?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvS2lsbGVyX1pS/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br>
</span></p>
<p><span style="color:#666666"></span><pre code_snippet_id="214554" snippet_file_name="blog_20140303_1_2057371"  name="code" class="javascript"> jQuery(&quot;#w&quot;).autocomplete(&quot;/w.do&quot;, {
            width : 300, // 提示的宽度，溢出隐藏
            max : 10,// 显示数量
            autoFill : false,
            scroll : false, // 当结果集大于默认高度时是否使用卷轴显示
            highlight : false,
            highlightItem: true,
            scroll : true,
            matchContains : true,
            multiple :false,
            formatItem: function(row, i, max) {
                return '&lt;span style=&quot;color:gray;padding-right:10px;&quot;&gt; ' + row.name + '&lt;/span&gt; &lt;span style=&quot;color:#005EA7&quot;&gt;[' + row.id + ']&lt;/span&gt;';
            },
            formatMatch: function(row, i, max) {
                return row.name + row.id;
            },
            formatResult: function(row) {
                return row.id;
            },
            parse:function(data) {//解释返回的数据，把其存在数组里
                var array=eval(data);
                var parsed = [];
                if(array == null)
                {
                    return parsed;
                }
                for (var i = 0; i &lt; array.length; i++) {
                    parsed[i] = {
                        data: array[i],
                        value: array[i].id,
                        result: array[i].name
                    };
                }
                return parsed;
            }
        }).result(function(event, row, formatted) {
                   // alert(row.id);
                    jQuery(this).val(row.id);
                });
    });</pre><br>
<br>
</p>

            <div>
                作者：Killer_ZR 发表于2014/3/3 11:55:37 <a href="http://blog.csdn.net/killer_zr/article/details/20364795">原文链接</a>
            </div>
            <div>
            阅读：1814 评论：0 <a href="http://blog.csdn.net/killer_zr/article/details/20364795#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]web 开发jquery插件之Highcharts【一款统计的报表插件】]]></title>
        <link>http://blog.csdn.net/killer_zr/article/details/20361807</link>
        <guid>http://blog.csdn.net/killer_zr/article/details/20361807</guid>
        <author>Killer_ZR</author>
        <pubDate>2014/3/3 11:37:25</pubDate>
        <description><![CDATA[
            
<h6>1.下载及api 地址</h6>
<p><a target="_blank" href="http://www.highcharts.me/">http://www.highcharts.me/</a><br>
</p>
<h6>2.折线图demo,api 已经存在的demo省略，文档说明省略，只记录略微复杂的demo。</h6>
<p></p>
<h6>3. 控制层传到页面的数据&#26684;式，json.&nbsp;</h6>
&nbsp; &nbsp; &nbsp; Object 转json,最快的使用com.alibaba.fastjson.JSONObject.toJSONString(object);
<p></p>
<p>&nbsp; &nbsp; 如:</p>
<p><span style="color:#cccccc">折线图数据：[{&quot;data&quot;:[1.03,1.05,1.13,1.07,1.14,1.05,1.06,1.01,1.03,1.05,1.09,0.80,0.92,0.94,0.91,0.94,0.98,1.00],&quot;date&quot;:[&quot;2014-02-03&quot;,&quot;2014-02-04&quot;,&quot;2014-02-05&quot;,&quot;2014-02-06&quot;,&quot;2014-02-07&quot;,&quot;2014-02-08&quot;,&quot;2014-02-09&quot;,&quot;2014-02-10&quot;,&quot;2014-02-11&quot;,&quot;2014-02-12&quot;,&quot;2014-02-13&quot;,&quot;2014-02-14&quot;,&quot;2014-02-15&quot;,&quot;2014-02-16&quot;,&quot;2014-02-17&quot;,&quot;2014-02-18&quot;,&quot;2014-02-19&quot;,&quot;2014-02-20&quot;],&quot;name&quot;:&quot;嘉实增长&quot;},{&quot;data&quot;:[1.06,1.04,1.05,1.06,1.08,1.07,1.08,1.04,1.05,1.06,0.80,0.90,1.10,0.90,1.30,1.13,1.00,0.80],&quot;date&quot;:[&quot;2014-02-03&quot;,&quot;2014-02-04&quot;,&quot;2014-02-05&quot;,&quot;2014-02-06&quot;,&quot;2014-02-07&quot;,&quot;2014-02-08&quot;,&quot;2014-02-09&quot;,&quot;2014-02-10&quot;,&quot;2014-02-11&quot;,&quot;2014-02-12&quot;,&quot;2014-02-13&quot;,&quot;2014-02-14&quot;,&quot;2014-02-15&quot;,&quot;2014-02-16&quot;,&quot;2014-02-17&quot;,&quot;2014-02-18&quot;,&quot;2014-02-19&quot;,&quot;2014-02-20&quot;],&quot;name&quot;:&quot;嘉实服务&quot;}]</span></p>
<h6>4. 页面使用ajax 异步请求，控制层response.getWriter().write(json)<br>
5.页面异步请求。</h6>
<p><span style="color:#cccccc"></span><pre code_snippet_id="214527" snippet_file_name="blog_20140303_1_2529534"  name="code" class="javascript">function loadChart(){
        var url = &quot;/loadChart.do?product=&quot;+jQuery(&quot;[name='product']&quot;).val()
                +&quot;&amp;s=&quot;+jQuery(&quot;[name='beginTime']&quot;).val()
                +&quot;&amp;e=&quot;+jQuery(&quot;[name='endTime']&quot;).val();           
              
        jQuery.ajax({
            url: url,
            dataType:&quot;json&quot;,
            type: &quot;post&quot;,
            error : function(xhr, text) {
                //  alert(text);
            },
            success: function(data) {
                jQuery(&quot;#div1&quot;).empty();
                jQuery(&quot;#div1&quot;).highcharts({
                    chart: {
                        defaultSeriesType: 'line',//折线图
                        zoomType: 'x'
                    },
                    colors: ['#058DC7', '#50B432', '#ED561B', '#DDDF00', '#24CBE5', '#64E572', '#FF9655',
                        '#FFF263', '#6AF9C4'],//改变默认的折线颜色
                    title: {
                        text: '累计净值走势图',//折线图标题
                        x: -20 //center
                    },
                    subtitle: {
                        text: '',//副标题，会出现在主标题的下方
                        x: -20
                    },
                    xAxis: {
                       gridLineWidth:0,
                       lineWidth:1.5,
                       minorTickInterval: 'auto',//设置是否出现纵向小标尺
                        ///max: 6,//标签个数
                       tickInterval:calculate2(jQuery(&quot;#dataType&quot;).val()),//计算横轴每隔多少天显示一个标度
                       categories: data[0].date
                    },
                    yAxis: {
                        gridLineWidth:0,
                        lineWidth:1.5,
                        title: {
                            text: ''
                        },
                        plotLines: [
                            {
                                value: 5,
                                width: 0,
                                color: '#808080'
                            }
                        ]
                    },
                    tooltip: {//数据点的提示框
                        valueSuffix: ''
                    },
                    credits: { //版权是否显示
                        enable: false,
                        text: &quot;&quot;
                    },
                    legend: {
                        layout: 'vertical',
                        align: 'right',
                        verticalAlign: 'top',
                        borderWidth: 0
                    },
                    series:data//<span style="color: rgb(204, 204, 204);">控制层</span><span style="color: rgb(204, 204, 204);">response.getWriter().</span><span style="color: rgb(204, 204, 204);">write的json data</span>
                });
            }
        });
    }</pre><br>
</p>

            <div>
                作者：Killer_ZR 发表于2014/3/3 11:37:25 <a href="http://blog.csdn.net/killer_zr/article/details/20361807">原文链接</a>
            </div>
            <div>
            阅读：1562 评论：0 <a href="http://blog.csdn.net/killer_zr/article/details/20361807#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]jenkins 配置【svn,maven,tomcat ,ssh】]]></title>
        <link>http://blog.csdn.net/killer_zr/article/details/14521963</link>
        <guid>http://blog.csdn.net/killer_zr/article/details/14521963</guid>
        <author>Killer_ZR</author>
        <pubDate>2013/11/8 15:44:29</pubDate>
        <description><![CDATA[
            
<p>最近不是很忙，利用闲暇学点东西，不管有没有用，到用时，不至于手足无措&nbsp;。ok,写下这次旅程纪念下。</p>
<p><span style="font-size:14px"></span>&nbsp;</p>
<span style="font-size:14px"></span>
<p><span style="font-size:14px">环境：<span style="font-family:Calibri">windows7</span></span></p>
<span style="font-family:Calibri"></span>
<p><span style="font-size:14px">准备工作：</span></p>
<p><span style="font-family:Calibri; font-size:14px">Jenkins </span>官网：<a target="_blank" href="http://jenkins-ci.org/"><span style="font-family:Calibri">http://jenkins-ci.org/</span></a></p>
<p><span style="font-size:14px">下载<span style="font-family:Calibri">jenkins war: http://mirrors.jenkins-ci.org/war/latest/jenkins.war &nbsp;&nbsp;</span></span></p>
<p><span style="font-family:Calibri; font-size:14px">Jdk 6</span>以上：安装，并且配置好环境变量</p>
<p><span style="font-family:Calibri; font-size:14px">Maven2</span>：配置好环境变量</p>
<p><span style="font-size:14px">下载<span style="font-family:Calibri">tomcat ,</span>将<span style="font-family:Calibri">jenkins.war
</span>放到<span style="font-family:Calibri">D:\java\apache-tomcat-7.0.47\webapps</span>目录下</span></p>
<p><span style="font-size:14px">再启动服务，如果没有修改端口此时必须可以访问<a target="_blank" href="http://localhost:8080/jenkins/"><span style="font-family:Calibri; color:#0000ff">http://localhost:8080/jenkins/</span></a></span></p>
<p><span style="font-family:Calibri; font-size:14px">&nbsp;</span></p>
<p><span style="font-size:14px">具体配置：</span></p>
<p><span style="font-size:14px">系统管理<span style="font-family:Calibri">--</span>à配置<span style="font-family:Calibri">jdk,maven home
</span>配置完如下，完图</span></p>
<p></p>
<p><span style="font-family:Calibri; font-size:14px">&nbsp;<img src="http://img.blog.csdn.net/20131108153959250?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvS2lsbGVyX1pS/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></span></p>
<p></p>
<p><span style="font-family:Calibri; font-size:14px">&nbsp;</span></p>
<p><img src="http://img.blog.csdn.net/20131108154018812?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvS2lsbGVyX1pS/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><span style="font-family:Calibri; font-size:14px">&nbsp;</span></p>
<p><span style="font-family:Calibri; font-size:14px">&nbsp;<img src="http://img.blog.csdn.net/20131108154110218?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvS2lsbGVyX1pS/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></span></p>
<p><span style="font-family:Calibri; font-size:14px">&nbsp;<img src="http://img.blog.csdn.net/20131108154152281?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvS2lsbGVyX1pS/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></span></p>
<p></p>
<p><span style="font-family:Calibri; font-size:14px">&nbsp;<img src="http://img.blog.csdn.net/20131108154253578?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvS2lsbGVyX1pS/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><img src="http://img.blog.csdn.net/20131108154224062?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvS2lsbGVyX1pS/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></span></p>
<p></p>
<p><span style="font-family:Calibri; font-size:14px">&nbsp;</span></p>
<p></p>
<p><span style="font-size:14px">还需要其他插件在系统设置à管理插件<span style="font-family:Calibri">—&gt;</span>点击可选插件</span></p>
<p><span style="font-size:14px">如：<a target="_blank" href="http://wiki.jenkins-ci.org/display/JENKINS/Publish&#43;Over&#43;SSH&#43;Plugin"><span style="font-family:Calibri; color:#0000ff">Publish Over SSH</span></a>插件，<a target="_blank" href="http://wiki.jenkins-ci.org/display/JENKINS/Deploy&#43;Plugin"><span style="font-family:Calibri; color:#0000ff">Deploy
 to container Plugin</span></a>插件。</span></p>
<p><span style="font-family:Calibri; font-size:14px">&nbsp;</span></p>
<p><span style="font-size:14px">细节配置：</span></p>
<p><span style="font-family:Calibri; font-size:14px">1.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m<span style="font-family:Calibri; font-size:14px">aven2</span>：<span style="font-family:Calibri">clean&nbsp; package -P development</span>【需要将<span style="font-family:Calibri">maven 2 profile</span>占位符设置&#20540;】</p>
<p><img src="http://img.blog.csdn.net/20131108153734125?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvS2lsbGVyX1pS/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p></p>
<p><span style="font-family:Calibri; font-size:14px">2.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="font-family:Calibri; font-size:14px">
Tomcat</span>：直接将打好的<span style="font-family:Calibri">war</span>包传到<span style="font-family:Calibri">tomcat,</span>并重启服务</p>
<p>
<table border="0" cellpadding="0" width="100%">
<tbody>
<tr>
<td>
<p align="left">WAR/EAR files:<span style="font-size:14px">fundplatform-web/target/fundplatform-web.war.war</span></p>
<p align="left">【workspace的相对路径】</p>
<table border="0" cellpadding="0" width="100%">
<tbody>
<tr>
<td>
<p align="left">&nbsp;</p>
</td>
<td>
<p align="left">Context path:<span style="font-size:14px">fund.jd.net[</span>项目名称]</p>
</td>
</tr>
</tbody>
</table>
<img src="http://img.blog.csdn.net/20131108153916921?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvS2lsbGVyX1pS/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></td>
</tr>
</tbody>
</table>
</p>
<p><span style="font-family:Calibri; font-size:14px">&nbsp;</span></p>
<p></p>
<p>&nbsp;</p>
<p>&nbsp;</p>

            <div>
                作者：Killer_ZR 发表于2013/11/8 15:44:29 <a href="http://blog.csdn.net/killer_zr/article/details/14521963">原文链接</a>
            </div>
            <div>
            阅读：1548 评论：0 <a href="http://blog.csdn.net/killer_zr/article/details/14521963#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]jquery  获取 form radio 值]]></title>
        <link>http://blog.csdn.net/killer_zr/article/details/11015267</link>
        <guid>http://blog.csdn.net/killer_zr/article/details/11015267</guid>
        <author>Killer_ZR</author>
        <pubDate>2013/9/3 19:01:36</pubDate>
        <description><![CDATA[
            
取一组radio 的方法：html如下：
<div class="marginbuttom20"><em class="lineheight24">1. dfdfdg</em>
<ul>
<li class="lineheight24"><input name="radio1" type="radio" value="1_A">a </li><li class="lineheight24"><input name="radio1" type="radio" value="1_B"> b </li><li class="lineheight24"><input name="radio1" type="radio" value="1_C">c </li><li class="lineheight24"><input name="radio1" type="radio" value="1_D"> d </li><li class="lineheight24"><input name="radio1" type="radio" value="1_E">e </li></ul>
</div>
<div class="marginbuttom20"><em class="lineheight24">2. dfdfdg</em>
<ul>
<li class="lineheight24"><input name="radio2" type="radio" value="2_A">a </li><li class="lineheight24"><input name="radio2" type="radio" value="2_B"> b </li><li class="lineheight24"><input name="radio2" type="radio" value="2_C">c </li><li class="lineheight24"><input name="radio2" type="radio" value="2_D"> d </li><li class="lineheight24"><input name="radio2" type="radio" value="2_E">e </li></ul>
</div>
<div class="marginbuttom20"><em class="lineheight24">3. dfdfdg</em>
<ul>
<li class="lineheight24"><input name="radio3" type="radio" value="3_A">a </li><li class="lineheight24"><input name="radio3" type="radio" value="3_B"> b </li><li class="lineheight24"><input name="radio3" type="radio" value="3_C">c </li><li class="lineheight24"><input name="radio3" type="radio" value="3_D"> d </li><li class="lineheight24"><input name="radio3" type="radio" value="3_E">e </li></ul>
</div>

            <div>
                作者：Killer_ZR 发表于2013/9/3 19:01:36 <a href="http://blog.csdn.net/killer_zr/article/details/11015267">原文链接</a>
            </div>
            <div>
            阅读：214 评论：0 <a href="http://blog.csdn.net/killer_zr/article/details/11015267#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]读取文件方法大全]]></title>
        <link>http://blog.csdn.net/killer_zr/article/details/9623761</link>
        <guid>http://blog.csdn.net/killer_zr/article/details/9623761</guid>
        <author>Killer_ZR</author>
        <pubDate>2013/7/30 9:47:46</pubDate>
        <description><![CDATA[
            
<pre class="java" name="code">public class FileRead {
	    /**
	     * 1.以字节为单位读取文件，常用于读二进制文件，如图片、声音、影像等文件。
	     */
	    public static void readFileByBytes(String fileName) {
	        File file = new File(fileName);
	        InputStream in = null;
	        try {
	            System.out.println(&quot;以字节为单位读取文件内容，一次读一个字节：&quot;);
	            // 一次读一个字节
	            in = new FileInputStream(file);
	            int tempbyte;
	            while ((tempbyte = in.read()) != -1) {
	                System.out.write(tempbyte);
	            }
	            in.close();
	        } catch (IOException e) {
	            e.printStackTrace();
	            return;
	        }
	        try {
	            System.out.println(&quot;以字节为单位读取文件内容，一次读多个字节：&quot;);
	            // 一次读多个字节
	            byte[] tempbytes = new byte[100];
	            int byteread = 0;
	            in = new FileInputStream(fileName);
	            FileRead.showAvailableBytes(in);
	            // 读入多个字节到字节数组中，byteread为一次读入的字节数
	            while ((byteread = in.read(tempbytes)) != -1) {
	                System.out.write(tempbytes, 0, byteread);
	            }
	        } catch (Exception e1) {
	            e1.printStackTrace();
	        } finally {
	            if (in != null) {
	                try {
	                    in.close();
	                } catch (IOException e1) {
	                }
	            }
	        }
	    }

	    /**
	     * 2.以字符为单位读取文件，常用于读文本，数字等类型的文件
	     */
	    public static void readFileByChars(String fileName) {
	        File file = new File(fileName);
	        Reader reader = null;
	        try {
	            System.out.println(&quot;以字符为单位读取文件内容，一次读一个字节：&quot;);
	            // 一次读一个字符
	            reader = new InputStreamReader(new FileInputStream(file));
	            int tempchar;
	            while ((tempchar = reader.read()) != -1) {
	                // 对于windows下，\r\n这两个字符在一起时，表示一个换行。
	                // 但如果这两个字符分开显示时，会换两次行。
	                // 因此，屏蔽掉\r，或者屏蔽\n。否则，将会多出很多空行。
	                if (((char) tempchar) != '\r') {
	                    System.out.print((char) tempchar);
	                }
	            }
	            reader.close();
	        } catch (Exception e) {
	            e.printStackTrace();
	        }
	        try {
	            System.out.println(&quot;以字符为单位读取文件内容，一次读多个字节：&quot;);
	            // 一次读多个字符
	            char[] tempchars = new char[30];
	            int charread = 0;
	            reader = new InputStreamReader(new FileInputStream(fileName));
	            // 读入多个字符到字符数组中，charread为一次读取字符数
	            while ((charread = reader.read(tempchars)) != -1) {
	                // 同样屏蔽掉\r不显示
	                if ((charread == tempchars.length)
	                        &amp;&amp; (tempchars[tempchars.length - 1] != '\r')) {
	                    System.out.print(tempchars);
	                } else {
	                    for (int i = 0; i &lt; charread; i++) {
	                        if (tempchars[i] == '\r') {
	                            continue;
	                        } else {
	                            System.out.print(tempchars[i]);
	                        }
	                    }
	                }
	            }

	        } catch (Exception e1) {
	            e1.printStackTrace();
	        } finally {
	            if (reader != null) {
	                try {
	                    reader.close();
	                } catch (IOException e1) {
	                }
	            }
	        }
	    }

	    /**
	     * 3.以行为单位读取文件，常用于读面向行的格式化文件
	     */
	    public static void readFileByLines(String fileName) {
	        File file = new File(fileName);
	        BufferedReader reader = null;
	        try {
	            System.out.println(&quot;以行为单位读取文件内容，一次读一整行：&quot;);
	            reader = new BufferedReader(new FileReader(file));
	            String tempString = null;
	            int line = 1;
	            // 一次读入一行，直到读入null为文件结束
	            while ((tempString = reader.readLine()) != null) {
	                // 显示行号
	                System.out.println(&quot;line &quot; + line + &quot;: &quot; + tempString);
	                line++;
	            }
	            reader.close();
	        } catch (IOException e) {
	            e.printStackTrace();
	        } finally {
	            if (reader != null) {
	                try {
	                    reader.close();
	                } catch (IOException e1) {
	                }
	            }
	        }
	    }

	    /**
	     * 4.随机读取文件内容
	     */
	    public static void readFileByRandomAccess(String fileName) {
	        RandomAccessFile randomFile = null;
	        try {
	            System.out.println(&quot;随机读取一段文件内容：&quot;);
	            // 打开一个随机访问文件流，按只读方式
	            randomFile = new RandomAccessFile(fileName, &quot;r&quot;);
	            // 文件长度，字节数
	            long fileLength = randomFile.length();
	            // 读文件的起始位置
	            int beginIndex = (fileLength &gt; 4) ? 4 : 0;
	            // 将读文件的开始位置移到beginIndex位置。
	            randomFile.seek(beginIndex);
	            byte[] bytes = new byte[10];
	            int byteread = 0;
	            // 一次读10个字节，如果文件内容不足10个字节，则读剩下的字节。
	            // 将一次读取的字节数赋给byteread
	            while ((byteread = randomFile.read(bytes)) != -1) {
	                System.out.write(bytes, 0, byteread);
	            }
	        } catch (IOException e) {
	            e.printStackTrace();
	        } finally {
	            if (randomFile != null) {
	                try {
	                    randomFile.close();
	                } catch (IOException e1) {
	                }
	            }
	        }
	    }

	    /**
	     * 显示输入流中还剩的字节数
	     */
	    private static void showAvailableBytes(InputStream in) {
	        try {
	            System.out.println(&quot;当前字节输入流中的字节数为:&quot; + in.available());
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
	    }
	    /**
	     * 6.A方法追加文件：使用RandomAccessFile
	     */
	    public static void appendMethodA(String fileName, String content) {
	        try {
	            // 打开一个随机访问文件流，按读写方式
	            RandomAccessFile randomFile = new RandomAccessFile(fileName, &quot;rw&quot;);
	            // 文件长度，字节数
	            long fileLength = randomFile.length();
	            //将写文件指针移到文件尾。
	            randomFile.seek(fileLength);
	            randomFile.writeBytes(content);
	            randomFile.close();
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
	    }

	    /**
	     * B方法追加文件：使用FileWriter
	     */
	    public static void appendMethodB(String fileName, String content) {
	        try {
	            //打开一个写文件器，构造函数中的第二个参数true表示以追加形式写文件
	            FileWriter writer = new FileWriter(fileName, true);
	            writer.write(content);
	            writer.close();
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
	    }

	    public static void main(String[] args) {
	        String fileName = &quot;D:\\ThinkPad\\Desktop\\u\\a.txt&quot;;
	        FileRead.readFileByBytes(fileName);
	        FileRead.readFileByChars(fileName);
	        FileRead.readFileByLines(fileName);
	        FileRead.readFileByRandomAccess(fileName);
	        String content = &quot;new append!&quot;;
	        //按方法A追加文件
	        FileRead.appendMethodA(fileName, content);
	        FileRead.appendMethodA(fileName, &quot;append end. \n&quot;);
	        //显示文件内容
	        FileRead.readFileByLines(fileName);
	        //按方法B追加文件
	        FileRead.appendMethodB(fileName, content);
	        FileRead.appendMethodB(fileName, &quot;append end. \n&quot;);
	        //显示文件内容
	        FileRead.readFileByLines(fileName);
	    }

}
</pre>
<p><br>
&nbsp;</p>

            <div>
                作者：Killer_ZR 发表于2013/7/30 9:47:46 <a href="http://blog.csdn.net/killer_zr/article/details/9623761">原文链接</a>
            </div>
            <div>
            阅读：161 评论：0 <a href="http://blog.csdn.net/killer_zr/article/details/9623761#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]window.prompt()方法的学习]]></title>
        <link>http://blog.csdn.net/killer_zr/article/details/9246183</link>
        <guid>http://blog.csdn.net/killer_zr/article/details/9246183</guid>
        <author>Killer_ZR</author>
        <pubDate>2013/7/4 20:04:10</pubDate>
        <description><![CDATA[
            
<p><span style="font-size:18px">无意中看到window.prompt()方法,之前真没有使用过，孤陋寡闻。不过现在学习下吧。</span></p>
<p><span style="font-size:18px">window对象的最后一种对话框是提示对话框，它显示了预先设置的信息并提供文本域供用户输入应答。它包括两个按钮，即Cancel和Ok，允许用户用两个相反的期望&#20540;来关闭这个对话框：取消整个操作或接收输入到对话框中的文本。　　</span></p>
<p><span style="font-size:18px">window.prompt()方法有两个参数，第一个作为提示信息。如果将一个字符串作为第二个参数，可在文本域显示一个默认答案，假如不想要默认答案，就传一个空字符串(不含任何空&#26684;的双引号)。　　当单击按钮时这个方法将返回一个&#20540;，不管用户在文本域键人什么，单击Cancel按钮都返回一个null&#20540;，单击OK按钮返回键入的字符串&#20540;。脚本可在if和if...else结构条件中使用这些信息，在条件中null&#20540;看做false，空字符串也看做false。因此，条件可以很容易地检测键入域中的实际字符来简化条件测试，如下面的程序段所示：
 var answer = prompt(&quot;What is your name&quot;,&quot;&quot;) if(answer){ alert(&quot;Hello, &quot; &#43; answer &#43; &quot;!&quot;) } 　　只有当用户在提示对话框中输入了字符串并单击了OK按钮时，才会调用alert()方法。 -</span></p>
<p><span style="font-size:18px">那么prompt到底是怎么进行&#20540;的传递的呢,下面结合示例进行解释. </span></p>
<ul>
<li><span style="font-size:18px">测试html code</span></li></ul>
<pre class="html" name="code">&lt;html&gt;
 &lt;head&gt;
  &lt;title&gt; New Document &lt;/title&gt;
  &lt;meta name=&quot;Generator&quot; content=&quot;EditPlus&quot;&gt;
  &lt;meta name=&quot;Author&quot; content=&quot;&quot;&gt;
  &lt;meta name=&quot;Keywords&quot; content=&quot;&quot;&gt;
  &lt;meta name=&quot;Description&quot; content=&quot;&quot;&gt;
 &lt;/head&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
&lt;!--
	function test(){
	 var tempA=window.prompt('你是谁','ask');  
         if( tempA=='' || tempA==null )          {  
             tempA=&quot;你没有输入任何文字&quot;;  
         }   
         alert(tempA);  

	}
//--&gt;
&lt;/script&gt;
 &lt;body onload=&quot;test()&quot;&gt;
  
 &lt;/body&gt;
&lt;/html&gt;</pre>
<ul>
<li>运行结果如下图：</li></ul>
<p>firefox 效果</p>
<p><img src="http://img.blog.csdn.net/20130704194044062?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvS2lsbGVyX1pS/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>ie8效果</p>
<p><img src="http://img.blog.csdn.net/20130704194330343?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvS2lsbGVyX1pS/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>&nbsp;</p>
<ul>
<li>点击【取消】时，没有任何内容，firefox 效果</li></ul>
<p><img src="http://img.blog.csdn.net/20130704194534062?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvS2lsbGVyX1pS/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>&nbsp;<br>
</p>
<ul>
<li>点击确定，</li></ul>
<p><img src="http://img.blog.csdn.net/20130704194934968?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvS2lsbGVyX1pS/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>

            <div>
                作者：Killer_ZR 发表于2013/7/4 20:04:10 <a href="http://blog.csdn.net/killer_zr/article/details/9246183">原文链接</a>
            </div>
            <div>
            阅读：936 评论：0 <a href="http://blog.csdn.net/killer_zr/article/details/9246183#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]JVM工作原理和特点]]></title>
        <link>http://blog.csdn.net/killer_zr/article/details/9139507</link>
        <guid>http://blog.csdn.net/killer_zr/article/details/9139507</guid>
        <author>Killer_ZR</author>
        <pubDate>2013/6/20 18:14:22</pubDate>
        <description><![CDATA[
            
<p>唉，认识了很久，却不知道，，，</p>
<p>JVM工作原理和特点主要是指操作系统装入JVM是通过jdk中Java.exe来完成,通过下面4步来完成JVM环境. </p>
<p>1.创建JVM装载环境和配置 </p>
<p>2.装载JVM.dll </p>
<p>3.初始化JVM.dll并挂界到JNIENV(JNI调用接口)实例 </p>
<p>4.调用JNIEnv实例装载并处理class类。 </p>
<p></p>
<p>在我们运行和调试Java程序的时候,经常会提到一个JVM的概念.JVM是Java程序运行的环境,但是他同时一个操作系统的一个应用程序一个进程,因此他也有他自己的运行的生命周期,也有自己的代码和数据空间.
</p>
<p>首先来说一下JVM工作原理中的jdk这个东西,不管你是初学者还是高手,是j2ee程序员还是j2se程序员,jdk总是在帮我们做一些事情.我们在了解Java之前首先大师们会给我们提供说jdk这个东西.它在Java整个体系中充当着什么角色呢?我很惊叹sun大师们设计天才,能把一个如此完整的体系结构化的如此完美.jdk在这个体系中充当一个生产加工中心,产生所有的数据输出,是所有指令和战略的执行中心.本身它提供了Java的完整方案,可以开发目前Java能支持的所有应用和系统程序.这里说一个问题,大家会问,那为什么还有j2me,j2ee这些东西,这两个东西目的很简单,分别用来简化各自领域内的开发和构建过程.jdk除了JVM之外,还有一些核心的API,集成API,用户工具,开发技术,开发工具和API等组成
</p>
<p>好了,废话说了那么多,来点于主题相关的东西吧.JVM在整个jdk中处于最底层,负责于操作系统的交互,用来屏蔽操作系统环境,提供一个完整的Java运行环境,因此也就虚拟计算机. 操作系统装入JVM是通过jdk中Java.exe来完成,通过下面4步来完成JVM环境.
</p>
<p>1.创建JVM装载环境和配置 </p>
<p>2.装载JVM.dll </p>
<p>3.初始化JVM.dll并挂界到JNIENV(JNI调用接口)实例 </p>
<p>4.调用JNIEnv实例装载并处理class类。 </p>
<p><strong>一．JVM装入环境，JVM提供的方式是操作系统的动态连接文件．</strong>既然是文件那就一个装入路径的问题，Java是怎么找这个路径的呢？当你在调用Java test的时候，操作系统会在path下在你的Java.exe程序，Java.exe就通过下面一个过程来确定JVM的路径和相关的参数配置了．下面基于Windows的实现的分析．
</p>
<p>首先查找jre路径，Java是通过GetApplicationHome api来获得当前的Java.exe绝对路径，c:\j2sdk1.4.2_09\bin\Java.exe,那么它会截取到绝对路径c:\j2sdk1.4.2_09\，判断c:\j2sdk1.4.2_09\bin\Java.dll文件是否存在，如果存在就把c:\j2sdk1.4.2_09\作为jre路径，如果不存在则判断c:\j2sdk1.4.2_09\jre\bin\Java.dll是否存在，如果存在这c:\j2sdk1.4.2_09\jre作为jre路径．如果不存在调用GetPublicJREHome查HKEY_LOCAL_MACHINE\Software\JavaSoft\Java
 Runtime Environment\“当前JRE版本号”\JavaHome的路径为jre路径。 </p>
<p>然后装载JVM.cfg文件JRE路径&#43;\lib&#43;\ARCH（CPU构架）&#43;\JVM.cfgARCH（CPU构架）的判断是通过Java_md.c中GetArch函数判断的，该函数中windows平台只有两种情况：WIN64的‘ia64’，其他情况都为‘i386’。以我的为例：C:\j2sdk1.4.2_09\jre\lib\i386\JVM.cfg.主要的内容如下：
</p>
<pre><ol class="dp-xml"><li class="alt"><span>-client&nbsp;KNOWN&nbsp; &nbsp;</span></li><li><span>-server&nbsp;KNOWN&nbsp; &nbsp;</span></li><li class="alt"><span>-hotspot&nbsp;ALIASED_TO&nbsp;-client&nbsp; &nbsp;</span></li><li><span>-classic&nbsp;WARN&nbsp; &nbsp;</span></li><li class="alt"><span>-native&nbsp;ERROR&nbsp; &nbsp;</span></li><li><span>-green&nbsp;ERROR&nbsp;&nbsp;</span></li></ol></pre>
<p>在我们的jdk目录中jre\bin\server和jre\bin\client都有JVM.dll文件存在，而Java正是通过JVM.cfg配置文件来管理这些不同版本的JVM.dll的．通过文件我们可以定义目前jdk中支持那些JVM,前面部分（client）是JVM名称，后面是参数，KNOWN表示JVM存在，ALIASED_TO表示给别的JVM取一个别名，WARN表示不存在时找一个JVM替代，ERROR表示不存在抛出异常．在运行Java XXX是，Java.exe会通过CheckJVMType来检查当前的JVM类型，Java可以通过两种参数的方式来指定具体的JVM类型，一种按照JVM.cfg文件中的JVM名称指定，第二种方法是直接指定，它们执行的方法分别是“Java
 -J”、“Java -XXaltJVM=”或“Java -J-XXaltJVM=”。如果是第一种参数传递方式，CheckJVMType函数会取参数‘-J’后面的JVM名称，然后从已知的JVM配置参数中查找如果找到同名的则去掉该JVM名称前的‘-’直接返回该&#20540;；而第二种方法，会直接返回“-XXaltJVM=”或“-J-XXaltJVM=”后面的JVM类型名称；如果在运行Java时未指定上面两种方法中的任一一种参数，CheckJVMType会取配置文件中第一个配置中的JVM名称，去掉名称前面的‘-’返回该&#20540;。CheckJVMType函数的这个返回&#20540;会在下面的函数中汇同jre路径组合成JVM.dll的绝对路径。如果没有指定这会使用JVM.cfg中第一个定义的JVM.可以通过set
 _Java_LAUNCHER_DEBUG=1在控制台上测试． </p>
<p>最后获得JVM.dll的路径，JRE路径&#43;\bin&#43;\JVM类型字符串&#43;\JVM.dll就是JVM的文件路径了，但是如果在调用Java程序时用-XXaltJVM=参数指定的路径path,就直接用path&#43;\JVM.dll文件做为JVM.dll的文件路径．
</p>
<p><strong>二：装载JVM.dll</strong> </p>
<p>通过第一步已经找到了JVM的路径，Java通过LoadJavaVM来装入JVM.dll文件．装入工作很简单就是调用Windows API函数： </p>
<p>LoadLibrary装载JVM.dll动态连接库．然后把JVM.dll中的导出函数JNI_CreateJavaVM和JNI_GetDefaultJavaVMInitArgs挂接到InvocationFunctions变量的CreateJavaVM和GetDefaultJavaVMInitArgs函数指针变量上。JVM.dll的装载工作宣告完成。
</p>
<p><strong>三：初始化JVM，获得本地调用接口，</strong>这样就可以在Java中调用JVM的函数了．调用InvocationFunctions－&gt;CreateJavaVM也就是JVM中JNI_CreateJavaVM方法获得JNIEnv结构的实例．
</p>
<p><strong>四：运行Java程序．</strong> </p>
<p>Java程序有两种方式一种是jar包，一种是class. 运行jar,Java -jar XXX.jar运行的时候，Java.exe调用GetMainClassName函数，该函数先获得JNIEnv实例然后调用Java类Java.util.jar.JarFileJNIEnv中方法getManifest()并从返回的Manifest对象中取getAttributes(&quot;Main-Class&quot;)的&#20540;即jar包中文件：META-INF/MANIFEST.MF指定的Main-Class的主类名作为运行的主类。之后main函数会调用Java.c中LoadClass方法装载该主类（使用JNIEnv实例的FindClass）。main函数直接调用Java.c中LoadClass方法装载该类。如果是执行class方法。main函数直接调用Java.c中LoadClass方法装载该类。
</p>
<p>然后main函数调用JNIEnv实例的GetStaticMethodID方法查找装载的class主类中 </p>
<p>“public static void main(String[] args)”方法，并判断该方法是否为public方法，然后调用JNIEnv实例的 </p>
<p>CallStaticVoidMethod方法调用该Java类的main方法。&nbsp; </p>
<p>&nbsp;</p>
原文来自：<a href="http://www.cnblogs.com/jiayi/archive/2010/06/08/1753863.html">http://www.cnblogs.com/jiayi/archive/2010/06/08/1753863.html</a>

            <div>
                作者：Killer_ZR 发表于2013/6/20 18:14:22 <a href="http://blog.csdn.net/killer_zr/article/details/9139507">原文链接</a>
            </div>
            <div>
            阅读：219 评论：0 <a href="http://blog.csdn.net/killer_zr/article/details/9139507#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]mybatis 主键生成]]></title>
        <link>http://blog.csdn.net/killer_zr/article/details/9046723</link>
        <guid>http://blog.csdn.net/killer_zr/article/details/9046723</guid>
        <author>Killer_ZR</author>
        <pubDate>2013/6/7 13:27:05</pubDate>
        <description><![CDATA[
            
<div id="article_content" class="article_content">有些时候，sql语句where条件中，需要一些安全判断，例如按某一条件查询时如果传入的参数是空，此时查询出的结果很可能是空的，也许我们需要参数为空时，是查出全部的信息。使用Oracle的序列、mysql的函数生成Id。这时我们可以使用动态sql。<br>
下文均采用mysql语法和函数（例如字符串链接函数CONCAT）。<br>
<br>
<strong>3.1 selectKey 标签</strong><br>
在insert语句中，在Oracle经常使用序列、在MySQL中使用函数来自动生成插入表的主键，而且需要方法能返回这个生成主键。使用myBatis的selectKey标签可以实现这个效果。&nbsp;&nbsp; 下面例子，使用mysql数据库自定义函数nextval('student')，用来生成一个key，并把他设置到传入的实体类中的studentId属性上。所以在执行完此方法后，边可以通过这个实体类获取生成的key。<br>
<pre style="DISPLAY: none" class="html" name="code">    &lt;!-- 插入学生 自动主键--&gt;  
    &lt;insert id=&quot;createStudentAutoKey&quot; parameterType=&quot;liming.student.manager.data.model.StudentEntity&quot; keyProperty=&quot;studentId&quot;&gt;  
        &lt;selectKey keyProperty=&quot;studentId&quot; resultType=&quot;String&quot; order=&quot;BEFORE&quot;&gt;  
            select nextval('student')  
        &lt;/selectKey&gt;  
        INSERT INTO STUDENT_TBL(STUDENT_ID,  
                                STUDENT_NAME,  
                                STUDENT_SEX,  
                                STUDENT_BIRTHDAY,  
                                STUDENT_PHOTO,  
                                CLASS_ID,  
                                PLACE_ID)  
        VALUES (#{studentId},  
                #{studentName},  
                #{studentSex},  
                #{studentBirthday},  <pre class="html" name="code">    StudentEntity entity = new StudentEntity();  
    entity.setStudentName(&quot;黎明你好&quot;);  
    entity.setStudentSex(1);  
    entity.setStudentBirthday(DateUtil.parse(&quot;1985-05-28&quot;));  
    entity.setClassId(&quot;20000001&quot;);  
    entity.setPlaceId(&quot;70000001&quot;);  
    this.dynamicSqlMapper.createStudentAutoKey(entity);  
    System.out.println(&quot;新增学生ID: &quot; + entity.getStudentId());  </pre><br>
#{studentPhoto, javaType=byte[], jdbcType=BLOB, typeHandler=org.apache.ibatis.type.BlobTypeHandler}, #{classId}, #{placeId}) &lt;/insert&gt;
<pre></pre>
调用接口方法，和获取自动生成key<pre class="html" name="code">    StudentEntity entity = new StudentEntity();  
    entity.setStudentName(&quot;黎明你好&quot;);  
    entity.setStudentSex(1);  
    entity.setStudentBirthday(DateUtil.parse(&quot;1985-05-28&quot;));  
    entity.setClassId(&quot;20000001&quot;);  
    entity.setPlaceId(&quot;70000001&quot;);  
    this.dynamicSqlMapper.createStudentAutoKey(entity);  
    System.out.println(&quot;新增学生ID: &quot; + entity.getStudentId());  </pre>selectKey语句属性配置细节：<br>
属性 &nbsp;&nbsp; &nbsp;描述 &nbsp;&nbsp; &nbsp;取&#20540;<br>
keyProperty &nbsp;&nbsp; &nbsp;selectKey 语句生成结果需要设置的属性。 &nbsp;&nbsp; &nbsp;<br>
resultType &nbsp;&nbsp; &nbsp;生成结果类型，MyBatis 允许使用基本的数据类型，包括String 、int类型。 &nbsp;&nbsp; &nbsp;<br>
order &nbsp;&nbsp; &nbsp;<br>
1：BEFORE，会先选择主键，然后设置keyProperty，再执行insert语句；<br>
2：AFTER，就先运行insert 语句再运行selectKey 语句。 &nbsp;&nbsp; &nbsp;<br>
BEFORE<br>
AFTER<br>
statementType &nbsp;&nbsp; &nbsp;MyBatis 支持STATEMENT，PREPARED和CALLABLE 的语句形式， 对应Statement ，PreparedStatement 和CallableStatement 响应 &nbsp;&nbsp; &nbsp;<br>
STATEMENT,PREPARED,CALLABLE<br>
<strong>3.2 if标签</strong><br>
if标签可用在许多类型的sql语句中，我们以查询为例。首先看一个很普通的查询：<pre class="html" name="code">    &lt;!-- 查询学生list，like姓名 --&gt;  
    &lt;select id=&quot;getStudentListLikeName&quot; parameterType=&quot;StudentEntity&quot; resultMap=&quot;studentResultMap&quot;&gt;  
        SELECT * from STUDENT_TBL ST   
    WHERE ST.STUDENT_NAME LIKE CONCAT(CONCAT('%', #{studentName}),'%')  
    &lt;/select&gt;  </pre>但是此时如果studentName或studentSex为null，此语句很可能报错或查询结果为空。此时我们使用if动态sql语句先进行判断，如果&#20540;为null或等于空字符串，我们就不进行此条件的判断，增加灵活性。<br>
参数为实体类StudentEntity。将实体类中所有的属性均进行判断，如果不为空则执行判断条件。<br>
<pre class="html" name="code">&lt;!-- 2 if(判断参数) - 将实体类不为空的属性作为where条件 --&gt;  
    &lt;select id=&quot;getStudentList_if&quot; resultMap=&quot;resultMap_studentEntity&quot; parameterType=&quot;liming.student.manager.data.model.StudentEntity&quot;&gt;  
        SELECT ST.STUDENT_ID,  
               ST.STUDENT_NAME,  
               ST.STUDENT_SEX,  
               ST.STUDENT_BIRTHDAY,  
               ST.STUDENT_PHOTO,  
               ST.CLASS_ID,  
               ST.PLACE_ID  
          FROM STUDENT_TBL ST   
         WHERE  
        &lt;if test=&quot;studentName !=null &quot;&gt;  
            ST.STUDENT_NAME LIKE CONCAT(CONCAT('%', #{studentName, jdbcType=VARCHAR}),'%')  
        &lt;/if&gt;  
        &lt;if test=&quot;studentSex != null and studentSex != '' &quot;&gt;  
            AND ST.STUDENT_SEX = #{studentSex, jdbcType=INTEGER}  
        &lt;/if&gt;  
        &lt;if test=&quot;studentBirthday != null &quot;&gt;  
            AND ST.STUDENT_BIRTHDAY = #{studentBirthday, jdbcType=DATE}  
        &lt;/if&gt;  
        &lt;if test=&quot;classId != null and classId!= '' &quot;&gt;  
            AND ST.CLASS_ID = #{classId, jdbcType=VARCHAR}  
        &lt;/if&gt;  
        &lt;if test=&quot;classEntity != null and classEntity.classId !=null and classEntity.classId !=' ' &quot;&gt;  
            AND ST.CLASS_ID = #{classEntity.classId, jdbcType=VARCHAR}  
        &lt;/if&gt;  
        &lt;if test=&quot;placeId != null and placeId != '' &quot;&gt;  
            AND ST.PLACE_ID = #{placeId, jdbcType=VARCHAR}  
        &lt;/if&gt;  
        &lt;if test=&quot;placeEntity != null and placeEntity.placeId != null and placeEntity.placeId != '' &quot;&gt;  
            AND ST.PLACE_ID = #{placeEntity.placeId, jdbcType=VARCHAR}  
        &lt;/if&gt;  
        &lt;if test=&quot;studentId != null and studentId != '' &quot;&gt;  
            AND ST.STUDENT_ID = #{studentId, jdbcType=VARCHAR}  
        &lt;/if&gt;   
    &lt;/select&gt;  </pre><br>
<br>
使用时比较灵活， new一个这样的实体类，我们需要限制那个条件，只需要附上相应的&#20540;就会where这个条件，相反不去赋&#20540;就可以不在where中判断。<br>
<pre class="html" name="code">    public void select_test_2_1() {  
        StudentEntity entity = new StudentEntity();  
        entity.setStudentName(&quot;&quot;);  
        entity.setStudentSex(1);  
        entity.setStudentBirthday(DateUtil.parse(&quot;1985-05-28&quot;));  
        entity.setClassId(&quot;20000001&quot;);  
        //entity.setPlaceId(&quot;70000001&quot;);  
        List&lt;StudentEntity&gt; list = this.dynamicSqlMapper.getStudentList_if(entity);  
        for (StudentEntity e : list) {  
            System.out.println(e.toString());  
        }  
    }  </pre><strong>3.3 if &#43; where 的条件判断</strong><br>
当where中的条件使用的if标签较多时，这样的组合可能会导致错误。我们以在3.1中的查询语句为例子，当java代码按如下方法调用时：<br>
<pre class="html" name="code">    @Test  
    public void select_test_2_1() {  
        StudentEntity entity = new StudentEntity();  
        entity.setStudentName(null);  
        entity.setStudentSex(1);  
        List&lt;StudentEntity&gt; list = this.dynamicSqlMapper.getStudentList_if(entity);  
        for (StudentEntity e : list) {  
            System.out.println(e.toString());  
        }  
    }  </pre>如果上面例子，参数studentName为null，将不会进行STUDENT_NAME列的判断，则会直接导“WHERE AND”关键字多余的错误SQL。<br>
这时我们可以使用where动态语句来解决。这个“where”标签会知道如果它包含的标签中有返回&#20540;的话，它就插入一个‘where’。此外，如果标签返回的内容是以AND 或OR 开头的，则它会剔除掉。<br>
上面例子修改为：<pre class="html" name="code">&lt;!-- 3 select - where/if(判断参数) - 将实体类不为空的属性作为where条件 --&gt;  
    &lt;select id=&quot;getStudentList_whereIf&quot; resultMap=&quot;resultMap_studentEntity&quot; parameterType=&quot;liming.student.manager.data.model.StudentEntity&quot;&gt;  
        SELECT ST.STUDENT_ID,  
               ST.STUDENT_NAME,  
               ST.STUDENT_SEX,  
               ST.STUDENT_BIRTHDAY,  
               ST.STUDENT_PHOTO,  
               ST.CLASS_ID,  
               ST.PLACE_ID  
          FROM STUDENT_TBL ST   
        &lt;where&gt;  
            &lt;if test=&quot;studentName !=null &quot;&gt;  
                ST.STUDENT_NAME LIKE CONCAT(CONCAT('%', #{studentName, jdbcType=VARCHAR}),'%')  
            &lt;/if&gt;  
            &lt;if test=&quot;studentSex != null and studentSex != '' &quot;&gt;  
                AND ST.STUDENT_SEX = #{studentSex, jdbcType=INTEGER}  
            &lt;/if&gt;  
            &lt;if test=&quot;studentBirthday != null &quot;&gt;  
                AND ST.STUDENT_BIRTHDAY = #{studentBirthday, jdbcType=DATE}  
            &lt;/if&gt;  
            &lt;if test=&quot;classId != null and classId!= '' &quot;&gt;  
                AND ST.CLASS_ID = #{classId, jdbcType=VARCHAR}  
            &lt;/if&gt;  
            &lt;if test=&quot;classEntity != null and classEntity.classId !=null and classEntity.classId !=' ' &quot;&gt;  
                AND ST.CLASS_ID = #{classEntity.classId, jdbcType=VARCHAR}  
            &lt;/if&gt;  
            &lt;if test=&quot;placeId != null and placeId != '' &quot;&gt;  
                AND ST.PLACE_ID = #{placeId, jdbcType=VARCHAR}  
            &lt;/if&gt;  
            &lt;if test=&quot;placeEntity != null and placeEntity.placeId != null and placeEntity.placeId != '' &quot;&gt;  
                AND ST.PLACE_ID = #{placeEntity.placeId, jdbcType=VARCHAR}  
            &lt;/if&gt;  
            &lt;if test=&quot;studentId != null and studentId != '' &quot;&gt;  
                AND ST.STUDENT_ID = #{studentId, jdbcType=VARCHAR}  
            &lt;/if&gt;  
        &lt;/where&gt;    
    &lt;/select&gt;  </pre><strong>3.4 if &#43; set 的更新语句</strong><br>
当update语句中没有使用if标签时，如果有一个参数为null，都会导致错误。<br>
当在update语句中使用if标签时，如果前面的if没有执行，则或导致逗号多余错误。使用set标签可以将动态的配置SET 关键字，和剔除追加到条件末尾的任何不相关的逗号。<br>
使用if&#43;set标签修改后，如果某项为null则不进行更新，而是保持数据库原&#20540;。如下示例：<pre class="html" name="code">&lt;!-- 4 if/set(判断参数) - 将实体类不为空的属性更新 --&gt;  
    &lt;update id=&quot;updateStudent_if_set&quot; parameterType=&quot;liming.student.manager.data.model.StudentEntity&quot;&gt;  
        UPDATE STUDENT_TBL  
        &lt;set&gt;  
            &lt;if test=&quot;studentName != null and studentName != '' &quot;&gt;  
                STUDENT_TBL.STUDENT_NAME = #{studentName},  
            &lt;/if&gt;  
            &lt;if test=&quot;studentSex != null and studentSex != '' &quot;&gt;  
                STUDENT_TBL.STUDENT_SEX = #{studentSex},  
            &lt;/if&gt;  
            &lt;if test=&quot;studentBirthday != null &quot;&gt;  
                STUDENT_TBL.STUDENT_BIRTHDAY = #{studentBirthday},  
            &lt;/if&gt;  
            &lt;if test=&quot;studentPhoto != null &quot;&gt;  
                STUDENT_TBL.STUDENT_PHOTO = #{studentPhoto, javaType=byte[], jdbcType=BLOB, typeHandler=org.apache.ibatis.type.BlobTypeHandler},  
            &lt;/if&gt;  
            &lt;if test=&quot;classId != '' &quot;&gt;  
                STUDENT_TBL.CLASS_ID = #{classId}  
            &lt;/if&gt;  
            &lt;if test=&quot;placeId != '' &quot;&gt;  
                STUDENT_TBL.PLACE_ID = #{placeId}  
            &lt;/if&gt;  
        &lt;/set&gt;  
        WHERE STUDENT_TBL.STUDENT_ID = #{studentId};      
    &lt;/update&gt;  </pre><strong>3.5 if &#43; trim代替where/set标签</strong><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trim是更灵活的去处多余关键字的标签，他可以实践where和set的效果。<br>
<strong>3.5.1trim代替where</strong><br>
<pre class="html" name="code">&lt;!-- 5.1 if/trim代替where(判断参数) - 将实体类不为空的属性作为where条件 --&gt;  
    &lt;select id=&quot;getStudentList_if_trim&quot; resultMap=&quot;resultMap_studentEntity&quot;&gt;  
        SELECT ST.STUDENT_ID,  
               ST.STUDENT_NAME,  
               ST.STUDENT_SEX,  
               ST.STUDENT_BIRTHDAY,  
               ST.STUDENT_PHOTO,  
               ST.CLASS_ID,  
               ST.PLACE_ID  
          FROM STUDENT_TBL ST   
        &lt;trim prefix=&quot;WHERE&quot; prefixOverrides=&quot;AND|OR&quot;&gt;  
            &lt;if test=&quot;studentName !=null &quot;&gt;  
                ST.STUDENT_NAME LIKE CONCAT(CONCAT('%', #{studentName, jdbcType=VARCHAR}),'%')  
            &lt;/if&gt;  
            &lt;if test=&quot;studentSex != null and studentSex != '' &quot;&gt;  
                AND ST.STUDENT_SEX = #{studentSex, jdbcType=INTEGER}  
            &lt;/if&gt;  
            &lt;if test=&quot;studentBirthday != null &quot;&gt;  
                AND ST.STUDENT_BIRTHDAY = #{studentBirthday, jdbcType=DATE}  
            &lt;/if&gt;  
            &lt;if test=&quot;classId != null and classId!= '' &quot;&gt;  
                AND ST.CLASS_ID = #{classId, jdbcType=VARCHAR}  
            &lt;/if&gt;  
            &lt;if test=&quot;classEntity != null and classEntity.classId !=null and classEntity.classId !=' ' &quot;&gt;  
                AND ST.CLASS_ID = #{classEntity.classId, jdbcType=VARCHAR}  
            &lt;/if&gt;  
            &lt;if test=&quot;placeId != null and placeId != '' &quot;&gt;  
                AND ST.PLACE_ID = #{placeId, jdbcType=VARCHAR}  
            &lt;/if&gt;  
            &lt;if test=&quot;placeEntity != null and placeEntity.placeId != null and placeEntity.placeId != '' &quot;&gt;  
                AND ST.PLACE_ID = #{placeEntity.placeId, jdbcType=VARCHAR}  
            &lt;/if&gt;  
            &lt;if test=&quot;studentId != null and studentId != '' &quot;&gt;  
                AND ST.STUDENT_ID = #{studentId, jdbcType=VARCHAR}  
            &lt;/if&gt;  
        &lt;/trim&gt;     
    &lt;/select&gt;  </pre><strong>3.5.2 trim代替set</strong><br>
<pre class="html" name="code">    &lt;!-- 5.2 if/trim代替set(判断参数) - 将实体类不为空的属性更新 --&gt;  
    &lt;update id=&quot;updateStudent_if_trim&quot; parameterType=&quot;liming.student.manager.data.model.StudentEntity&quot;&gt;  
        UPDATE STUDENT_TBL  
        &lt;trim prefix=&quot;SET&quot; suffixOverrides=&quot;,&quot;&gt;  
            &lt;if test=&quot;studentName != null and studentName != '' &quot;&gt;  
                STUDENT_TBL.STUDENT_NAME = #{studentName},  
            &lt;/if&gt;  
            &lt;if test=&quot;studentSex != null and studentSex != '' &quot;&gt;  
                STUDENT_TBL.STUDENT_SEX = #{studentSex},  
            &lt;/if&gt;  
            &lt;if test=&quot;studentBirthday != null &quot;&gt;  
                STUDENT_TBL.STUDENT_BIRTHDAY = #{studentBirthday},  
            &lt;/if&gt;  
            &lt;if test=&quot;studentPhoto != null &quot;&gt;  
                STUDENT_TBL.STUDENT_PHOTO = #{studentPhoto, javaType=byte[], jdbcType=BLOB, typeHandler=org.apache.ibatis.type.BlobTypeHandler},  
            &lt;/if&gt;  
            &lt;if test=&quot;classId != '' &quot;&gt;  
                STUDENT_TBL.CLASS_ID = #{classId},  
            &lt;/if&gt;  
            &lt;if test=&quot;placeId != '' &quot;&gt;  
                STUDENT_TBL.PLACE_ID = #{placeId}  
            &lt;/if&gt;  
        &lt;/trim&gt;  
        WHERE STUDENT_TBL.STUDENT_ID = #{studentId}  
    &lt;/update&gt;  </pre>
<p><strong>3.6 choose (when, otherwise)&nbsp; </strong><br>
</p>
<p>有时候我们并不想应用所有的条件，而只是想从多个选项中选择一个。而使用if标签时，只要test中的表达式为true，就会执行if标签中的条件。MyBatis提供了choose 元素。if标签是与(and)的关系，而choose比傲天是或（or）的关系。&nbsp; choose标签是按顺序判断其内部when标签中的test条件出否成立，如果有一个成立，则choose结束。当choose中所有when的条件都不满则时，则执行otherwise中的sql。类&#20284;于Java 的switch 语句，choose为switch，when为case，otherwise则为default。</p>
例如下面例子，同样把所有可以限制的条件都写上，方面使用。choose会从上到下选择一个when标签的test为true的sql执行。安全考虑，我们使用where将choose包起来，放置关键字多于错误。<pre class="html" name="code">&lt;!-- 6 choose(判断参数) - 按顺序将实体类第一个不为空的属性作为where条件 --&gt;  
    &lt;select id=&quot;getStudentList_choose&quot; resultMap=&quot;resultMap_studentEntity&quot; parameterType=&quot;liming.student.manager.data.model.StudentEntity&quot;&gt;  
        SELECT ST.STUDENT_ID,  
               ST.STUDENT_NAME,  
               ST.STUDENT_SEX,  
               ST.STUDENT_BIRTHDAY,  
               ST.STUDENT_PHOTO,  
               ST.CLASS_ID,  
               ST.PLACE_ID  
          FROM STUDENT_TBL ST   
        &lt;where&gt;  
            &lt;choose&gt;  
                &lt;when test=&quot;studentName !=null &quot;&gt;  
                    ST.STUDENT_NAME LIKE CONCAT(CONCAT('%', #{studentName, jdbcType=VARCHAR}),'%')  
                &lt;/when &gt;  
                &lt;when test=&quot;studentSex != null and studentSex != '' &quot;&gt;  
                    AND ST.STUDENT_SEX = #{studentSex, jdbcType=INTEGER}  
                &lt;/when &gt;  
                &lt;when test=&quot;studentBirthday != null &quot;&gt;  
                    AND ST.STUDENT_BIRTHDAY = #{studentBirthday, jdbcType=DATE}  
                &lt;/when &gt;  
                &lt;when test=&quot;classId != null and classId!= '' &quot;&gt;  
                    AND ST.CLASS_ID = #{classId, jdbcType=VARCHAR}  
                &lt;/when &gt;  
                &lt;when test=&quot;classEntity != null and classEntity.classId !=null and classEntity.classId !=' ' &quot;&gt;  
                    AND ST.CLASS_ID = #{classEntity.classId, jdbcType=VARCHAR}  
                &lt;/when &gt;  
                &lt;when test=&quot;placeId != null and placeId != '' &quot;&gt;  
                    AND ST.PLACE_ID = #{placeId, jdbcType=VARCHAR}  
                &lt;/when &gt;  
                &lt;when test=&quot;placeEntity != null and placeEntity.placeId != null and placeEntity.placeId != '' &quot;&gt;  
                    AND ST.PLACE_ID = #{placeEntity.placeId, jdbcType=VARCHAR}  
                &lt;/when &gt;  
                &lt;when test=&quot;studentId != null and studentId != '' &quot;&gt;  
                    AND ST.STUDENT_ID = #{studentId, jdbcType=VARCHAR}  
                &lt;/when &gt;  
                &lt;otherwise&gt;  
                &lt;/otherwise&gt;  
            &lt;/choose&gt;  
        &lt;/where&gt;    
    &lt;/select&gt;  </pre><strong>3.7 foreach</strong><br>
对于动态SQL 非常必须的，主是要迭代一个集合，通常是用于IN 条件。List 实例将使用“list”做为键，数组实例以“array” 做为键。<br>
foreach元素是非常强大的，它允许你指定一个集合，声明集合项和索引变量，它们可以用在元素体内。它也允许你指定开放和关闭的字符串，在迭代之间放置分隔符。这个元素是很智能的，它不会偶然地附加多余的分隔符。<br>
注意：你可以传递一个List实例或者数组作为参数对象传给MyBatis。当你这么做的时候，MyBatis会自动将它包装在一个Map中，用名称在作为键。List实例将会以“list”作为键，而数组实例将会以“array”作为键。<br>
这个部分是对关于XML配置文件和XML映射文件的而讨论的。下一部分将详细讨论Java API，所以你可以得到你已经创建的最有效的映射。<br>
3.7.1参数为array示例的写法<br>
<pre class="html" name="code">接口的方法声明：
    public List&lt;StudentEntity&gt; getStudentListByClassIds_foreach_array(String[] classIds);  
动态SQL语句：
    &lt;!— 7.1 foreach(循环array参数) - 作为where中in的条件 --&gt;  
    &lt;select id=&quot;getStudentListByClassIds_foreach_array&quot; resultMap=&quot;resultMap_studentEntity&quot;&gt;  
        SELECT ST.STUDENT_ID,  
               ST.STUDENT_NAME,  
               ST.STUDENT_SEX,  
               ST.STUDENT_BIRTHDAY,  
               ST.STUDENT_PHOTO,  
               ST.CLASS_ID,  
               ST.PLACE_ID  
          FROM STUDENT_TBL ST  
          WHERE ST.CLASS_ID IN   
         &lt;foreach collection=&quot;array&quot; item=&quot;classIds&quot;  open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;  
            #{classIds}  
         &lt;/foreach&gt;  
    &lt;/select&gt;  </pre>测试代码，查询学生中，在20000001、20000002这两个班级的学生：<br>
<pre class="html" name="code">接口的方法声明：
    public List&lt;StudentEntity&gt; getStudentListByClassIds_foreach_array(String[] classIds);  
动态SQL语句：
    &lt;!— 7.1 foreach(循环array参数) - 作为where中in的条件 --&gt;  
    &lt;select id=&quot;getStudentListByClassIds_foreach_array&quot; resultMap=&quot;resultMap_studentEntity&quot;&gt;  
        SELECT ST.STUDENT_ID,  
               ST.STUDENT_NAME,  
               ST.STUDENT_SEX,  
               ST.STUDENT_BIRTHDAY,  
               ST.STUDENT_PHOTO,  
               ST.CLASS_ID,  
               ST.PLACE_ID  
          FROM STUDENT_TBL ST  
          WHERE ST.CLASS_ID IN   
         &lt;foreach collection=&quot;array&quot; item=&quot;classIds&quot;  open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;  
            #{classIds}  
         &lt;/foreach&gt;  
    &lt;/select&gt;  </pre><strong>3.7.2参数为list示例的写法</strong><br>
接口的方法声明：<br>
&nbsp;&nbsp;&nbsp; public List&lt;StudentEntity&gt; getStudentListByClassIds_foreach_list(List&lt;String&gt; classIdList); &nbsp;<br>
动态SQL语句：<br>
<pre class="html" name="code">    &lt;!-- 7.2 foreach(循环List&lt;String&gt;参数) - 作为where中in的条件 --&gt;  
    &lt;select id=&quot;getStudentListByClassIds_foreach_list&quot; resultMap=&quot;resultMap_studentEntity&quot;&gt;  
        SELECT ST.STUDENT_ID,  
               ST.STUDENT_NAME,  
               ST.STUDENT_SEX,  
               ST.STUDENT_BIRTHDAY,  
               ST.STUDENT_PHOTO,  
               ST.CLASS_ID,  
               ST.PLACE_ID  
          FROM STUDENT_TBL ST  
          WHERE ST.CLASS_ID IN   
         &lt;foreach collection=&quot;list&quot; item=&quot;classIdList&quot;  open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;  
            #{classIdList}  
         &lt;/foreach&gt;  
    &lt;/select&gt;  </pre>测试代码，查询学生中，在20000001、20000002这两个班级的学生：<pre class="html" name="code">    @Test  
    public void test7_2_foreach() {  
        ArrayList&lt;String&gt; classIdList = new ArrayList&lt;String&gt;();  
        classIdList.add(&quot;20000001&quot;);  
        classIdList.add(&quot;20000002&quot;);  
        List&lt;StudentEntity&gt; list = this.dynamicSqlMapper.getStudentListByClassIds_foreach_list(classIdList);  
        for (StudentEntity e : list) {  
            System.out.println(e.toString());  
        }  
    }</pre><br>
转载 http://limingnihao.iteye.com/blog/782190<br>
<br>
<pre></pre>
</div>

            <div>
                作者：Killer_ZR 发表于2013/6/7 13:27:05 <a href="http://blog.csdn.net/killer_zr/article/details/9046723">原文链接</a>
            </div>
            <div>
            阅读：1763 评论：0 <a href="http://blog.csdn.net/killer_zr/article/details/9046723#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]MyBatis 自动生成mysql 表对应的javabean ---2]]></title>
        <link>http://blog.csdn.net/killer_zr/article/details/9046673</link>
        <guid>http://blog.csdn.net/killer_zr/article/details/9046673</guid>
        <author>Killer_ZR</author>
        <pubDate>2013/6/7 13:16:46</pubDate>
        <description><![CDATA[
            
<p>因为太懒不喜欢敲代码，写没用的东西，今天在网上看到一篇很给力的文章。感谢原作者：<a href="http://blog.csdn.net/kkdelta/article/details/7228177">http://blog.csdn.net/kkdelta/article/details/7228177</a></p>
<p>1,下载插件所需要的jar包,拷贝到eclipse的 \eclipse\dropins目录,注意不是plugings目录,重新启动eclipse则可以使用了.</p>
<p>http://download.csdn.net/detail/kkdelta/4040880<br>
</p>
<p>2,使用方法,在项目上点右键,点击如下图弹出的菜单选项.<br>
</p>
<p><img alt="" src="http://hi.csdn.net/attachment/201202/2/0_1328160545zdx0.gif"></p>
<p>3,在弹出的界面中配置数据库信息:</p>
<p><img alt="" src="http://hi.csdn.net/attachment/201202/2/0_13281609314S73.gif"><br>
</p>
<p>4,配置好后选择想要生成的表,然后click OK生成代码<br>
</p>
<p><img alt="" src="http://hi.csdn.net/attachment/201202/2/0_1328161071XN4C.gif"></p>
<p><br>
</p>
<p>用到的插件从http://www.ibatis3.com下载所得,在此表示感谢.</p>
<p>另外一种方法:http://qiuguo0205.iteye.com/blog/819100 介绍了mybatis官方提供的生成代码的方法.</p>
<p>从这里可以下载 http://download.csdn.net/detail/kkdelta/4201219<br>
</p>
<p>解开后编辑 generator.xml</p>
<p>用命令java -jar lib/mybatis-generator-core-1.3.1.jar -configfile generator.xml -overwrite生成代码.</p>
<p>&nbsp;</p>

            <div>
                作者：Killer_ZR 发表于2013/6/7 13:16:46 <a href="http://blog.csdn.net/killer_zr/article/details/9046673">原文链接</a>
            </div>
            <div>
            阅读：1509 评论：0 <a href="http://blog.csdn.net/killer_zr/article/details/9046673#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]jQuery 的选择器]]></title>
        <link>http://blog.csdn.net/killer_zr/article/details/8898200</link>
        <guid>http://blog.csdn.net/killer_zr/article/details/8898200</guid>
        <author>Killer_ZR</author>
        <pubDate>2013/5/8 0:37:59</pubDate>
        <description><![CDATA[
            
<div class="postTitle"><a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/onlys/articles/jQuery.html">jQuery选择器总结</a>
</div>
<div id="cnblogs_post_body">
<p>&nbsp;</p>
<div class="cnblogs_Highlighter">
<div>
<div id="highlighter_213168" class="syntaxhighlighter  javascript ie ">
<div class="toolbar"><span><a class="toolbar_item command_help help" href="http://www.cnblogs.com/onlys/articles/jQuery.html#">?</a></span></div>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
<div class="line number30 index29 alt1">30</div>
<div class="line number31 index30 alt2">31</div>
<div class="line number32 index31 alt1">32</div>
<div class="line number33 index32 alt2">33</div>
<div class="line number34 index33 alt1">34</div>
<div class="line number35 index34 alt2">35</div>
<div class="line number36 index35 alt1">36</div>
<div class="line number37 index36 alt2">37</div>
<div class="line number38 index37 alt1">38</div>
<div class="line number39 index38 alt2">39</div>
<div class="line number40 index39 alt1">40</div>
<div class="line number41 index40 alt2">41</div>
<div class="line number42 index41 alt1">42</div>
<div class="line number43 index42 alt2">43</div>
<div class="line number44 index43 alt1">44</div>
<div class="line number45 index44 alt2">45</div>
<div class="line number46 index45 alt1">46</div>
<div class="line number47 index46 alt2">47</div>
<div class="line number48 index47 alt1">48</div>
<div class="line number49 index48 alt2">49</div>
<div class="line number50 index49 alt1">50</div>
<div class="line number51 index50 alt2">51</div>
<div class="line number52 index51 alt1">52</div>
<div class="line number53 index52 alt2">53</div>
<div class="line number54 index53 alt1">54</div>
<div class="line number55 index54 alt2">55</div>
<div class="line number56 index55 alt1">56</div>
<div class="line number57 index56 alt2">57</div>
<div class="line number58 index57 alt1">58</div>
<div class="line number59 index58 alt2">59</div>
<div class="line number60 index59 alt1">60</div>
<div class="line number61 index60 alt2">61</div>
<div class="line number62 index61 alt1">62</div>
<div class="line number63 index62 alt2">63</div>
<div class="line number64 index63 alt1">64</div>
<div class="line number65 index64 alt2">65</div>
<div class="line number66 index65 alt1">66</div>
<div class="line number67 index66 alt2">67</div>
<div class="line number68 index67 alt1">68</div>
<div class="line number69 index68 alt2">69</div>
<div class="line number70 index69 alt1">70</div>
<div class="line number71 index70 alt2">71</div>
<div class="line number72 index71 alt1">72</div>
<div class="line number73 index72 alt2">73</div>
<div class="line number74 index73 alt1">74</div>
<div class="line number75 index74 alt2">75</div>
<div class="line number76 index75 alt1">76</div>
<div class="line number77 index76 alt2">77</div>
<div class="line number78 index77 alt1">78</div>
<div class="line number79 index78 alt2">79</div>
<div class="line number80 index79 alt1">80</div>
<div class="line number81 index80 alt2">81</div>
<div class="line number82 index81 alt1">82</div>
<div class="line number83 index82 alt2">83</div>
<div class="line number84 index83 alt1">84</div>
<div class="line number85 index84 alt2">85</div>
<div class="line number86 index85 alt1">86</div>
<div class="line number87 index86 alt2">87</div>
<div class="line number88 index87 alt1">88</div>
<div class="line number89 index88 alt2">89</div>
<div class="line number90 index89 alt1">90</div>
<div class="line number91 index90 alt2">91</div>
<div class="line number92 index91 alt1">92</div>
<div class="line number93 index92 alt2">93</div>
<div class="line number94 index93 alt1">94</div>
<div class="line number95 index94 alt2">95</div>
<div class="line number96 index95 alt1">96</div>
<div class="line number97 index96 alt2">97</div>
<div class="line number98 index97 alt1">98</div>
<div class="line number99 index98 alt2">99</div>
<div class="line number100 index99 alt1">100</div>
<div class="line number101 index100 alt2">101</div>
<div class="line number102 index101 alt1">102</div>
<div class="line number103 index102 alt2">103</div>
<div class="line number104 index103 alt1">104</div>
<div class="line number105 index104 alt2">105</div>
<div class="line number106 index105 alt1">106</div>
<div class="line number107 index106 alt2">107</div>
<div class="line number108 index107 alt1">108</div>
<div class="line number109 index108 alt2">109</div>
<div class="line number110 index109 alt1">110</div>
<div class="line number111 index110 alt2">111</div>
<div class="line number112 index111 alt1">112</div>
<div class="line number113 index112 alt2">113</div>
<div class="line number114 index113 alt1">114</div>
<div class="line number115 index114 alt2">115</div>
<div class="line number116 index115 alt1">116</div>
<div class="line number117 index116 alt2">117</div>
<div class="line number118 index117 alt1">118</div>
<div class="line number119 index118 alt2">119</div>
<div class="line number120 index119 alt1">120</div>
<div class="line number121 index120 alt2">121</div>
<div class="line number122 index121 alt1">122</div>
<div class="line number123 index122 alt2">123</div>
<div class="line number124 index123 alt1">124</div>
<div class="line number125 index124 alt2">125</div>
<div class="line number126 index125 alt1">126</div>
<div class="line number127 index126 alt2">127</div>
<div class="line number128 index127 alt1">128</div>
<div class="line number129 index128 alt2">129</div>
<div class="line number130 index129 alt1">130</div>
<div class="line number131 index130 alt2">131</div>
<div class="line number132 index131 alt1">132</div>
<div class="line number133 index132 alt2">133</div>
<div class="line number134 index133 alt1">134</div>
<div class="line number135 index134 alt2">135</div>
<div class="line number136 index135 alt1">136</div>
<div class="line number137 index136 alt2">137</div>
<div class="line number138 index137 alt1">138</div>
<div class="line number139 index138 alt2">139</div>
<div class="line number140 index139 alt1">140</div>
<div class="line number141 index140 alt2">141</div>
<div class="line number142 index141 alt1">142</div>
<div class="line number143 index142 alt2">143</div>
<div class="line number144 index143 alt1">144</div>
<div class="line number145 index144 alt2">145</div>
<div class="line number146 index145 alt1">146</div>
<div class="line number147 index146 alt2">147</div>
<div class="line number148 index147 alt1">148</div>
<div class="line number149 index148 alt2">149</div>
<div class="line number150 index149 alt1">150</div>
<div class="line number151 index150 alt2">151</div>
<div class="line number152 index151 alt1">152</div>
<div class="line number153 index152 alt2">153</div>
<div class="line number154 index153 alt1">154</div>
<div class="line number155 index154 alt2">155</div>
<div class="line number156 index155 alt1">156</div>
<div class="line number157 index156 alt2">157</div>
<div class="line number158 index157 alt1">158</div>
<div class="line number159 index158 alt2">159</div>
<div class="line number160 index159 alt1">160</div>
<div class="line number161 index160 alt2">161</div>
<div class="line number162 index161 alt1">162</div>
<div class="line number163 index162 alt2">163</div>
<div class="line number164 index163 alt1">164</div>
<div class="line number165 index164 alt2">165</div>
<div class="line number166 index165 alt1">166</div>
<div class="line number167 index166 alt2">167</div>
<div class="line number168 index167 alt1">168</div>
<div class="line number169 index168 alt2">169</div>
<div class="line number170 index169 alt1">170</div>
<div class="line number171 index170 alt2">171</div>
<div class="line number172 index171 alt1">172</div>
<div class="line number173 index172 alt2">173</div>
<div class="line number174 index173 alt1">174</div>
<div class="line number175 index174 alt2">175</div>
<div class="line number176 index175 alt1">176</div>
<div class="line number177 index176 alt2">177</div>
<div class="line number178 index177 alt1">178</div>
<div class="line number179 index178 alt2">179</div>
<div class="line number180 index179 alt1">180</div>
<div class="line number181 index180 alt2">181</div>
<div class="line number182 index181 alt1">182</div>
<div class="line number183 index182 alt2">183</div>
<div class="line number184 index183 alt1">184</div>
<div class="line number185 index184 alt2">185</div>
<div class="line number186 index185 alt1">186</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="javascript plain">jQuery 的选择器可谓之强大无比，这里简单地总结一下常用的元素查找方法&nbsp;
</code></div>
<div class="line number2 index1 alt1"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number3 index2 alt2"><code class="javascript plain">$(</code><code class="javascript string">&quot;#myELement&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp; 选择id&#20540;等于myElement的元素，id&#20540;不能重复在文档中只能有一个id&#20540;是myElement所以得到的是唯一的元素&nbsp;
</code></div>
<div class="line number4 index3 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;div&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有的div标签元素，返回div元素数组&nbsp;
</code></div>
<div class="line number5 index4 alt2"><code class="javascript plain">$(</code><code class="javascript string">&quot;.myClass&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择使用myClass类的css的所有元素&nbsp;
</code></div>
<div class="line number6 index5 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;*&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择文档中的所有的元素，可以运用多种的选择方式进行联合选择：例如$(</code><code class="javascript string">&quot;#myELement,div,.myclass&quot;</code><code class="javascript plain">)&nbsp;
</code></div>
<div class="line number7 index6 alt2"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number8 index7 alt1"><code class="javascript plain">层叠选择器：&nbsp; </code>
</div>
<div class="line number9 index8 alt2"><code class="javascript plain">$(</code><code class="javascript string">&quot;form input&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有的form元素中的input元素&nbsp;
</code></div>
<div class="line number10 index9 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;#main &gt; *&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择id&#20540;为main的所有的子元素&nbsp;
</code></div>
<div class="line number11 index10 alt2"><code class="javascript plain">$(</code><code class="javascript string">&quot;label &#43; input&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp; 选择所有的label元素的下一个input元素节点，经测试选择器返回的是label标签后面直接跟一个input标签的所有input标签元素&nbsp;
</code></div>
<div class="line number12 index11 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;#prev ~ div&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 同胞选择器，该选择器返回的为id为prev的标签元素的所有的属于同一个父元素的div标签&nbsp;
</code></div>
<div class="line number13 index12 alt2"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number14 index13 alt1"><code class="javascript plain">基本过滤选择器：&nbsp; </code>
</div>
<div class="line number15 index14 alt2"><code class="javascript plain">$(</code><code class="javascript string">&quot;tr:first&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有tr元素的第一个&nbsp;
</code></div>
<div class="line number16 index15 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;tr:last&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有tr元素的最后一个&nbsp;
</code></div>
<div class="line number17 index16 alt2"><code class="javascript plain">$(</code><code class="javascript string">&quot;input:not(:checked) &#43; span&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;
</code></div>
<div class="line number18 index17 alt1"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number19 index18 alt2"><code class="javascript plain">过滤掉：checked的选择器的所有的input元素&nbsp;
</code></div>
<div class="line number20 index19 alt1"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number21 index20 alt2"><code class="javascript plain">$(</code><code class="javascript string">&quot;tr:even&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有的tr元素的第0，2，4... ...个元素（注意：因为所选择的多个元素时为数组，所以序号是从0开始）&nbsp;
</code></div>
<div class="line number22 index21 alt1"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number23 index22 alt2"><code class="javascript plain">$(</code><code class="javascript string">&quot;tr:odd&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有的tr元素的第1，3，5... ...个元素&nbsp;
</code></div>
<div class="line number24 index23 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;td:eq(2)&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有的td元素中序号为2的那个td元素&nbsp;
</code></div>
<div class="line number25 index24 alt2"><code class="javascript plain">$(</code><code class="javascript string">&quot;td:gt(4)&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择td元素中序号大于4的所有td元素&nbsp;
</code></div>
<div class="line number26 index25 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;td:ll(4)&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择td元素中序号小于4的所有的td元素&nbsp;
</code></div>
<div class="line number27 index26 alt2"><code class="javascript plain">$(</code><code class="javascript string">&quot;:header&quot;</code><code class="javascript plain">)&nbsp;
</code></div>
<div class="line number28 index27 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;div:animated&quot;</code><code class="javascript plain">)&nbsp;
</code></div>
<div class="line number29 index28 alt2"><code class="javascript plain">内容过滤选择器：&nbsp; </code>
</div>
<div class="line number30 index29 alt1"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number31 index30 alt2"><code class="javascript plain">$(</code><code class="javascript string">&quot;div:contains('John')&quot;</code><code class="javascript plain">) 选择所有div中含有John文本的元素&nbsp;
</code></div>
<div class="line number32 index31 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;td:empty&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有的为空（也不包括文本节点）的td元素的数组&nbsp;
</code></div>
<div class="line number33 index32 alt2"><code class="javascript plain">$(</code><code class="javascript string">&quot;div:has(p)&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有含有p标签的div元素&nbsp;
</code></div>
<div class="line number34 index33 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;td:parent&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有的以td为父节点的元素数组&nbsp;
</code></div>
<div class="line number35 index34 alt2"><code class="javascript plain">可视化过滤选择器：&nbsp;
</code></div>
<div class="line number36 index35 alt1"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number37 index36 alt2"><code class="javascript plain">$(</code><code class="javascript string">&quot;div:hidden&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有的被hidden的div元素&nbsp;
</code></div>
<div class="line number38 index37 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;div:visible&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有的可视化的div元素&nbsp;
</code></div>
<div class="line number39 index38 alt2"><code class="javascript plain">属性过滤选择器：&nbsp; </code>
</div>
<div class="line number40 index39 alt1"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number41 index40 alt2"><code class="javascript plain">$(</code><code class="javascript string">&quot;div[id]&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有含有id属性的div元素&nbsp;
</code></div>
<div class="line number42 index41 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;input[name='newsletter']&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp; 选择所有的name属性等于</code><code class="javascript string">'newsletter'</code><code class="javascript plain">的input元素&nbsp;
</code></div>
<div class="line number43 index42 alt2"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number44 index43 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;input[name!='newsletter']&quot;</code><code class="javascript plain">) 选择所有的name属性不等于</code><code class="javascript string">'newsletter'</code><code class="javascript plain">的input元素&nbsp;
</code></div>
<div class="line number45 index44 alt2"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number46 index45 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;input[name^='news']&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有的name属性以</code><code class="javascript string">'news'</code><code class="javascript plain">开头的input元素&nbsp;
</code></div>
<div class="line number47 index46 alt2"><code class="javascript plain">$(</code><code class="javascript string">&quot;input[name$='news']&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有的name属性以</code><code class="javascript string">'news'</code><code class="javascript plain">结尾的input元素&nbsp;
</code></div>
<div class="line number48 index47 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;input[name*='man']&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有的name属性包含</code><code class="javascript string">'news'</code><code class="javascript plain">的input元素&nbsp;
</code></div>
<div class="line number49 index48 alt2"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number50 index49 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;input[id][name$='man']&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp; 可以使用多个属性进行联合选择，该选择器是得到所有的含有id属性并且那么属性以man结尾的元素&nbsp;
</code></div>
<div class="line number51 index50 alt2"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number52 index51 alt1"><code class="javascript plain">子元素过滤选择器：&nbsp;
</code></div>
<div class="line number53 index52 alt2"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number54 index53 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;ul li:nth-child(2)&quot;</code><code class="javascript plain">),$(</code><code class="javascript string">&quot;ul li:nth-child(odd)&quot;</code><code class="javascript plain">),$(</code><code class="javascript string">&quot;ul
 li:nth-child(3n &#43; 1)&quot;</code><code class="javascript plain">)&nbsp; </code></div>
<div class="line number55 index54 alt2"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number56 index55 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;div span:first-child&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 返回所有的div元素的第一个子节点的数组&nbsp;
</code></div>
<div class="line number57 index56 alt2"><code class="javascript plain">$(</code><code class="javascript string">&quot;div span:last-child&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 返回所有的div元素的最后一个节点的数组&nbsp;
</code></div>
<div class="line number58 index57 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;div button:only-child&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 返回所有的div中只有唯一一个子节点的所有子节点的数组&nbsp;
</code></div>
<div class="line number59 index58 alt2"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number60 index59 alt1"><code class="javascript plain">表单元素选择器：&nbsp; </code>
</div>
<div class="line number61 index60 alt2"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number62 index61 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;:input&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有的表单输入元素，包括input, textarea, select 和 button&nbsp;
</code></div>
<div class="line number63 index62 alt2"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number64 index63 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;:text&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有的text input元素&nbsp;
</code></div>
<div class="line number65 index64 alt2"><code class="javascript plain">$(</code><code class="javascript string">&quot;:password&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有的password input元素&nbsp;
</code></div>
<div class="line number66 index65 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;:radio&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有的radio input元素&nbsp;
</code></div>
<div class="line number67 index66 alt2"><code class="javascript plain">$(</code><code class="javascript string">&quot;:checkbox&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有的checkbox input元素&nbsp;
</code></div>
<div class="line number68 index67 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;:submit&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有的submit input元素&nbsp;
</code></div>
<div class="line number69 index68 alt2"><code class="javascript plain">$(</code><code class="javascript string">&quot;:image&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有的image input元素&nbsp;
</code></div>
<div class="line number70 index69 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;:reset&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有的reset input元素&nbsp;
</code></div>
<div class="line number71 index70 alt2"><code class="javascript plain">$(</code><code class="javascript string">&quot;:button&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有的button input元素&nbsp;
</code></div>
<div class="line number72 index71 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;:file&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有的file input元素&nbsp;
</code></div>
<div class="line number73 index72 alt2"><code class="javascript plain">$(</code><code class="javascript string">&quot;:hidden&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有类型为hidden的input元素或表单的隐藏域&nbsp;
</code></div>
<div class="line number74 index73 alt1"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number75 index74 alt2"><code class="javascript plain">表单元素过滤选择器：&nbsp;
</code></div>
<div class="line number76 index75 alt1"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number77 index76 alt2"><code class="javascript plain">$(</code><code class="javascript string">&quot;:enabled&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有的可操作的表单元素&nbsp;
</code></div>
<div class="line number78 index77 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;:disabled&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有的不可操作的表单元素&nbsp;
</code></div>
<div class="line number79 index78 alt2"><code class="javascript plain">$(</code><code class="javascript string">&quot;:checked&quot;</code><code class="javascript plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选择所有的被checked的表单元素&nbsp;
</code></div>
<div class="line number80 index79 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;select option:selected&quot;</code><code class="javascript plain">) 选择所有的select 的子元素中被selected的元素&nbsp;
</code></div>
<div class="line number81 index80 alt2"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number82 index81 alt1"><code class="javascript spaces">&nbsp;&nbsp;</code>&nbsp;</div>
<div class="line number83 index82 alt2"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number84 index83 alt1"><code class="javascript plain">选取一个 name 为”S_03_22″的input text框的上一个td的text&#20540;
</code></div>
<div class="line number85 index84 alt2"><code class="javascript plain">$(”input[@ name =S_03_22]“).parent().prev().text()&nbsp;
</code></div>
<div class="line number86 index85 alt1"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number87 index86 alt2"><code class="javascript plain">名字以”S_”开始，并且不是以”_R”结尾的
</code></div>
<div class="line number88 index87 alt1"><code class="javascript plain">$(”input[@ name ^=</code><code class="javascript string">'S_'</code><code class="javascript plain">]“).not(”[@ name $=</code><code class="javascript string">'_R'</code><code class="javascript plain">]“)&nbsp;
</code></div>
<div class="line number89 index88 alt2"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number90 index89 alt1"><code class="javascript plain">一个名为 radio_01的radio所选的&#20540;
</code></div>
<div class="line number91 index90 alt2"><code class="javascript plain">$(”input[@ name =radio_01][@checked]“).val();&nbsp;
</code></div>
<div class="line number92 index91 alt1"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number93 index92 alt2"><code class="javascript spaces">&nbsp;&nbsp;</code>&nbsp;</div>
<div class="line number94 index93 alt1"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number95 index94 alt2"><code class="javascript spaces">&nbsp;&nbsp;</code>&nbsp;</div>
<div class="line number96 index95 alt1"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number97 index96 alt2"><code class="javascript plain">$(</code><code class="javascript string">&quot;A B&quot;</code><code class="javascript plain">) 查找A元素下面的所有子节点，包括非直接子节点
</code></div>
<div class="line number98 index97 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;A&gt;B&quot;</code><code class="javascript plain">) 查找A元素下面的直接子节点
</code></div>
<div class="line number99 index98 alt2"><code class="javascript plain">$(</code><code class="javascript string">&quot;A&#43;B&quot;</code><code class="javascript plain">) 查找A元素后面的兄弟节点，包括非直接子节点
</code></div>
<div class="line number100 index99 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;A~B&quot;</code><code class="javascript plain">) 查找A元素后面的兄弟节点，不包括非直接子节点&nbsp;
</code></div>
<div class="line number101 index100 alt2"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number102 index101 alt1"><code class="javascript plain">1. $(</code><code class="javascript string">&quot;A B&quot;</code><code class="javascript plain">) 查找A元素下面的所有子节点，包括非直接子节点&nbsp;
</code></div>
<div class="line number103 index102 alt2"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number104 index103 alt1"><code class="javascript plain">例子：找到表单中所有的 input 元素&nbsp;
</code></div>
<div class="line number105 index104 alt2"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number106 index105 alt1"><code class="javascript plain">HTML 代码:&nbsp;
</code></div>
<div class="line number107 index106 alt2"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number108 index107 alt1"><code class="javascript plain">&lt;form&gt; </code>
</div>
<div class="line number109 index108 alt2"><code class="javascript plain">&lt;label&gt;Name:&lt;/label&gt;
</code></div>
<div class="line number110 index109 alt1"><code class="javascript plain">&lt;input name=</code><code class="javascript string">&quot;name&quot;</code>
<code class="javascript plain">/&gt; </code></div>
<div class="line number111 index110 alt2"><code class="javascript plain">&lt;fieldset&gt;
</code></div>
<div class="line number112 index111 alt1"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript plain">&lt;label&gt;Newsletter:&lt;/label&gt;
</code></div>
<div class="line number113 index112 alt2"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript plain">&lt;input name=</code><code class="javascript string">&quot;newsletter&quot;</code>
<code class="javascript plain">/&gt; </code></div>
<div class="line number114 index113 alt1"><code class="javascript plain">&lt;/fieldset&gt;
</code></div>
<div class="line number115 index114 alt2"><code class="javascript plain">&lt;/form&gt; </code>
</div>
<div class="line number116 index115 alt1"><code class="javascript plain">&lt;input name=</code><code class="javascript string">&quot;none&quot;</code>
<code class="javascript plain">/&gt;&nbsp; </code></div>
<div class="line number117 index116 alt2"><code class="javascript plain">jQuery 代码:&nbsp;
</code></div>
<div class="line number118 index117 alt1"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number119 index118 alt2"><code class="javascript plain">$(</code><code class="javascript string">&quot;form input&quot;</code><code class="javascript plain">)&nbsp;
</code></div>
<div class="line number120 index119 alt1"><code class="javascript plain">结果:&nbsp; </code>
</div>
<div class="line number121 index120 alt2"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number122 index121 alt1"><code class="javascript plain">[ &lt;input name=</code><code class="javascript string">&quot;name&quot;</code>
<code class="javascript plain">/&gt;, &lt;input name=</code><code class="javascript string">&quot;newsletter&quot;</code>
<code class="javascript plain">/&gt; ]&nbsp; </code></div>
<div class="line number123 index122 alt2"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number124 index123 alt1"><code class="javascript plain">2. $(</code><code class="javascript string">&quot;A&gt;B&quot;</code><code class="javascript plain">) 查找A元素下面的直接子节点&nbsp;
</code></div>
<div class="line number125 index124 alt2"><code class="javascript plain">例子：匹配表单中所有的子级input元素。&nbsp;
</code></div>
<div class="line number126 index125 alt1"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number127 index126 alt2"><code class="javascript plain">HTML 代码:&nbsp;
</code></div>
<div class="line number128 index127 alt1"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number129 index128 alt2"><code class="javascript plain">&lt;form&gt; </code>
</div>
<div class="line number130 index129 alt1"><code class="javascript plain">&lt;label&gt;Name:&lt;/label&gt;
</code></div>
<div class="line number131 index130 alt2"><code class="javascript plain">&lt;input name=</code><code class="javascript string">&quot;name&quot;</code>
<code class="javascript plain">/&gt; </code></div>
<div class="line number132 index131 alt1"><code class="javascript plain">&lt;fieldset&gt;
</code></div>
<div class="line number133 index132 alt2"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript plain">&lt;label&gt;Newsletter:&lt;/label&gt;
</code></div>
<div class="line number134 index133 alt1"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript plain">&lt;input name=</code><code class="javascript string">&quot;newsletter&quot;</code>
<code class="javascript plain">/&gt; </code></div>
<div class="line number135 index134 alt2"><code class="javascript plain">&lt;/fieldset&gt;
</code></div>
<div class="line number136 index135 alt1"><code class="javascript plain">&lt;/form&gt; </code>
</div>
<div class="line number137 index136 alt2"><code class="javascript plain">&lt;input name=</code><code class="javascript string">&quot;none&quot;</code>
<code class="javascript plain">/&gt;&nbsp; </code></div>
<div class="line number138 index137 alt1"><code class="javascript plain">jQuery 代码:&nbsp;
</code></div>
<div class="line number139 index138 alt2"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number140 index139 alt1"><code class="javascript plain">$(</code><code class="javascript string">&quot;form &gt; input&quot;</code><code class="javascript plain">)&nbsp;
</code></div>
<div class="line number141 index140 alt2"><code class="javascript plain">结果:&nbsp; </code>
</div>
<div class="line number142 index141 alt1"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number143 index142 alt2"><code class="javascript plain">[ &lt;input name=</code><code class="javascript string">&quot;name&quot;</code>
<code class="javascript plain">/&gt; ]&nbsp; </code></div>
<div class="line number144 index143 alt1"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number145 index144 alt2"><code class="javascript plain">3. $(</code><code class="javascript string">&quot;A&#43;B&quot;</code><code class="javascript plain">) 查找A元素后面的兄弟节点，包括非直接子节点&nbsp;
</code></div>
<div class="line number146 index145 alt1"><code class="javascript plain">例子：匹配所有跟在 label 后面的 input 元素&nbsp;
</code></div>
<div class="line number147 index146 alt2"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number148 index147 alt1"><code class="javascript plain">HTML 代码:&nbsp;
</code></div>
<div class="line number149 index148 alt2"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number150 index149 alt1"><code class="javascript plain">&lt;form&gt; </code>
</div>
<div class="line number151 index150 alt2"><code class="javascript plain">&lt;label&gt;Name:&lt;/label&gt;
</code></div>
<div class="line number152 index151 alt1"><code class="javascript plain">&lt;input name=</code><code class="javascript string">&quot;name&quot;</code>
<code class="javascript plain">/&gt; </code></div>
<div class="line number153 index152 alt2"><code class="javascript plain">&lt;fieldset&gt;
</code></div>
<div class="line number154 index153 alt1"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript plain">&lt;label&gt;Newsletter:&lt;/label&gt;
</code></div>
<div class="line number155 index154 alt2"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript plain">&lt;input name=</code><code class="javascript string">&quot;newsletter&quot;</code>
<code class="javascript plain">/&gt; </code></div>
<div class="line number156 index155 alt1"><code class="javascript plain">&lt;/fieldset&gt;
</code></div>
<div class="line number157 index156 alt2"><code class="javascript plain">&lt;/form&gt; </code>
</div>
<div class="line number158 index157 alt1"><code class="javascript plain">&lt;input name=</code><code class="javascript string">&quot;none&quot;</code>
<code class="javascript plain">/&gt;&nbsp; </code></div>
<div class="line number159 index158 alt2"><code class="javascript plain">jQuery 代码:&nbsp;
</code></div>
<div class="line number160 index159 alt1"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number161 index160 alt2"><code class="javascript plain">$(</code><code class="javascript string">&quot;label &#43; input&quot;</code><code class="javascript plain">)&nbsp;
</code></div>
<div class="line number162 index161 alt1"><code class="javascript plain">结果:&nbsp; </code>
</div>
<div class="line number163 index162 alt2"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number164 index163 alt1"><code class="javascript plain">[ &lt;input name=</code><code class="javascript string">&quot;name&quot;</code>
<code class="javascript plain">/&gt;, &lt;input name=</code><code class="javascript string">&quot;newsletter&quot;</code>
<code class="javascript plain">/&gt; ]&nbsp; </code></div>
<div class="line number165 index164 alt2"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number166 index165 alt1"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number167 index166 alt2"><code class="javascript plain">4. $(</code><code class="javascript string">&quot;A~B&quot;</code><code class="javascript plain">) 查找A元素后面的兄弟节点，不包括非直接子节点&nbsp;
</code></div>
<div class="line number168 index167 alt1"><code class="javascript plain">例子：找到所有与表单同辈的 input 元素&nbsp;
</code></div>
<div class="line number169 index168 alt2"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number170 index169 alt1"><code class="javascript plain">HTML 代码:&nbsp;
</code></div>
<div class="line number171 index170 alt2"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number172 index171 alt1"><code class="javascript plain">&lt;form&gt; </code>
</div>
<div class="line number173 index172 alt2"><code class="javascript plain">&lt;label&gt;Name:&lt;/label&gt;
</code></div>
<div class="line number174 index173 alt1"><code class="javascript plain">&lt;input name=</code><code class="javascript string">&quot;name&quot;</code>
<code class="javascript plain">/&gt; </code></div>
<div class="line number175 index174 alt2"><code class="javascript plain">&lt;fieldset&gt;
</code></div>
<div class="line number176 index175 alt1"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript plain">&lt;label&gt;Newsletter:&lt;/label&gt;
</code></div>
<div class="line number177 index176 alt2"><code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="javascript plain">&lt;input name=</code><code class="javascript string">&quot;newsletter&quot;</code>
<code class="javascript plain">/&gt; </code></div>
<div class="line number178 index177 alt1"><code class="javascript plain">&lt;/fieldset&gt;
</code></div>
<div class="line number179 index178 alt2"><code class="javascript plain">&lt;/form&gt; </code>
</div>
<div class="line number180 index179 alt1"><code class="javascript plain">&lt;input name=</code><code class="javascript string">&quot;none&quot;</code>
<code class="javascript plain">/&gt;&nbsp; </code></div>
<div class="line number181 index180 alt2"><code class="javascript plain">jQuery 代码:&nbsp;
</code></div>
<div class="line number182 index181 alt1"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number183 index182 alt2"><code class="javascript plain">$(</code><code class="javascript string">&quot;form ~ input&quot;</code><code class="javascript plain">)&nbsp;
</code></div>
<div class="line number184 index183 alt1"><code class="javascript plain">结果:&nbsp; </code>
</div>
<div class="line number185 index184 alt2"><code class="javascript spaces">&nbsp;</code>&nbsp;</div>
<div class="line number186 index185 alt1"><code class="javascript plain">[ &lt;input name=</code><code class="javascript string">&quot;none&quot;</code>
<code class="javascript plain">/&gt; ]</code></div>
<div class="line number186 index185 alt1"><code class="javascript plain"></code>&nbsp;</div>
<div class="line number186 index185 alt1"><code class="javascript plain">原<a href="http://www.cnblogs.com/onlys/articles/jQuery.html">http://www.cnblogs.com/onlys/articles/jQuery.html</a></code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>

            <div>
                作者：Killer_ZR 发表于2013/5/8 0:37:59 <a href="http://blog.csdn.net/killer_zr/article/details/8898200">原文链接</a>
            </div>
            <div>
            阅读：502 评论：1 <a href="http://blog.csdn.net/killer_zr/article/details/8898200#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]Java 单例模式详解]]></title>
        <link>http://blog.csdn.net/killer_zr/article/details/8857283</link>
        <guid>http://blog.csdn.net/killer_zr/article/details/8857283</guid>
        <author>Killer_ZR</author>
        <pubDate>2013/4/27 7:57:21</pubDate>
        <description><![CDATA[
            
<p>&nbsp;</p>
<h1><a id="cb_post_title_url" href="http://www.cnblogs.com/whgw/archive/2011/10/05/2199535.html">Java 单例模式详解</a>
</h1>
<div>
<div id="cnblogs_post_body">
<p>概念：<br>
　　java中单例模式是一种常见的设计模式，<span style="color:#800000">单例模式分三种：懒汉式单例、饿汉式单例、登记式单例三种。<br>
</span>　　<span style="color:#ff6600">单例模式有一下特点：<br>
</span>　　<span style="color:#008000">1</span>、单例类只能有一个实例。<br>
　　2、单例类必须自己自己创建自己的唯一实例。<br>
　　3、单例类必须给所有其他对象提供这一实例。<br>
<span style="color:black"><span size="3">　　<span style="color:#800000">单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。</span><span style="color:black">在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程序对象常被设计成单例。这些应用都或多或少具有资源管理器的功能。每台计算机可以有若干个打印机，但只能有一个</span><span style="color:black">Printer
 Spooler</span><span style="color:black">，以避免两个打印作业同时输出到打印机中。每台计算机可以有若干通信端口，系统应当集中管理这些通信端口，以避免一个通信端口同时被两个请求同时调用。总之，选择单例模式就是为了避免不一致状态，避免政出多头。</span><span style="color:#008000"><span style="color:black"><span size="3"><span style="color:#008000"></span></span></span></span></span></span></p>
<p align="left">首先看一个经典的单例实现。</p>
<p align="left"><strong><span style="color:#7f0055">public</span> <span style="color:#7f0055">
class</span></strong><span style="color:black"> Singleton {</span></p>
<p align="left"><span style="color:black">&nbsp;&nbsp;&nbsp; </span><strong><span style="color:#7f0055">private</span>
<span style="color:#7f0055">static</span></strong><span style="color:black"> Singleton
</span><em><span style="color:#0000c0">uniqueInstance</span></em><span style="color:black"> =
</span><strong><span style="color:#7f0055">null</span></strong><span style="color:black">;</span></p>
<p align="left">&nbsp;</p>
<p align="left"><span style="color:black">&nbsp;&nbsp;&nbsp; </span><strong><span style="color:#7f0055">private</span></strong><span style="color:black"> Singleton() {</span></p>
<p align="left"><span style="color:black">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color:#3f7f5f">// Exists only to defeat instantiation.</span></p>
<p align="left"><span style="color:black">&nbsp;&nbsp;&nbsp; }</span></p>
<p align="left">&nbsp;</p>
<p align="left"><span style="color:black">&nbsp;&nbsp;&nbsp; </span><strong><span style="color:#7f0055">public</span>
<span style="color:#7f0055">static</span></strong><span style="color:black"> Singleton getInstance() {</span></p>
<p align="left"><span style="color:black">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><strong><span style="color:#7f0055">if</span></strong><span style="color:black"> (</span><em><span style="color:#0000c0">uniqueInstance</span></em><span style="color:black"> ==
</span><strong><span style="color:#7f0055">null</span></strong><span style="color:black">) {</span></p>
<p align="left"><span style="color:black">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><em><span style="color:#0000c0">uniqueInstance</span></em><span style="color:black"> =
</span><strong><span style="color:#7f0055">new</span></strong><span style="color:black"> Singleton();</span></p>
<p align="left"><span style="color:black">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>
<p align="left"><span style="color:black">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><strong><span style="color:#7f0055">return</span></strong>
<em><span style="color:#0000c0">uniqueInstance</span></em><span style="color:black">;</span></p>
<p align="left"><span style="color:black">&nbsp;&nbsp;&nbsp; }</span></p>
<p align="left"><span style="color:black">&nbsp;&nbsp;&nbsp; </span><span style="color:#3f7f5f">// Other methods...</span></p>
<p align="left"><span style="color:black">}</span></p>
<p align="left"><span style="color:black"><span>Singleton</span></span><span style="color:black">通过将构造方法限定为</span><span style="color:black"><span>private</span></span><span style="color:black">避免了类在外部被实例化，在同一个虚拟机范围内，</span><span style="color:black"><span>Singleton</span></span><span style="color:black">的唯一实例只能通过</span><span style="color:black"><span>getInstance()</span></span><span style="color:black">方法访问。（事实上，<span style="color:#0000ff"><strong>通过</strong></span></span><span style="color:#0000ff"><strong><span>Java</span></strong></span>反射机制是能够实例化构造方法为<span>private</span>的类的，那基本上会使所有的<span>Java</span><span style="color:black"><span style="color:#0000ff"><strong>单例实现失效。</strong></span>此问题在此处不做讨论，姑且掩耳盗铃地认为反射机制不存在。）</span></p>
<p align="left"><span style="color:black">但是以上实现没有考虑线程安全问题。所谓线程安全是指：如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的&#20540;也和预期的是一样的，就是线程安全的。或者说：一个类或者程序所提供的接口对于线程来说是原子操作或者多个线程之间的切换不会导致该接口的执行结果存在二义性</span><span style="color:black"><span>,</span></span><span style="color:black">也就是说我们不用考虑同步的问题。显然以上实现并不满足线程安全的要求，在并发环境下很可能出现多个</span><span style="color:black"><span>Singleton</span></span><span style="color:black">实例。</span></p>
<div>
<div><a title="复制代码" href=""><img alt="复制代码" src="http://common.cnblogs.com/images/copycode.gif"></a></div>
<pre><span style="color:#008080"> 1</span> <span style="color:#0000ff">public</span> <span style="color:#0000ff">class</span> TestStream {
<span style="color:#008080"> 2</span>     <span style="color:#0000ff">private</span> String name;
<span style="color:#008080"> 3</span>     <span style="color:#0000ff">public</span> String getName() {
<span style="color:#008080"> 4</span>         <span style="color:#0000ff">return</span> name;
<span style="color:#008080"> 5</span>     }
<span style="color:#008080"> 6</span>     <span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> setName(String name) {
<span style="color:#008080"> 7</span>         <span style="color:#0000ff">this</span>.name = name;
<span style="color:#008080"> 8</span>     } 
<span style="color:#008080"> 9</span>     <span style="color:#008000">//</span><span style="color:#008000">该类只能有一个实例</span><span style="color:#008000">
</span><span style="color:#008080">10</span>     <span style="color:#0000ff">private</span> TestStream(){}    <span style="color:#008000">//</span><span style="color:#008000">私有无参构造方法
</span><span style="color:#008080">11</span> <span style="color:#008000">//</span><span style="color:#008000">该类必须自行创建
</span><span style="color:#008080">12</span> <span style="color:#008000">//</span><span style="color:#008000">有2种方式</span><span style="color:#008000">
</span><span style="color:#008080">13</span>     <span style="color:#008000">/*</span><span style="color:#008000">private static final TestStream ts=new TestStream();</span><span style="color:#008000">*/</span>
<span style="color:#008080">14</span>     <span style="color:#0000ff">private</span> <span style="color:#0000ff">static</span> TestStream ts1=<span style="color:#0000ff">null</span>;
<span style="color:#008080">15</span>     <span style="color:#008000">//</span><span style="color:#008000">这个类必须自动向整个系统提供这个实例对象</span><span style="color:#008000">
</span><span style="color:#008080">16</span>     <span style="color:#0000ff">public</span> <span style="color:#0000ff">static</span> TestStream getTest(){
<span style="color:#008080">17</span>         <span style="color:#0000ff">if</span>(ts1==<span style="color:#0000ff">null</span>){
<span style="color:#008080">18</span>             ts1=<span style="color:#0000ff">new</span> TestStream();
<span style="color:#008080">19</span>         }
<span style="color:#008080">20</span>         <span style="color:#0000ff">return</span> ts1;
<span style="color:#008080">21</span>     }
<span style="color:#008080">22</span>     <span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> getInfo(){
<span style="color:#008080">23</span>         System.out.println(&quot;output message &quot;&#43;name);
<span style="color:#008080">24</span>     }
<span style="color:#008080">25</span> }</pre>
<div><a title="复制代码" href=""><img alt="复制代码" src="http://common.cnblogs.com/images/copycode.gif"></a></div>
</div>
<div>
<div><a title="复制代码" href=""><img alt="复制代码" src="http://common.cnblogs.com/images/copycode.gif"></a></div>
<pre><span style="color:#008080"> 1</span> <span style="color:#0000ff">public</span> <span style="color:#0000ff">class</span> TestMain {
<span style="color:#008080"> 2</span>     <span style="color:#0000ff">public</span> <span style="color:#0000ff">static</span> <span style="color:#0000ff">void</span> main(String [] args){
<span style="color:#008080"> 3</span>         TestStream s=TestStream.getTest();
<span style="color:#008080"> 4</span>         s.setName(&quot;张孝祥&quot;);
<span style="color:#008080"> 5</span>         System.out.println(s.getName());
<span style="color:#008080"> 6</span>         TestStream s1=TestStream.getTest();
<span style="color:#008080"> 7</span>         s1.setName(&quot;张孝祥&quot;);
<span style="color:#008080"> 8</span>         System.out.println(s1.getName());
<span style="color:#008080"> 9</span>         s.getInfo();
<span style="color:#008080">10</span>         s1.getInfo();
<span style="color:#008080">11</span>         <span style="color:#0000ff">if</span>(s==s1){
<span style="color:#008080">12</span>             System.out.println(&quot;创建的是同一个实例&quot;);
<span style="color:#008080">13</span>         }<span style="color:#0000ff">else</span> <span style="color:#0000ff">if</span>(s!=s1){
<span style="color:#008080">14</span>             System.out.println(&quot;创建的不是同一个实例&quot;);
<span style="color:#008080">15</span>         }<span style="color:#0000ff">else</span>{
<span style="color:#008080">16</span>             System.out.println(&quot;application error&quot;);
<span style="color:#008080">17</span>         }
<span style="color:#008080">18</span>     }
<span style="color:#008080">19</span> }</pre>
<div><a title="复制代码" href=""><img alt="复制代码" src="http://common.cnblogs.com/images/copycode.gif"></a></div>
</div>
<p>运行结果：<br>
　　张孝祥<br>
　　张孝祥<br>
　　output message 张孝祥<br>
　　output message 张孝祥<br>
　　创建的是同一个实例</p>
<p>结论：由结果可以得知单例模式为一个面向对象的应用程序提供了对象惟一的访问点，不管它实现何种功能，<span style="color:#800000">整个应用程序都会同享一个实例对象</span>。</p>
<p><span style="color:#4d4d4d">1.</span><span style="color:#4d4d4d">饿汉式单例类</span></p>
<div>
<div><a title="复制代码" href=""><img alt="复制代码" src="http://common.cnblogs.com/images/copycode.gif"></a></div>
<pre><span style="color:#008080"> 1</span> <span style="color:#008000">//</span><span style="color:#008000">饿汉式单例类.在类初始化时，已经自行实例化 </span><span style="color:#008000">
</span><span style="color:#008080"> 2</span> <span style="color:#0000ff">public</span> <span style="color:#0000ff">class</span> Singleton1 {
<span style="color:#008080"> 3</span>     <span style="color:#008000">//</span><span style="color:#008000">私有的默认构造子</span><span style="color:#008000">
</span><span style="color:#008080"> 4</span>     <span style="color:#0000ff">private</span> Singleton1() {}
<span style="color:#008080"> 5</span>     <span style="color:#008000">//</span><span style="color:#008000">已经自行实例化 </span><span style="color:#008000">
</span><span style="color:#008080"> 6</span>     <span style="color:#0000ff">private</span> <span style="color:#0000ff">static</span> <span style="color:#0000ff">final</span> Singleton1 single = <span style="color:#0000ff">new</span> Singleton1();
<span style="color:#008080"> 7</span>     <span style="color:#008000">//</span><span style="color:#008000">静态工厂方法 </span><span style="color:#008000">
</span><span style="color:#008080"> 8</span>     <span style="color:#0000ff">public</span> <span style="color:#0000ff">static</span> Singleton1 getInstance() {
<span style="color:#008080"> 9</span>         <span style="color:#0000ff">return</span> single;
<span style="color:#008080">10</span>     }
<span style="color:#008080">11</span> }</pre>
<div><a title="复制代码" href=""><img alt="复制代码" src="http://common.cnblogs.com/images/copycode.gif"></a></div>
</div>
<p><span style="color:#4d4d4d">2.</span><span style="color:#4d4d4d">懒汉式单例类</span></p>
<div>
<div><a title="复制代码" href=""><img alt="复制代码" src="http://common.cnblogs.com/images/copycode.gif"></a></div>
<pre><span style="color:#008080"> 1</span> <span style="color:#008000">//</span><span style="color:#008000">懒汉式单例类.在第一次调用的时候实例化 </span><span style="color:#008000">
</span><span style="color:#008080"> 2</span> <span style="color:#0000ff">public</span> <span style="color:#0000ff">class</span> Singleton2 {
<span style="color:#008080"> 3</span>     <span style="color:#008000">//</span><span style="color:#008000">私有的默认构造子</span><span style="color:#008000">
</span><span style="color:#008080"> 4</span>     <span style="color:#0000ff">private</span> Singleton2() {}
<span style="color:#008080"> 5</span>     <span style="color:#008000">//</span><span style="color:#008000">注意，这里没有final    </span><span style="color:#008000">
</span><span style="color:#008080"> 6</span>     <span style="color:#0000ff">private</span> <span style="color:#0000ff">static</span> Singleton2 single=<span style="color:#0000ff">null</span>;
<span style="color:#008080"> 7</span>     <span style="color:#008000">//</span><span style="color:#008000">静态工厂方法 </span><span style="color:#008000">
</span><span style="color:#008080"> 8</span>     <span style="color:#0000ff">public</span> <span style="color:#0000ff">synchronized</span>  <span style="color:#0000ff">static</span> Singleton2 getInstance() {
<span style="color:#008080"> 9</span>          <span style="color:#0000ff">if</span> (single == <span style="color:#0000ff">null</span>) {  
<span style="color:#008080">10</span>              single = <span style="color:#0000ff">new</span> Singleton2();
<span style="color:#008080">11</span>          }  
<span style="color:#008080">12</span>         <span style="color:#0000ff">return</span> single;
<span style="color:#008080">13</span>     }
<span style="color:#008080">14</span> }</pre>
<div><a title="复制代码" href=""><img alt="复制代码" src="http://common.cnblogs.com/images/copycode.gif"></a></div>
</div>
<p><span style="color:#4d4d4d"><span style="color:#4d4d4d">3.</span><span style="color:#4d4d4d">登记式单例类</span><br>
</span></p>
<div>
<div><a title="复制代码" href=""><img alt="复制代码" src="http://common.cnblogs.com/images/copycode.gif"></a></div>
<pre><span style="color:#008080"> 1</span> <span style="color:#0000ff">import</span> java.util.HashMap;
<span style="color:#008080"> 2</span> <span style="color:#0000ff">import</span> java.util.Map;
<span style="color:#008080"> 3</span> <span style="color:#008000">//</span><span style="color:#008000">登记式单例类.
</span><span style="color:#008080"> 4</span> <span style="color:#008000">//</span><span style="color:#008000">类&#20284;Spring里面的方法，将类名注册，下次从里面直接获取。</span><span style="color:#008000">
</span><span style="color:#008080"> 5</span> <span style="color:#0000ff">public</span> <span style="color:#0000ff">class</span> Singleton3 {
<span style="color:#008080"> 6</span>     <span style="color:#0000ff">private</span> <span style="color:#0000ff">static</span> Map&lt;String,Singleton3&gt; map = <span style="color:#0000ff">new</span> HashMap&lt;String,Singleton3&gt;();
<span style="color:#008080"> 7</span>     <span style="color:#0000ff">static</span>{
<span style="color:#008080"> 8</span>         Singleton3 single = <span style="color:#0000ff">new</span> Singleton3();
<span style="color:#008080"> 9</span>         map.put(single.getClass().getName(), single);
<span style="color:#008080">10</span>     }
<span style="color:#008080">11</span>     <span style="color:#008000">//</span><span style="color:#008000">保护的默认构造子</span><span style="color:#008000">
</span><span style="color:#008080">12</span>     <span style="color:#0000ff">protected</span> Singleton3(){}
<span style="color:#008080">13</span>     <span style="color:#008000">//</span><span style="color:#008000">静态工厂方法,返还此类惟一的实例</span><span style="color:#008000">
</span><span style="color:#008080">14</span>     <span style="color:#0000ff">public</span> <span style="color:#0000ff">static</span> Singleton3 getInstance(String name) {
<span style="color:#008080">15</span>         <span style="color:#0000ff">if</span>(name == <span style="color:#0000ff">null</span>) {
<span style="color:#008080">16</span>             name = Singleton3.<span style="color:#0000ff">class</span>.getName();
<span style="color:#008080">17</span>             System.out.println(&quot;name == null&quot;&#43;&quot;---&gt;name=&quot;&#43;name);
<span style="color:#008080">18</span>         }
<span style="color:#008080">19</span>         <span style="color:#0000ff">if</span>(map.get(name) == <span style="color:#0000ff">null</span>) {
<span style="color:#008080">20</span>             <span style="color:#0000ff">try</span> {
<span style="color:#008080">21</span>                 map.put(name, (Singleton3) Class.forName(name).newInstance());
<span style="color:#008080">22</span>             } <span style="color:#0000ff">catch</span> (InstantiationException e) {
<span style="color:#008080">23</span>                 e.printStackTrace();
<span style="color:#008080">24</span>             } <span style="color:#0000ff">catch</span> (IllegalAccessException e) {
<span style="color:#008080">25</span>                 e.printStackTrace();
<span style="color:#008080">26</span>             } <span style="color:#0000ff">catch</span> (ClassNotFoundException e) {
<span style="color:#008080">27</span>                 e.printStackTrace();
<span style="color:#008080">28</span>             }
<span style="color:#008080">29</span>         }
<span style="color:#008080">30</span>         <span style="color:#0000ff">return</span> map.get(name);
<span style="color:#008080">31</span>     }
<span style="color:#008080">32</span>     <span style="color:#008000">//</span><span style="color:#008000">一个示意性的商业方法</span><span style="color:#008000">
</span><span style="color:#008080">33</span>     <span style="color:#0000ff">public</span> String about() {    
<span style="color:#008080">34</span>         <span style="color:#0000ff">return</span> &quot;Hello, I am RegSingleton.&quot;;    
<span style="color:#008080">35</span>     }    
<span style="color:#008080">36</span>     <span style="color:#0000ff">public</span> <span style="color:#0000ff">static</span> <span style="color:#0000ff">void</span> main(String[] args) {
<span style="color:#008080">37</span>         Singleton3 single3 = Singleton3.getInstance(<span style="color:#0000ff">null</span>);
<span style="color:#008080">38</span>         System.out.println(single3.about());
<span style="color:#008080">39</span>     }
<span style="color:#008080">40</span> }</pre>
<div><a title="复制代码" href=""><img alt="复制代码" src="http://common.cnblogs.com/images/copycode.gif"></a>原文来自：</div>
</div>
<p><a href="http://www.cnblogs.com/whgw/archive/2011/10/05/2199535.html">http://www.cnblogs.com/whgw/archive/2011/10/05/2199535.html</a><br>
<br>
<br>
</p>
</div>
</div>

            <div>
                作者：Killer_ZR 发表于2013/4/27 7:57:21 <a href="http://blog.csdn.net/killer_zr/article/details/8857283">原文链接</a>
            </div>
            <div>
            阅读：161 评论：0 <a href="http://blog.csdn.net/killer_zr/article/details/8857283#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
</channel>
</rss>
