<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet type="text/xsl" title="XSL Formatting" href="/rss.xsl" media="all" ?>
<rss version="2.0">
<channel>
    <title>分享经验，共同进步.</title>
    <image>
    <link>http://blog.csdn.net</link>
    <url>http://static.blog.csdn.net/images/logo.gif</url>
    </image>
    <description>专注.NET开发，涉及Silverlight、WPF、ArcGIS、Android、Windows Phone等技术开发！</description>
	<link>http://blog.csdn.net/taomanman</link>
	<language>zh-cn</language>
	<generator>http://blog.csdn.net</generator>
	<ttl>5</ttl>
	<copyright><![CDATA[Copyright &copy; taomanman]]></copyright> 
	<pubDate>2015/9/17 14:29:48</pubDate>
    <item>
        <title><![CDATA[[原]asp.net GridView列数据鼠标移入显示提示信息]]></title>
        <link>http://blog.csdn.net/zdw_wym/article/details/48247501</link>
        <guid>http://blog.csdn.net/zdw_wym/article/details/48247501</guid>
        <author>taomanman</author>
        <pubDate>2015/9/6 18:12:14</pubDate>
        <description><![CDATA[
            <p><span style="font-size:14px;">问题提出：</span></p><p><span style="font-size:14px;">在asp.net开发中，如果有这样的一个需求，如果在列表控件，如GridView中的某列中显示的是一个计算公式得出的值，那么需求来了，鼠标移入该数字，显示该数字的计算公式和过程，如何做？</span></p><p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;">解决方案分析：</span></p><p><span style="font-size:14px;">常规可以使用控件的title属性来显示提示信息，但是显示信息的样式不美观。接下来我们可以使用这样的一个解决方案，其显示效果如下图所示：</span></p><p><span style="font-size:14px;"><img src="http://img.blog.csdn.net/20150906181811163?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" width="600" height="189" /><br /></span></p><p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;">详细实现步骤：</span></p><p><span style="font-size:14px;">1、下载弹出提示框相关js文件包，下载地址：<a target=_blank target="_blank" href="http://download.csdn.net/detail/taomanman/9083213">http://download.csdn.net/detail/taomanman/9083213</a></span></p><p><span style="font-size:14px;">2、将下载的文件解压，讲整个popTips文件夹放到你的项目目录下去，比如放到js文件夹下。</span></p><p><span style="font-size:14px;">3、在你需要的页面中引入相关文件，最主要的是以下几个文件：</span></p><p><span style="font-size:14px;"></span></p><pre name="code" class="csharp">&lt;link href=&quot;../Js/popTips/tip-yellow/tip-yellow.css&quot; rel=&quot;stylesheet&quot; /&gt; 
&lt;script src=&quot;../Js/jquery-1.7.2.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;../Js/popTips/jquery.poshytip.min.js&quot;&gt;&lt;/script&gt;</pre><p></p><p><span style="font-size:14px;">4、页面中使用GridView的话，我们可以使用模板列，如下所示：</span></p><pre name="code" class="csharp">&lt;asp:GridView ID=&quot;GridView1&quot; OnRowDataBound=&quot;GridView1_RowDataBound&quot; AllowPaging=&quot;True&quot;
                    runat=&quot;server&quot; AutoGenerateColumns=&quot;False&quot; OnPageIndexChanging=&quot;GridView1_PageIndexChanging&quot;
                    CellPadding=&quot;4&quot; CssClass=&quot;grid1&quot; EmptyDataText=&quot;无数显示&quot; PageSize=&quot;10&quot;
                    Width=&quot;99%&quot; HeaderStyle-Wrap=&quot;True&quot;&gt;
                    &lt;HeaderStyle BackColor=&quot;#507CD1&quot; Font-Bold=&quot;True&quot; ForeColor=&quot;White&quot; /&gt;
         &lt;Columns&gt;
                 ...
                &lt;asp:TemplateField HeaderText=&quot;折标煤&lt;br&gt;（千克标准煤）&quot; ItemStyle-Width=&quot;100px&quot; HeaderStyle-VerticalAlign=&quot;Middle&quot; HeaderStyle-HorizontalAlign=&quot;Center&quot; ItemStyle-HorizontalAlign=&quot;Center&quot;&gt;
                       &lt;ItemTemplate&gt;
                              &lt;span id=&quot;zbm&quot; style=&quot;color:blue; cursor:pointer;&quot; runat=&quot;server&quot; title='&lt;%#showZBMGS(Eval(&quot;DIAN&quot;).ToString(),Eval(&quot;RELI&quot;).ToString(),Eval(&quot;YUANMEI&quot;).ToString(),Eval(&quot;TIANRQ&quot;).ToString(),Eval(&quot;QIYOU&quot;).ToString(),Eval(&quot;CHAIYOU&quot;).ToString(),Eval(&quot;ZSNY&quot;).ToString()) %&gt;'&gt;&lt;%# Eval(&quot;ZBM&quot;) %&gt;&lt;/span&gt;
                        &lt;/ItemTemplate&gt;
                 &lt;/asp:TemplateField&gt;
                 ...
         &lt;/Columns&gt;
 &lt;/asp:GridView&gt;</pre><p></p><p><span style="font-size:14px;">5、后台cs代码中增加一个方法</span></p><pre name="code" class="csharp">#region 折标煤计算公式显示 2015-09-06
        /// &lt;summary&gt;
        /// 获取折标煤的计算公式
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;dian&quot;&gt;&lt;/param&gt;
        /// &lt;param name=&quot;reli&quot;&gt;&lt;/param&gt;
        /// &lt;param name=&quot;yuanmei&quot;&gt;&lt;/param&gt;
        /// &lt;param name=&quot;tianranqi&quot;&gt;&lt;/param&gt;
        /// &lt;param name=&quot;qiyou&quot;&gt;&lt;/param&gt;
        /// &lt;param name=&quot;chaiyou&quot;&gt;&lt;/param&gt;
        /// &lt;param name=&quot;zsny&quot;&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public string showZBMGS(string dian, string reli, string yuanmei, string tianranqi, string qiyou, string chaiyou, string zsny)
        {
            double zbm = ((double.Parse(dian) * 0.1229) + (double.Parse(reli) * 0.0341) + (double.Parse(yuanmei) * 0.7143) + (double.Parse(tianranqi) * 1.2143) + (double.Parse(qiyou) * 1.4714) + (double.Parse(chaiyou) * 1.4571) + (double.Parse(zsny) * 1)) * 10;
            ZBMGS = &quot;折标煤 = 电 * 0.1229 + 热力 * 0.0341 + 原煤 * 0.7143 + 天然气 * 1.2143 + 汽油 * 1.4714 + 柴油 * 1.4571 + 再生能源 * 1&lt;/br&gt;=&quot;;
            ZBMGS += dian + &quot;* 0.1229+&quot; + reli + &quot; * 0.0341+&quot; + yuanmei + &quot; * 0.7143+&quot; + tianranqi + &quot;* 1.2143+&quot; + qiyou + &quot; * 1.4714+&quot; + chaiyou + &quot; * 1.4571+&quot; + zsny + &quot; * 1&lt;/br&gt;=&quot;;
            ZBMGS += Math.Round(zbm, 2);
            return ZBMGS;
        }
#endregion</pre><p><br /></p><p><span style="font-size:14px;">6、接下来在页面加载时，应用此信息提示，如下代码所示：</span></p><pre name="code" class="csharp"> $(function () {
       //为控件增加信息提示 2015-09-06
       $cb = $('#&lt;%=this.GridView1.ClientID%&gt;').find('span[id$=&quot;zbm&quot;]');
       $($cb).poshytip();
 });</pre><br /><p></p><p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;"><br /></span></p>
            <div>
                作者：taomanman 发表于2015/9/6 18:12:14 <a href="http://blog.csdn.net/zdw_wym/article/details/48247501">原文链接</a>
            </div>
            <div>
            阅读：650 评论：0 <a href="http://blog.csdn.net/zdw_wym/article/details/48247501#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]能耗折算标准煤公式]]></title>
        <link>http://blog.csdn.net/zdw_wym/article/details/48154665</link>
        <guid>http://blog.csdn.net/zdw_wym/article/details/48154665</guid>
        <author>taomanman</author>
        <pubDate>2015/9/1 10:34:16</pubDate>
        <description><![CDATA[
            <div style="text-align: center;"><img src="http://img.blog.csdn.net/20150906183128430?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" /><br /></div><br /><br />1、总能耗<br /><br />折标煤 =（电 * 0.1229 + 热力 * 0.0341 + 原煤 * 0.7143 + 天然气 * 1.2143 + 汽油 * 1.4714 + 柴油 * 1.4571 + 再生能源 * 1 );<br />[ZBM] =（[DIAN] * 0.1229 + [RELI]* 0.0341 + [YUANMEI]* 0.7143 + [TIANRQ] * 1.2143 + [QIYOU] * 1.4714 + [CHAIYOU] * 1.4571 + [ZSNY] * 1 ) ;<br />&nbsp;<br />2、单位面积<br /><br /><p><span style="font-size: 14px;">折标煤 =（电 * 0.1229 + 热力 * 0.0341 + 原煤 * 0.7143 + 天然气 * 1.2143 + 汽油 * 1.4714 + 柴油 * 1.4571 + 再生能源 * 1 ) / 用能面积;</span></p><span style="font-size:14px;">[ZBM] = ([DIAN] * 0.1229 + [RELI] * 0.0341 + [YUANMEI] * 0.7143 + [TIANRQ] * 1.2143 + [QIYOU] * 1.4714 + [CHAIYOU] * 1.4571 + [ZSNY] * 1 ) / [EnergyArea];<br /><br /><br />3、人均能耗<br /><br /></span><p><span style="font-size:14px;">折标煤 =（电 * 0.1229 + 热力 * 0.0341 + 原煤 * 0.7143 + 天然气 * 1.2143 + 汽油 * 1.4714 + 柴油 * 1.4571 + 再生能源 * 1 ) / 用能人数;</span></p><span style="font-size:14px;">[ZBM] = （[DIAN] * 0.1229 + [RELI] * 0.0341 + [YUANMEI] * 0.7143 + [TIANRQ] * 1.2143 + [QIYOU] * 1.4714 + [CHAIYOU] * 1.4571 + [ZSNY] * 1 ) / [EnergyPerson];<br /></span><br />
            <div>
                作者：taomanman 发表于2015/9/1 10:34:16 <a href="http://blog.csdn.net/zdw_wym/article/details/48154665">原文链接</a>
            </div>
            <div>
            阅读：243 评论：0 <a href="http://blog.csdn.net/zdw_wym/article/details/48154665#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]网站或系统中直接嵌入天气信息]]></title>
        <link>http://blog.csdn.net/zdw_wym/article/details/48130621</link>
        <guid>http://blog.csdn.net/zdw_wym/article/details/48130621</guid>
        <author>taomanman</author>
        <pubDate>2015/8/31 10:44:48</pubDate>
        <description><![CDATA[
            <p><span style="font-size:14px;">直接嵌入一个iframe的方法，如下代码所示：</span></p><p><span style="font-size:14px;"></span><pre name="code" class="csharp"> &lt;div&gt;
           &lt;iframe width=&quot;420&quot; scrolling=&quot;no&quot; height=&quot;60&quot; frameborder=&quot;0&quot; allowtransparency=&quot;true&quot; src=&quot;http://i.tianqi.com/index.php?c=code&amp;id=12&amp;color=%23000000&amp;icon=1&amp;num=5&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;</pre><br />地址：http://i.tianqi.com/index.php?c=code&amp;id=12&amp;color=%23000000&amp;icon=1&amp;num=5</p><p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;">显示效果如下图所示：</span></p><p><span style="font-size:14px;"><img src="http://img.blog.csdn.net/20150831104134153?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" /><br /></span></p><p><br /></p>
            <div>
                作者：taomanman 发表于2015/8/31 10:44:48 <a href="http://blog.csdn.net/zdw_wym/article/details/48130621">原文链接</a>
            </div>
            <div>
            阅读：63 评论：1 <a href="http://blog.csdn.net/zdw_wym/article/details/48130621#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]Silverlight 控件的ToolTip封装工具使用]]></title>
        <link>http://blog.csdn.net/zdw_wym/article/details/48022911</link>
        <guid>http://blog.csdn.net/zdw_wym/article/details/48022911</guid>
        <author>taomanman</author>
        <pubDate>2015/8/27 9:52:08</pubDate>
        <description><![CDATA[
            <p><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; 在Silverlight项目开发中，控件可以设置鼠标移入时的手势，同样还可以设置ToolTip，利用Silverlight编写代码或者Blend设计工具均可以设置ToolTip，但都是一些文字提示，如何实现图文并茂的提示呢？</span></p><p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; 本文跟大家分享一个国外已封装好的控件在CodePlex上地址为：<a target=_blank target="_blank" href="http://tooltipservice.codeplex.com/">http://tooltipservice.codeplex.com/</a>，其封装好的文件为Silverlight.Controls.ToolTips.dll，下载地址：</span><a target=_blank target="_blank" href="http://download.csdn.net/detail/taomanman/9052581" style="font-size: 14px;">http://download.csdn.net/detail/taomanman/9052581</a></p><p><span style="font-size: 14px;"><br /></span></p><p><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; 下面介绍使用方法：</span></p><p><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; 1、下载上面链接地址中的dll文件，并添加到Silverlight项目引用中。</span></p><p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; 2、在xaml页面的头部添加引用声明，如下代码所示：</span></p><p><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></p><pre name="code" class="csharp"> xmlns:Controls=&quot;clr-namespace:Silverlight.Controls.ToolTips;assembly=Silverlight.Controls.ToolTips&quot;</pre><br /><p></p><p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; 3、在Border控件内部添加如下调用代码：</span></p><p><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></p><pre name="code" class="csharp">   &lt;Border BorderBrush=&quot;White&quot; BorderThickness=&quot;2&quot; Background=&quot;#FF0061FF&quot; Margin=&quot;0,0,-25,0&quot; Cursor=&quot;Hand&quot;&gt;
       &lt;TextBlock x:Name=&quot;F4_8_DK_1_SAT&quot; Margin=&quot;0&quot; TextWrapping=&quot;Wrap&quot; Text=&quot;17.5&quot; FontSize=&quot;17.333&quot; FontFamily=&quot;Microsoft YaHei&quot; HorizontalAlignment=&quot;Center&quot; d:LayoutOverrides=&quot;Height&quot; Foreground=&quot;White&quot;/&gt;

       &lt;!--设置ToolTip功能开始 2015-08-27--&gt;
        &lt;Controls:ToolTipService.ToolTip&gt;
             &lt;!-- 设置ToolTip 显示时间和初始延迟时间 --&gt;
              &lt;Controls:ToolTip DisplayTime=&quot;00:00:10&quot; InitialDelay=&quot;00:00:00&quot; x:Name=&quot;bbAT&quot;&gt;


                   &lt;!--设置ToolTip关闭动画 --&gt;
                   &lt;Controls:ToolTip.CloseAnimation&gt;
                           &lt;Storyboard Duration=&quot;00:00:01&quot;&gt;
                                     &lt;DoubleAnimation From=&quot;1&quot; To=&quot;0&quot; Storyboard.TargetName=&quot;bbAT&quot; Storyboard.TargetProperty=&quot;Opacity&quot;/&gt;
                           &lt;/Storyboard&gt;
                    &lt;/Controls:ToolTip.CloseAnimation&gt;


                    &lt;!-- 设置ToolTip打开的动画 --&gt;
                    &lt;Controls:ToolTip.OpenAnimation&gt;
                          &lt;Storyboard Duration=&quot;00:00:01&quot;&gt;
                                  &lt;DoubleAnimation From=&quot;0&quot; To=&quot;1&quot; Storyboard.TargetName=&quot;bbAT&quot; Storyboard.TargetProperty=&quot;Opacity&quot;/&gt;
                           &lt;/Storyboard&gt;
                    &lt;/Controls:ToolTip.OpenAnimation&gt;


                     &lt;!-- 设置ToolTip的内容，可以是任何元素 --&gt;
                     &lt;Controls:ToolTip.Content&gt;
                            &lt;Image Source=&quot;/HES;component/Images/on.png&quot;&gt;&lt;/Image&gt;
                     &lt;/Controls:ToolTip.Content&gt;


                &lt;/Controls:ToolTip&gt;
           &lt;/Controls:ToolTipService.ToolTip&gt;
           &lt;!--设置ToolTip功能结束 2015-08-27--&gt;

        &lt;/Border&gt;</pre><br /><p></p><p><span style="font-size:14px;"></span></p><p><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; 4、效果如下图所示：</span></p><p><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<img src="http://img.blog.csdn.net/20150827100420534?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" /></span></p><p><br /></p>
            <div>
                作者：taomanman 发表于2015/8/27 9:52:08 <a href="http://blog.csdn.net/zdw_wym/article/details/48022911">原文链接</a>
            </div>
            <div>
            阅读：85 评论：0 <a href="http://blog.csdn.net/zdw_wym/article/details/48022911#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]CSDN问答常用SQL问题汇总]]></title>
        <link>http://blog.csdn.net/zdw_wym/article/details/47750605</link>
        <guid>http://blog.csdn.net/zdw_wym/article/details/47750605</guid>
        <author>taomanman</author>
        <pubDate>2015/8/18 13:36:47</pubDate>
        <description><![CDATA[
            <p><span style="font-size:14px;">一、行列转换</span></p><p><span style="font-size:14px;">1、原表如图1，现在想实现图2效果，经典的行转列（问题地址：<a target=_blank target="_blank" href="http://ask.csdn.net/questions/200875#answer_122366">http://ask.csdn.net/questions/200875#answer_122366</a>）<img src="http://img.blog.csdn.net/20150818132855559?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" width="800" height="501" /></span></p><p><span style="font-size:14px;">实现步骤：</span></p><p><span style="font-size:14px;"><img src="http://img.blog.csdn.net/20150818133022554?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" /><br /></span></p><p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;"><img src="http://img.blog.csdn.net/20150818133036361?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" /><br /></span></p><p><span style="font-size:14px;">具体的SQL代码如下：</span></p><p><span style="font-size:14px;"></span></p><pre name="code" class="sql">select A as '运单明细',B as '运单编号', C as '付款方式', D as '运费' from T1;
 
Declare @sql varchar(8000)
Set @sql = 'Select B as 运单编号'
Select @sql = @sql + ',sum(case C when '''+C+''' then D else 0 end) [付款方式'+C+'的运费合计]'
from (select distinct C from T1) as T  --把所有唯一的付款方式的名称都列举出来
Select @sql = @sql+',sum(D) as ''全部运费合计'''
Select @sql = @sql+' from T1 group by B'
Exec (@sql)</pre><p></p><p><span style="font-size:14px;"><br /></span></p>2、如下2张表（问题地址：<a target=_blank target="_blank" href="http://ask.csdn.net/questions/197955">http://ask.csdn.net/questions/197955</a>）<p><span style="font-size:14px;"><span style="color: rgb(102, 102, 102); font-family: 'Microsoft YaHei'; line-height: 24px;">Person</span><br /></span></p><p><span style="font-size:14px;"><img src="http://img.ask.csdn.net/upload/201508/04/1438664421_116744.png" alt="" /><br /></span></p><p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;"><span style="color: rgb(102, 102, 102); font-family: 'Microsoft YaHei'; line-height: 24px;">Orders</span></span></p><p><span style="font-size:14px;"><img src="http://img.ask.csdn.net/upload/201508/04/1438664435_617421.png" alt="图片说明" /><br /><br /></span></p><p><span style="font-size:14px;"><span style="color: rgb(102, 102, 102); font-family: 'Microsoft YaHei'; line-height: 24px;">要求从上面这两张表中选出以下结果：</span><br /></span></p><p><span style="font-size:14px;"><img src="http://img.ask.csdn.net/upload/201508/04/1438664869_798994.png" alt="" /></span></p><p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;">实现步骤：</span></p><p><span style="font-size:14px;"><img src="http://img.ask.csdn.net/upload/201508/04/1438667275_623274.png" alt="图片说明" /><br /></span></p><p><span style="font-size:14px;"><img src="http://img.ask.csdn.net/upload/201508/04/1438667275_623274.png" alt="图片说明" /><br /></span></p><p><span style="font-size:14px;">具体SQL代码如下：</span></p><p></p><pre style="box-sizing: border-box; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; white-space: pre-wrap; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.428571429; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; border: 1px solid rgb(204, 204, 204); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(245, 245, 245);"><code class="prettyprint" style="box-sizing: border-box; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; padding: 0px; color: inherit; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; background-color: transparent;"><span style="font-size:14px;"> select t.Id_p,t.LastName,COUNT(OrderNo) as ItemCount from 
(
select t1.OrderNo,ISNULL(t1.Id_p,t2.Id_p) as Id_p,isnull(t2.LastName,'Unknown') as LastName from Orders t1
full join  Person t2
on t1.Id_p = t2.Id_p
) t group by t.Id_p,t.LastName</span></code></pre><br /><p></p>
            <div>
                作者：taomanman 发表于2015/8/18 13:36:47 <a href="http://blog.csdn.net/zdw_wym/article/details/47750605">原文链接</a>
            </div>
            <div>
            阅读：73 评论：0 <a href="http://blog.csdn.net/zdw_wym/article/details/47750605#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]Android Studio 视频教程地址]]></title>
        <link>http://blog.csdn.net/zdw_wym/article/details/47722383</link>
        <guid>http://blog.csdn.net/zdw_wym/article/details/47722383</guid>
        <author>taomanman</author>
        <pubDate>2015/8/17 11:07:16</pubDate>
        <description><![CDATA[
            <a target=_blank href="http://android100.org/jiaocheng_1/android_1_2.html"><span style="font-size:18px;">http://android100.org/jiaocheng_1/android_1_2.html</span></a><br />
            <div>
                作者：taomanman 发表于2015/8/17 11:07:16 <a href="http://blog.csdn.net/zdw_wym/article/details/47722383">原文链接</a>
            </div>
            <div>
            阅读：109 评论：0 <a href="http://blog.csdn.net/zdw_wym/article/details/47722383#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]我的高效编程秘诀]]></title>
        <link>http://blog.csdn.net/zdw_wym/article/details/47304453</link>
        <guid>http://blog.csdn.net/zdw_wym/article/details/47304453</guid>
        <author>taomanman</author>
        <pubDate>2015/8/5 21:49:46</pubDate>
        <description><![CDATA[
            <p></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;">&nbsp;1、提高搜索技巧来成为一名高效的程序员</span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; 对于缺乏编程知识的人来说，也是完全有可能编写出一个网页或小型应用程序。如果在用百度或者Google搜索相关示例并且幸运的话，可以搜到现成的代码。即使是经验丰富的程序员，通常也会为了节省时间和精力而在网上搜索解决方案。</span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; 如果不借助搜索技术、网络及集体智慧，现代化高效编程是难以想象的。因此，搜索技巧对高效程序员变得愈发重要。</span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; 现在，我们不需要了解和记住如何解决众多的编程问题，可以采用搜索技术。我们正变得更加高效、高生产力，并能够解决更多的问题。</span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;"><br /></span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;">2、专注编程，尽量避免被外界所打扰</span></span></p><p><span style="font-size:14px;"><span style="color:rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp;在编写代码的过程中，专注</span><span style="color:rgb(51, 51, 51);">只</span><span style="color:rgb(51, 51, 51);">做</span><span style="color:rgb(51, 51, 51);">一件事——</span><span style="color:rgb(51, 51, 51);">关闭</span><span style="color:rgb(51, 51, 51);">Email</span><span style="color:rgb(51, 51, 51);">，关闭</span><span style="color:rgb(51, 51, 51);">聊天工具，</span><span style="color:rgb(51, 51, 51);">关闭音乐</span><span style="color:rgb(51, 51, 51);">，</span><span style="color:rgb(51, 51, 51);">尽量不要有</span><span style="color:rgb(51, 51, 51);">分心的事</span><span style="color:rgb(51, 51, 51);">，这会让你的编程</span><span style="color:rgb(51, 51, 51);">效率增倍。&nbsp;</span><span style="color:rgb(51, 51, 51);">编程完以后，适当离开座位，活动活动，去倒杯水，舒展下筋骨</span><span style="color:rgb(51, 51, 51);">，</span><span style="color:rgb(51, 51, 51);">这样</span><span style="color:rgb(51, 51, 51);">使</span><span style="color:rgb(51, 51, 51);">你</span><span style="color:rgb(51, 51, 51);">的工作更加快乐。</span></span></p><p><span style="font-size:14px;"><span style="color:rgb(51, 51, 51);"><br /></span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;">3、减少代码</span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; 减少代码的数量，坚持DRY（Don’t&nbsp;Repeat&nbsp;Yourself）&nbsp;和KISS（Keep&nbsp;It&nbsp;</span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;">Simple&nbsp;&amp;&nbsp;Stupid）&nbsp;原则。这样可以有交物减少代码的复杂度，提高程序的易读性和可维护性，同时也能增加代码的质量。</span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;"><br /></span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;">4、代码重用</span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; DRY&nbsp;(don’t&nbsp;repeat&nbsp;yourself)&nbsp;原则就是告诉我们需要重用现有的代码。这</span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;">样，你才能够站在巨人的肩膀之上，从而可以更多的关注和自己所要处理业务的逻辑。编程的最高境界就是写出来的代码是可能被重用的，重用和泛型这是编程里始终在追求的目标。</span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;"><br /></span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;">5、代码重构</span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; 一些老的代码可能已经不合时宜了，比较以前老的C++的STL库在多线程下可能会出现很多问题。所以，我们自己的代码也是一样的，每过一段时间，我们需要把这些代码回收再利用，这就是软件的重构。重构代码所追求的并不是要提供更多的功能，而是让老的代码更有生命力，让老的代码跟上时代，更具扩展性，灵活性。</span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;"><br /></span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;">6、使用设计模式</span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; 设计模式是一种从代码级解决某一些问题的方法论。这个世界上有很多很多的设计模式，比如MVC，单实例，工厂，观察者等等，等等。使用好的设计模式可以让你的代码更具重用和扩展性。</span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;"><br /></span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;">7、使用程序框架Framework</span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; Frameworks&nbsp;是一份给程序员的礼物，他们帮助你完成了很多很细节的事情，他们有可能是一个lib库，你需要进行简单的拼装，一个几乎完成了的软件框架就已形成。这是一个能够给开发工作提速的东西。只要上网随便搜一搜，你可以看到太多太多的框架了。形形色色，几乎都是开源社区贡献的。</span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;"><br /></span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;">8、泛型编程</span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; 如果抽像出一些程序中相似的东西，然后把这些相似的东西用一个标准的东西实现，这也是编程所追求的最高境界之一，像诸如C++中的STL之类的东西就是此类东西的最佳体现。灵活之及，几乎都快放之四海皆准了。</span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;"><br /></span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;">9、使用开源的代码</span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; 这个世界上有太多太多开源的代码了。学会利用他们可以让你更节省时间和精力，因为我们完全没有必要把相当的东西实现若干次，学会使用开源的代码不但是一个学习的过程，同样也是一个增加编程效率的事情。</span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;"><br /></span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;">10、完善开发环境</span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; 开发环境非常重要，因为好的开发环境可以让你事倍功半。他们可以让你不需要关注别的东西，比如，我曾看过某程序员在调整编辑器的字体和高亮上花费了不少工夫。是的，这是值得肯定了，只有把开发环境变得舒服，才能让自己更好的编程。</span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;"><br /></span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;">11、使用调试器</span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; 学会使用调试器来调试代码，单步跟踪，变量值跟踪，内存，堆栈等等。熟练地使用调试器可以让你更好的查找程序的问题，以得到最优的代码。</span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;"><br /></span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;">12、使用版本管理工具</span></span></p><p><span style="color:rgb(51, 51, 51);"><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; 版本管理工具应该是任何程序员都应该要去学会使用的东西，特别在一个团队中，如何管理程序的不同版本，如何维护，存放代码，版本管理工具绝对是开发过程中不可少的东西。其意义绝对不只代码备份和共享那么简单。下面是一些开源的管理管理工具：Git，SVN，CVS和Bazaar。</span></span></p><p><span style="color:rgb(85, 85, 85);"><span style="font-size:14px;">&nbsp;</span></span></p><p><span style="color:rgb(85, 85, 85);"><span style="font-size:14px;">&nbsp;</span></span></p><p><span style="font-size:14px;">&nbsp;</span></p><p></p>
            <div>
                作者：taomanman 发表于2015/8/5 21:49:46 <a href="http://blog.csdn.net/zdw_wym/article/details/47304453">原文链接</a>
            </div>
            <div>
            阅读：60 评论：0 <a href="http://blog.csdn.net/zdw_wym/article/details/47304453#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]Android Studio相关资源]]></title>
        <link>http://blog.csdn.net/zdw_wym/article/details/46927135</link>
        <guid>http://blog.csdn.net/zdw_wym/article/details/46927135</guid>
        <author>taomanman</author>
        <pubDate>2015/7/17 14:38:03</pubDate>
        <description><![CDATA[
            <p><span style="font-size:14px;">1、软件下载：<a target=_blank target="_blank" href="http://www.android-studio.org/index.php/download">http://www.android-studio.org/index.php/download</a></span></p><p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;">2、视频教程：<a target=_blank target="_blank" href="http://ask.android-studio.org/?/explore/category-video">http://ask.android-studio.org/?/explore/category-video</a></span></p><p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;">3、Android中Activity之间传递一个对象</span></p><p><span style="font-size:14px;">&nbsp; &nbsp; （1）、使用&nbsp;<span style="color:#ff0000;">Serializable</span>，序列化操作全部由操作系统自身完成，效率比较低</span></p><p><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1）、定义一个实体类User，实现Serializable,定义name和age两个变量，并为之设置set和get方法及一个带有2个参数的构造函数</span></p><p><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2）、Intent intent = new Intent(MainActivity.this,AnotherActivity.class);</span></p><p><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;i.putExtra(&quot;user&quot;,new User(&quot;暖枫无敌&quot;,30));</span></p><p><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;startActivity(i);</span></p><p><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;3)、读取代码：</span></p><p><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; User user = () i.<span style="color:#ff0000;"><strong>getSerializableExtra</strong></span>(&quot;user&quot;);</span></p><p><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tv.setText(String.Format(&quot;User Info(name=%s,age=d%)&quot;,user.getName(),user.getAge()));</span></p><p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;">&nbsp; &nbsp;（2）、使用&nbsp;<span style="color:#ff0000;">Parcelable</span>,它是Android操作系统自带，效率比Serializable要高<br /></span></p><p><span style="font-size:14px;"></span></p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1）、定义一个实体类User，实现Parcelable，覆写两个方法，及新增一个变量，如下图所示：</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<img src="http://img.blog.csdn.net/20150722131157628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" /></p><p><br /></p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<img src="http://img.blog.csdn.net/20150722131231305?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" /><br /></p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2）、Intent intent = new Intent(MainActivity.this,AnotherActivity.class);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;i.putExtra(&quot;user&quot;,new User(&quot;暖枫无敌&quot;,30));</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;3)、读取代码：</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; User user = () i.<span style="color:#ff0000;"><strong>getParcelableExtra</strong></span>(&quot;user&quot;);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tv.setText(String.Format(&quot;User Info(name=%s,age=d%)&quot;,user.getName(),user.getAge()));</p><p><br /></p><p>4、</p><br />
            <div>
                作者：taomanman 发表于2015/7/17 14:38:03 <a href="http://blog.csdn.net/zdw_wym/article/details/46927135">原文链接</a>
            </div>
            <div>
            阅读：107 评论：0 <a href="http://blog.csdn.net/zdw_wym/article/details/46927135#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]asp.net 常用知识点汇总整理]]></title>
        <link>http://blog.csdn.net/zdw_wym/article/details/46906927</link>
        <guid>http://blog.csdn.net/zdw_wym/article/details/46906927</guid>
        <author>taomanman</author>
        <pubDate>2015/7/16 9:40:09</pubDate>
        <description><![CDATA[
            <p><span style="font-size:14px;">1、后台动态创建DataTable，并绑定Repeater</span></p><p><span style="font-size:14px;"></span></p><pre name="code" class="csharp">DataTable dtNew = new DataTable();
dtNew.Columns.Add(&quot;Name&quot;, typeof(string));
dtNew.Columns[&quot;Name&quot;].SetOrdinal(0);
dtNew.Columns.Add(&quot;CNT&quot;, typeof(string));
dtNew.Columns[&quot;CNT&quot;].SetOrdinal(1);
dtNew.Columns.Add(&quot;SUMValue&quot;, typeof(double));
dtNew.Columns[&quot;SUMValue&quot;].SetOrdinal(2);
//1、
DataRow dr1 = dtNew.NewRow();
dr1[&quot;Name&quot;] = &quot;锅炉&quot;;
dr1[&quot;CNT&quot;] = &quot;221&quot;;
dr1[&quot;SUMValue&quot;] = 2748199.2;
dtNew.Rows.Add(dr1);
//2、
DataRow dr2 = dtNew.NewRow();
dr2[&quot;Name&quot;] = &quot;变压器&quot;;
dr2[&quot;CNT&quot;] = &quot;210&quot;;
dr2[&quot;SUMValue&quot;] = 2424021;
dtNew.Rows.Add(dr2);
//3、
DataRow dr3 = dtNew.NewRow();
dr3[&quot;Name&quot;] = &quot;电动机&quot;;
dr3[&quot;CNT&quot;] = &quot;200&quot;;
dr3[&quot;SUMValue&quot;] = 2424021;
dtNew.Rows.Add(dr3);
//4、
DataRow dr4 = dtNew.NewRow();
dr4[&quot;Name&quot;] = &quot;水泵&quot;;
dr4[&quot;CNT&quot;] = &quot;150&quot;;
dr4[&quot;SUMValue&quot;] = 1424021;
dtNew.Rows.Add(dr4);
//5、
DataRow dr5 = dtNew.NewRow();
dr5[&quot;Name&quot;] = &quot;风机&quot;;
dr5[&quot;CNT&quot;] = &quot;90&quot;;
dr5[&quot;SUMValue&quot;] = 81123;
dtNew.Rows.Add(dr5);
//6、
DataRow dr6 = dtNew.NewRow();
dr6[&quot;Name&quot;] = &quot;制冷机&quot;;
dr6[&quot;CNT&quot;] = &quot;100&quot;;
dr6[&quot;SUMValue&quot;] = 81123;
dtNew.Rows.Add(dr6);
//7、
DataRow dr7 = dtNew.NewRow();
dr7[&quot;Name&quot;] = &quot;其它&quot;;
dr7[&quot;CNT&quot;] = &quot;100&quot;;
dr7[&quot;SUMValue&quot;] = 81123;
dtNew.Rows.Add(dr7);


rptDevice.DataSource = dtNew;
rptDevice.DataBind();</pre><br /><br /><p></p><p><span style="font-size:14px;">2、HighCharts多坐标图表显示</span></p><p><span style="font-size:14px;"><img src="http://img.blog.csdn.net/20150716105649560?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" width="800" height="365" alt="" /><br /></span></p><p><span style="font-size:14px;"></span></p><pre name="code" class="csharp">$(function () {
    $('#container').highcharts({
        chart: {
            zoomType: 'xy'
        },
        title: {
            text: 'Average Monthly Weather Data for Tokyo'
        },
        subtitle: {
            text: 'Source: WorldClimate.com'
        },
        xAxis: [{
            categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
                'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
        }],
        yAxis: [{ // Primary yAxis
            labels: {
                formatter: function() {
                    return this.value +'°C';
                },
                style: {
                    color: '#89A54E'
                }
            },
            title: {
                text: 'Temperature',
                style: {
                    color: '#89A54E'
                }
            },
            opposite: true

        }, { // Secondary yAxis
            gridLineWidth: 0,
            title: {
                text: 'Rainfall',
                style: {
                    color: '#4572A7'
                }
            },
            labels: {
                formatter: function() {
                    return this.value +' mm';
                },
                style: {
                    color: '#4572A7'
                }
            }

        }, { // Tertiary yAxis
            gridLineWidth: 0,
            title: {
                text: 'Sea-Level Pressure',
                style: {
                    color: '#AA4643'
                }
            },
            labels: {
                formatter: function() {
                    return this.value +' mb';
                },
                style: {
                    color: '#AA4643'
                }
            },
            opposite: true
        }],
        tooltip: {
            shared: true
        },
        legend: {
            layout: 'vertical',
            align: 'left',
            x: 120,
            verticalAlign: 'top',
            y: 80,
            floating: true,
            backgroundColor: '#FFFFFF'
        },
        series: [{
            name: 'Rainfall',
            color: '#4572A7',
            type: 'column',
            yAxis: 1,
            data: [49.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4],
            tooltip: {
                valueSuffix: ' mm'
            }

        }, {
            name: 'Sea-Level Pressure',
            type: 'spline',
            color: '#AA4643',
            yAxis: 2,
            data: [1016, 1016, 1015.9, 1015.5, 1012.3, 1009.5, 1009.6, 1010.2, 1013.1, 1016.9, 1018.2, 1016.7],
            marker: {
                enabled: false
            },
            dashStyle: 'shortdot',
            tooltip: {
                valueSuffix: ' mb'
            }

        }, {
            name: 'Temperature',
            color: '#89A54E',
            type: 'spline',
            data: [7.0, 6.9, 9.5, 14.5, 18.2, 21.5, 25.2, 26.5, 23.3, 18.3, 13.9, 9.6],
            tooltip: {
                valueSuffix: ' °C'
            }
        }]
    });
});</pre><br /><p><br /></p><p><span style="font-size:14px;">3、系统超时或者Session丢失，自动跳转到登录页面</span></p><p><pre name="code" class="csharp">using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.SessionState;

namespace SYIT
{
    public class FilterModule : IHttpModule, IRequiresSessionState
    {
        public void Dispose()
        {
            //   throw new NotImplementedException();
        }

        public void Init(HttpApplication context)
        {
            //原因：这个事件时，Session尚未创建。要先指定类型在判断地址栏是否存在
            //context.BeginRequest += new EventHandler(context_BeginRequest);
            context.AcquireRequestState += (obj, e) =&gt;
            {
                var app = (HttpApplication)obj;
                var url = app.Request.RawUrl;
                //还要先判断下请求类型
                if (url.IndexOf(&quot;.aspx&quot;) &gt; 0)
                {
                    //判断非UserLogin请求防止进入死循环(此网页包含重定向循环)
                    if (url.IndexOf(&quot;Login.aspx&quot;) &lt; 0)
                    {
                        if (app.Context.Session[&quot;user&quot;] == null)
                        {
                            //app.Context.Response.Redirect(&quot;~/Login.aspx&quot;, false);
                            string loginURl = &quot;&quot;;
                            string virPath = app.Request.ApplicationPath;
                            if (string.IsNullOrEmpty(virPath) || virPath == &quot;/&quot;)
                            {
                                loginURl = string.Format(&quot;{0}://{1}:{2}/Login.aspx&quot;, app.Request.Url.Scheme, app.Request.Url.Host, app.Request.Url.Port);
                            }
                            else
                            {
                                loginURl = string.Format(&quot;{0}://{1}:{2}{3}/Login.aspx&quot;, app.Request.Url.Scheme, app.Request.Url.Host, app.Request.Url.Port, virPath);
                            }
                            app.Context.Response.Write(&quot;&lt;script&gt;alert('您尚未登录或者账户信息已过期，请重新登录！');top.location='&quot; + loginURl + &quot;' ;&lt;/script&gt;&quot;);
                            app.Context.Response.End();
                        }
                    }
                }
            };
        }
    }
}</pre></p><p><br /></p><span style="font-size:14px;">Web.config文件中配置节中添加</span><p><span style="font-size:14px;">&lt;system.web&gt;</span></p><p><span style="font-size:14px;">&nbsp; <span style="color:#ff0000;">&nbsp; &lt;httpModules&gt;<br />&nbsp; &nbsp; &nbsp; &lt;!--重写IHttpModule类，需要配置的信息--&gt;<br />&nbsp; &nbsp; &nbsp; &lt;add name=&quot;</span><span style="color:#000099;"><strong>filterModule</strong></span><span style="color:#ff0000;">&quot; type=&quot;</span><strong><span style="color:#006600;">SYIT.FilterModule</span></strong><span style="color:#ff0000;">&quot; /&gt;</span><br /><span style="color:#ff0000;">&nbsp; &nbsp; &lt;/httpModules&gt;</span></span></p><p><span style="font-size:14px;">&lt;/system.web&gt;<br /><br /></span></p><p><span style="font-size:14px;">4、</span></p><span style="font-size:14px;"><br /><br /></span><p></p>
            <div>
                作者：taomanman 发表于2015/7/16 9:40:09 <a href="http://blog.csdn.net/zdw_wym/article/details/46906927">原文链接</a>
            </div>
            <div>
            阅读：154 评论：0 <a href="http://blog.csdn.net/zdw_wym/article/details/46906927#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]asp.net 中点击按钮弹出模式对话框，选择值后返回到页面中(window.showModalDialog实现)]]></title>
        <link>http://blog.csdn.net/zdw_wym/article/details/46865693</link>
        <guid>http://blog.csdn.net/zdw_wym/article/details/46865693</guid>
        <author>taomanman</author>
        <pubDate>2015/7/13 17:53:02</pubDate>
        <description><![CDATA[
            <p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;">&lt;td&gt;现从事专业&lt;/td&gt;<br />&lt;td&gt;<br />&nbsp; &nbsp; &nbsp; &nbsp;&lt;asp:TextBox ID=&quot;<span style="color:#ff0000;">tbMajor</span>&quot; runat=&quot;server&quot; ReadOnly=&quot;true&quot;&gt;&lt;/asp:TextBox&gt;<br />&nbsp; &nbsp; &nbsp; &nbsp; &lt;input type=&quot;hidden&quot; id=&quot;<span style="color:#ff0000;">hidV</span>&quot; runat=&quot;server&quot; /&gt;<br />&nbsp; &nbsp; &nbsp; &nbsp;&lt;input type=&quot;button&quot; value=&quot;选择专业&quot; onclick=&quot;<span style="color:#ff0000;"><strong>OpenWin(300, 400);</strong></span>&quot; /&gt;<br />&nbsp;&lt;/td&gt;&nbsp;</span></p><p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;">&lt;script type=&quot;text/javascript&quot;&gt;<br />&nbsp; &nbsp; &nbsp; &nbsp; function <span style="color:#ff0000;">OpenWin</span>(width, height) {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var me;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 把父页面窗口对象当作参数传递到对话框中，以便对话框操纵父页自动刷新。&nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; me = window;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 显示对话框。&nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var a = <span style="color:#ff0000;"><strong>window.showModalDialog</strong></span>(&quot;MajorTree.aspx&quot;, me, 'dialogWidth=' + width + 'px;dialogHeight=' + height + 'px;help:no;status=no,toolbar=no,menubar=no,scrollbars=no,location=no');<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (typeof (a) != &quot;undefined&quot;)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var str = new Array();<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str = a.split(&quot;|&quot;);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var text = str[1];<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var textv = str[0];<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //返回值赋给TextBox</span></p><p><span style="color:#ff0000;"><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; window.document.getElementById(&quot;</span><span style="font-size:14px;">tbMajor</span><span style="font-size:14px;">&quot;).value = text;</span></span></p><p><span style="font-size:14px;"><span style="color:#ff0000;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; window.document.getElementById(&quot;hidV&quot;).value = textv;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; }<br />&lt;/script&gt;<br /></span></p><p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeBehind=&quot;MajorTree.aspx.cs&quot; Inherits=&quot;ProvincePlat.EnergyService.MajorTree&quot; %&gt;<br /><br /><br />&lt;!DOCTYPE html&gt;<br /><br /><br />&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;<br />&lt;head runat=&quot;server&quot;&gt;<br />&nbsp; &nbsp; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;<br />&nbsp; &nbsp; &lt;title&gt;&lt;/title&gt;<br />&nbsp; &nbsp; &lt;link href=&quot;../Css/zTreeStyle/zTreeStyle.css&quot; rel=&quot;stylesheet&quot; /&gt;<br />&nbsp; &nbsp; &lt;script src=&quot;../Js/jquery-1.7.2.min.js&quot;&gt;&lt;/script&gt;<br />&nbsp; &nbsp; &lt;script src=&quot;../Js/jquery.ztree.core-3.5.min.js&quot;&gt;&lt;/script&gt;<br />&nbsp; &nbsp; &lt;link href=&quot;../Css/master.css&quot; rel=&quot;stylesheet&quot; /&gt;<br />&nbsp; &nbsp; &lt;link href=&quot;../Css/GridView.css&quot; rel=&quot;stylesheet&quot; /&gt;<br />&nbsp; &nbsp; &lt;!-- 防止重新打开页面形式的对话框 --&gt;<br />&nbsp; &nbsp; &lt;base target=&quot;_self&quot; /&gt;<br />&nbsp; &nbsp; &lt;script type=&quot;text/javascript&quot;&gt;<br />&nbsp; &nbsp; &nbsp; &nbsp; var zNodes;<br />&nbsp; &nbsp; &nbsp; &nbsp; var zTree;<br />&nbsp; &nbsp; &nbsp; &nbsp; //setting异步加载的设置<br />&nbsp; &nbsp; &nbsp; &nbsp; var setting = {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; async: {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; enable: true, //表示异步加载生效<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; url: &quot;../Ajax/MajorData.aspx&quot;, // 异步加载时访问的页面<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; autoParam: [&quot;id&quot;], // 异步加载时自动提交的父节点属性的参数<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; otherParam: [&quot;ajaxMethod&quot;, 'AnsyData'], //ajax请求时提交的参数<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type: 'post',<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dataType: 'json'<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; checkable: true,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; showIcon: true,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; showLine: true, // zTree显示连接线<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; data: { &nbsp;//用pId来标识父子节点的关系<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; simpleData: {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; enable: true<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; expandSpeed: &quot;&quot;, // 设置 zTree 节点展开、折叠的动画速度，默认为&quot;fast&quot;，&quot;&quot;表示无动画<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; callback: { // 回调函数<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; onClick: zTreeOnClick, // 单击鼠标事件<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; asyncSuccess: zTreeOnAsyncSuccess //异步加载成功事件<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; };<br /><br /><br />&nbsp; &nbsp; &nbsp; &nbsp; $(document).ready(function () {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; InitMajor();<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $.fn.zTree.init($(&quot;#treeDemo&quot;), setting, zNodes);<br />&nbsp; &nbsp; &nbsp; &nbsp; });<br /><br /><br />&nbsp; &nbsp; &nbsp; &nbsp; //初始化加载节点<br />&nbsp; &nbsp; &nbsp; &nbsp; function InitMajor() {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $.ajax({<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; url: '../Ajax/MajorData.aspx',<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type: 'post',<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dataType: 'json',<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; async: false,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; data: { 'ajaxMethod': 'FirstAnsyData' },<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; success: function (data) {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; zNodes = data;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; });<br />&nbsp; &nbsp; &nbsp; &nbsp; };<br /><br /><br />&nbsp; &nbsp; &nbsp; &nbsp; //单击时获取zTree节点的Id,和value的值<br />&nbsp; &nbsp; &nbsp; &nbsp; function zTreeOnClick(event, treeId, treeNode, clickFlag) {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var treeValue = treeNode.id + &quot;,&quot; + treeNode.name;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //单击给文本框赋值<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var Id = treeNode.pId;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var v = &quot;&quot;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (Id == '' || Id == undefined || Id == null) {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; v = treeNode.name;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; v = treeNode.name;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</span></p><p><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; <strong>&nbsp; &nbsp;<span style="color:#ff0000;"> &nbsp; //这里获取到目录树点击后的值</span></strong><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color:#ff0000;"><strong> window.returnValue = treeNode.id + &quot;|&quot; + treeNode.name;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; window.close();</strong></span><br />&nbsp; &nbsp; &nbsp; &nbsp; };<br /><br /><br />&nbsp; &nbsp; &nbsp; &nbsp; function zTreeOnAsyncSuccess(event, treeId, treeNode, msg) {<br />&nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &lt;/script&gt;<br />&lt;/head&gt;<br />&lt;body&gt;<br />&nbsp; &nbsp; &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;<br />&nbsp; &nbsp; &nbsp; &nbsp; &lt;div&gt;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;div style=&quot;text-align: center;&quot; class=&quot;midtitle&quot;&gt;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 专业类别<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/div&gt;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;div class=&quot;midtitle&quot;&gt;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;ul id=&quot;treeDemo&quot; class=&quot;ztree&quot;&gt;&lt;/ul&gt;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/div&gt;<br />&nbsp; &nbsp; &nbsp; &nbsp; &lt;/div&gt;<br />&nbsp; &nbsp; &lt;/form&gt;<br />&lt;/body&gt;<br />&lt;/html&gt;<br /></span></p><p style="text-align: center;"><img src="http://img.blog.csdn.net/20150713175150841?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" style="font-size:14px;" alt="" /><br /></p><p><br /></p>
            <div>
                作者：taomanman 发表于2015/7/13 17:53:02 <a href="http://blog.csdn.net/zdw_wym/article/details/46865693">原文链接</a>
            </div>
            <div>
            阅读：175 评论：0 <a href="http://blog.csdn.net/zdw_wym/article/details/46865693#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]asp.net 中RadioButtonList的选项改变事件处理（采用jquery操作）]]></title>
        <link>http://blog.csdn.net/zdw_wym/article/details/46820519</link>
        <guid>http://blog.csdn.net/zdw_wym/article/details/46820519</guid>
        <author>taomanman</author>
        <pubDate>2015/7/9 18:56:35</pubDate>
        <description><![CDATA[
            <p><span style="font-size:14px;">实现的效果如下图所示：</span></p><p style="text-align: center;"><span style="font-size:14px;"><img src="http://img.blog.csdn.net/20150709185354130?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<img src="http://img.blog.csdn.net/20150709185403426?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" /></span></p><p><span style="font-size:14px;">可以设置RadioButtonList的autopostback属性为true，然后处理其OnSelectedIndexChanged事件，但是这样会造成回发事件，造成页面刷新，用户体验不好，于是这里采用jquery来操作。</span></p><p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;">aspx中的页面如下代码所示：</span></p><p></p><pre name="code" class="csharp">  &lt;div style=&quot;height: 35px;&quot;&gt;
      &lt;table width=&quot;170px&quot;&gt;
              &lt;tr&gt;
                    &lt;td style=&quot;width:30px;&quot;&gt;
                             &lt;asp:Label ID=&quot;lblDate&quot; runat=&quot;server&quot; Text=&quot;对比:&quot;&gt;
                                        &lt;/asp:Label&gt;&lt;/td&gt;
                     &lt;td style=&quot;width:80px;&quot;&gt;
                                        &lt;asp:DropDownList ID=&quot;ddlYear&quot; runat=&quot;server&quot; &gt;&lt;/asp:DropDownList&gt;年&lt;/td&gt;
                      &lt;td style=&quot;width:60px;&quot;&gt;
                            &lt;span id=&quot;divMonth&quot; style=&quot;display:none;&quot;&gt;
                                  &lt;asp:DropDownList ID=&quot;ddlMonth&quot; runat=&quot;server&quot;&gt;&lt;/asp:DropDownList&gt;月&lt;/span&gt;
                     &lt;/td&gt;
               &lt;/tr&gt;
       &lt;/table&gt;
  &lt;/div&gt;
  &lt;div style=&quot;height: 35px;&quot;&gt;
        &lt;asp:RadioButtonList runat=&quot;server&quot; ID=&quot;rblType&quot;&gt;
                   &lt;asp:ListItem Value=&quot;年&quot; Text=&quot;年同环比&quot; Selected=&quot;True&quot;&gt;&lt;/asp:ListItem&gt;
                    &lt;asp:ListItem Value=&quot;月&quot; Text=&quot;月同环比&quot;&gt;&lt;/asp:ListItem&gt;
         &lt;/asp:RadioButtonList&gt;
   &lt;/div&gt;</pre><p></p><p><br /></p><p><span style="font-size:14px;">这里使用jquery来处理RadioButtonList的change事件，代码如下：</span></p><p></p><pre name="code" class="csharp"> $(function () {
      $(&quot;#&lt;%=rblType.ClientID %&gt;&quot;).change(function () {
            var SelectVal = $(&quot;:input:radio[@name='#&lt;%= rblType.ClientID%&gt; &gt; input'][checked]&quot;).val()
            if (SelectVal != &quot;年&quot;) {
                  $(&quot;#divMonth&quot;).css(&quot;display&quot;, &quot;block&quot;);
            }
            else {
                 $(&quot;#divMonth&quot;).css(&quot;display&quot;, &quot;none&quot;);
            }
     });
 });</pre><span style="font-size:14px;"><br /></span><p></p><p><span style="font-size:14px;">jquery中获取RadioButtonList中选中的值方法：</span></p><p><span style="font-size:14px;"></span></p><pre name="code" class="csharp"> //获取页面加载时RadioButtonList选中的值
 var SelectVal = $(&quot;:input:radio[@name='#&lt;%= rblType.ClientID%&gt; &gt; input'][checked]&quot;).val();</pre><br /><br /><p></p><p><span style="font-size:14px;"><br /></span></p>
            <div>
                作者：taomanman 发表于2015/7/9 18:56:35 <a href="http://blog.csdn.net/zdw_wym/article/details/46820519">原文链接</a>
            </div>
            <div>
            阅读：156 评论：1 <a href="http://blog.csdn.net/zdw_wym/article/details/46820519#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]asp.net 利用多表联合查询进行汇总统计]]></title>
        <link>http://blog.csdn.net/zdw_wym/article/details/46806563</link>
        <guid>http://blog.csdn.net/zdw_wym/article/details/46806563</guid>
        <author>taomanman</author>
        <pubDate>2015/7/8 17:54:26</pubDate>
        <description><![CDATA[
            <p><span style="font-size:14px;">3张表相关联，按照各个地区用户统计每个栏目在某个时间段的上报数量和审核数量，表结构如下图所示：</span></p><p><span style="font-size:14px;"><img src="http://img.blog.csdn.net/20150708174722124?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" width="320" height="320" alt="" />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<img src="http://img.blog.csdn.net/20150708174730604?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" width="320" height="511" alt="" />&nbsp; &nbsp;&nbsp;</span></p><p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<img src="http://img.blog.csdn.net/20150708174742300?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" width="320" height="293" alt="" /><br /></span></p><p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;">实现的效果如下图所示：</span></p><p><span style="font-size:14px;"><img src="http://img.blog.csdn.net/20150708175106983?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" width="800" height="349" alt="" /><br /></span></p><p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;">本来打算使用行转列实现，但是由于各个用户在不同时间段，有的栏目没有上报数据，造成一定问题，经过半天尝试，不行后，考虑栏目基本固定，使用Repeater嵌套实现，源码如下：</span></p><p><span style="font-size:14px;"></span></p><pre name="code" class="csharp">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeBehind=&quot;InfoTJ.aspx.cs&quot; Inherits=&quot;Portals.NewsManager.InfoTJ&quot; %&gt;

&lt;!DOCTYPE html&gt;

&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head runat=&quot;server&quot;&gt;
    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
    &lt;title&gt;上报数据信息统计&lt;/title&gt;
    &lt;script src=&quot;../Scripts/My97DatePicker/WdatePicker.js&quot;&gt;&lt;/script&gt;
    &lt;link href=&quot;../Content/ListCSS.css&quot; rel=&quot;stylesheet&quot; /&gt;
    &lt;script src=&quot;../Scripts/jquery-1.7.2.min.js&quot;&gt;&lt;/script&gt;
    &lt;style type=&quot;text/css&quot;&gt;
        body {
            font-size: 15px;
        }

        td {
            font-size: 15px;
            height: 20px;
            line-height: 20px;
        }

        .table {
            border-right: black 1px solid;
            border-bottom: black 1px solid;
        }

            .table td {
                border-top: black 1px solid;
                border-left: black 1px solid;
            }
    &lt;/style&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        //保存到Excel中
        function saveCode(obj) {
            var winname = window.open('', '_blank', 'top=10000');
            var strHTML = document.all.divTJ.innerHTML;
            winname.document.open('text/html', 'replace');
            winname.document.writeln(strHTML);
            winname.document.execCommand('saveas', '', '信息统计.xls');
            winname.close();
        }
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;
        &lt;div&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td&gt;上报账户&lt;asp:DropDownList ID=&quot;ddlAccount&quot; runat=&quot;server&quot;&gt;&lt;/asp:DropDownList&gt;&lt;/td&gt;
                    &lt;td&gt;时间自&lt;asp:TextBox ID=&quot;tbStart&quot; Width=&quot;100px&quot; onFocus=&quot;WdatePicker({isShowClear:false,readOnly:true,dateFmt:'yyyy-MM-dd'})&quot; runat=&quot;server&quot;&gt;&lt;/asp:TextBox&gt;&lt;/td&gt;
                    &lt;td&gt;至&lt;asp:TextBox ID=&quot;tbEnd&quot; Width=&quot;100px&quot; onFocus=&quot;WdatePicker({isShowClear:false,readOnly:true,dateFmt:'yyyy-MM-dd'})&quot; runat=&quot;server&quot;&gt;&lt;/asp:TextBox&gt;&lt;/td&gt;
                    &lt;td&gt;
                        &lt;asp:ImageButton ID=&quot;btnQuery&quot; runat=&quot;server&quot; ImageUrl=&quot;~/images/btnQuery.gif&quot; Text=&quot;查询&quot; OnClick=&quot;btnQuery_Click&quot; /&gt;&lt;/td&gt;
                    &lt;td&gt;
                        &lt;asp:ImageButton ID=&quot;btnExport&quot; runat=&quot;server&quot; ImageUrl=&quot;~/images/btnExcel.gif&quot; Text=&quot;导出&quot; OnClientClick=&quot;saveCode(divTJ);&quot; /&gt;&lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;
        &lt;div style=&quot;height: 5px;&quot;&gt;
        &lt;/div&gt;
        &lt;div id=&quot;divTJ&quot;&gt;
            &lt;table width=&quot;1500px;&quot; id=&quot;tableTJ&quot; class=&quot;table&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;
                &lt;tr&gt;
                    &lt;td colspan=&quot;15&quot; style=&quot;width: 1500px; text-align: center;&quot;&gt;
                        &lt;table width=&quot;1500px&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;
                            &lt;tr&gt;
                                &lt;td style=&quot;width: 100px; text-align: center; font-weight: bold;&quot;&gt;地区\类别&lt;/td&gt;
                                &lt;td colspan=&quot;14&quot; style=&quot;width: 1400px; text-align: center;&quot;&gt;
                                    &lt;table width=&quot;1400px&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;
                                        &lt;tr&gt;
                                            &lt;td style=&quot;width: 100px; text-align: center; font-weight: bold;&quot;&gt;本省动态&lt;/td&gt;
                                            &lt;td style=&quot;width: 100px; text-align: center; font-weight: bold;&quot;&gt;国内动态&lt;/td&gt;
                                            &lt;td style=&quot;width: 100px; text-align: center; font-weight: bold;&quot;&gt;通知公告&lt;/td&gt;
                                            &lt;td style=&quot;width: 100px; text-align: center; font-weight: bold;&quot;&gt;政策法规&lt;/td&gt;
                                            &lt;td style=&quot;width: 100px; text-align: center; font-weight: bold;&quot;&gt;要闻聚焦&lt;/td&gt;
                                            &lt;td style=&quot;width: 100px; text-align: center; font-weight: bold;&quot;&gt;公共机构节能&lt;/td&gt;
                                            &lt;td style=&quot;width: 100px; text-align: center; font-weight: bold;&quot;&gt;标准规范&lt;/td&gt;
                                            &lt;td style=&quot;width: 100px; text-align: center; font-weight: bold;&quot;&gt;节能产品&lt;/td&gt;
                                            &lt;td style=&quot;width: 100px; text-align: center; font-weight: bold;&quot;&gt;节能案例&lt;/td&gt;
                                            &lt;td style=&quot;width: 100px; text-align: center; font-weight: bold;&quot;&gt;节能常识&lt;/td&gt;
                                            &lt;td style=&quot;width: 100px; text-align: center; font-weight: bold;&quot;&gt;节能宣传&lt;/td&gt;
                                            &lt;td style=&quot;width: 100px; text-align: center; font-weight: bold;&quot;&gt;新产品新技术&lt;/td&gt;
                                            &lt;td style=&quot;width: 100px; text-align: center; font-weight: bold;&quot;&gt;已审核&lt;/td&gt;
                                            &lt;td style=&quot;width: 100px; text-align: center; color: red; font-weight: bold;&quot;&gt;共计&lt;/td&gt;
                                        &lt;/tr&gt;
                                    &lt;/table&gt;
                                &lt;/td&gt;
                            &lt;/tr&gt;
                        &lt;/table&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td colspan=&quot;15&quot; style=&quot;width: 1500px; text-align: center;&quot;&gt;
                        &lt;asp:Repeater ID=&quot;rptRegion&quot; runat=&quot;server&quot; OnItemDataBound=&quot;rptRegion_ItemDataBound&quot;&gt;
                            &lt;HeaderTemplate&gt;
                                &lt;table width=&quot;1500px&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;
                            &lt;/HeaderTemplate&gt;
                            &lt;ItemTemplate&gt;
                                &lt;tr&gt;
                                    &lt;td colspan=&quot;1&quot; style=&quot;width: 100px; text-align: center;&quot;&gt;&lt;%#Eval(&quot;username&quot;) %&gt;&lt;/td&gt;
                                    &lt;td colspan=&quot;14&quot; style=&quot;width: 1400px; text-align: center;&quot;&gt;
                                        &lt;asp:Repeater ID=&quot;rptV&quot; runat=&quot;server&quot;&gt;
                                            &lt;HeaderTemplate&gt;
                                                &lt;table width=&quot;1400px&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;
                                            &lt;/HeaderTemplate&gt;
                                            &lt;ItemTemplate&gt;
                                                &lt;tr&gt;
                                                    &lt;td style=&quot;width: 100px; text-align: center;&quot;&gt;&lt;%#Eval(&quot;节能产品&quot;) %&gt;&lt;/td&gt;
                                                    &lt;td style=&quot;width: 100px; text-align: center;&quot;&gt;&lt;%#Eval(&quot;节能案例&quot;) %&gt;&lt;/td&gt;
                                                    &lt;td style=&quot;width: 100px; text-align: center;&quot;&gt;&lt;%#Eval(&quot;要闻聚焦&quot;) %&gt;&lt;/td&gt;
                                                    &lt;td style=&quot;width: 100px; text-align: center;&quot;&gt;&lt;%#Eval(&quot;新产品新技术&quot;) %&gt;&lt;/td&gt;
                                                    &lt;td style=&quot;width: 100px; text-align: center;&quot;&gt;&lt;%#Eval(&quot;标准规范&quot;) %&gt;&lt;/td&gt;
                                                    &lt;td style=&quot;width: 100px; text-align: center;&quot;&gt;&lt;%#Eval(&quot;本省动态&quot;) %&gt;&lt;/td&gt;
                                                    &lt;td style=&quot;width: 100px; text-align: center;&quot;&gt;&lt;%#Eval(&quot;国内动态&quot;) %&gt;&lt;/td&gt;
                                                    &lt;td style=&quot;width: 100px; text-align: center;&quot;&gt;&lt;%#Eval(&quot;通知公告&quot;) %&gt;&lt;/td&gt;
                                                    &lt;td style=&quot;width: 100px; text-align: center;&quot;&gt;&lt;%#Eval(&quot;政策法规&quot;) %&gt;&lt;/td&gt;
                                                    &lt;td style=&quot;width: 100px; text-align: center;&quot;&gt;&lt;%#Eval(&quot;资料下载&quot;) %&gt;&lt;/td&gt;
                                                    &lt;td style=&quot;width: 100px; text-align: center;&quot;&gt;&lt;%#Eval(&quot;节能宣传&quot;) %&gt;&lt;/td&gt;
                                                    &lt;td style=&quot;width: 100px; text-align: center;&quot;&gt;&lt;%#Eval(&quot;公共机构节能&quot;) %&gt;&lt;/td&gt;
                                                    &lt;td style=&quot;width: 100px; text-align: center;&quot;&gt;&lt;%#Eval(&quot;已审核&quot;) %&gt;&lt;/td&gt;
                                                    &lt;td style=&quot;width: 100px; text-align: center; color: red; font-weight: bold;&quot;&gt;&lt;%#Eval(&quot;总计&quot;) %&gt;&lt;/td&gt;
                                                &lt;/tr&gt;
                                            &lt;/ItemTemplate&gt;
                                            &lt;FooterTemplate&gt;
                                                &lt;/table&gt;
                                            &lt;/FooterTemplate&gt;
                                        &lt;/asp:Repeater&gt;
                                    &lt;/td&gt;
                                &lt;/tr&gt;
                            &lt;/ItemTemplate&gt;
                            &lt;FooterTemplate&gt;
                                &lt;tr&gt;
                                    &lt;td style=&quot;width: 100px; text-align: center; color: blue; font-weight: bold;&quot;&gt;单项共计：&lt;/td&gt;
                                    &lt;td style=&quot;width: 1400px; text-align: center;&quot;&gt;
                                        &lt;asp:Repeater ID=&quot;rptS&quot; runat=&quot;server&quot;&gt;
                                            &lt;HeaderTemplate&gt;
                                                &lt;table width=&quot;1400px&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;
                                                    &lt;tr&gt;
                                            &lt;/HeaderTemplate&gt;
                                            &lt;ItemTemplate&gt;
                                                &lt;td style=&quot;width: 100px; text-align: center; color: blue; font-weight: bold;&quot;&gt;&lt;%#((Portals.BCL.TongJi)Container.DataItem).T1 %&gt;&lt;/td&gt;
                                                &lt;td style=&quot;width: 100px; text-align: center; color: blue; font-weight: bold;&quot;&gt;&lt;%#((Portals.BCL.TongJi)Container.DataItem).T2  %&gt;&lt;/td&gt;
                                                &lt;td style=&quot;width: 100px; text-align: center; color: blue; font-weight: bold;&quot;&gt;&lt;%#((Portals.BCL.TongJi)Container.DataItem).T3  %&gt;&lt;/td&gt;
                                                &lt;td style=&quot;width: 100px; text-align: center; color: blue; font-weight: bold;&quot;&gt;&lt;%#((Portals.BCL.TongJi)Container.DataItem).T4  %&gt;&lt;/td&gt;
                                                &lt;td style=&quot;width: 100px; text-align: center; color: blue; font-weight: bold;&quot;&gt;&lt;%#((Portals.BCL.TongJi)Container.DataItem).T5 %&gt;&lt;/td&gt;
                                                &lt;td style=&quot;width: 100px; text-align: center; color: blue; font-weight: bold;&quot;&gt;&lt;%#((Portals.BCL.TongJi)Container.DataItem).T6  %&gt;&lt;/td&gt;
                                                &lt;td style=&quot;width: 100px; text-align: center; color: blue; font-weight: bold;&quot;&gt;&lt;%#((Portals.BCL.TongJi)Container.DataItem).T7 %&gt;&lt;/td&gt;
                                                &lt;td style=&quot;width: 100px; text-align: center; color: blue; font-weight: bold;&quot;&gt;&lt;%#((Portals.BCL.TongJi)Container.DataItem).T8 %&gt;&lt;/td&gt;
                                                &lt;td style=&quot;width: 100px; text-align: center; color: blue; font-weight: bold;&quot;&gt;&lt;%#((Portals.BCL.TongJi)Container.DataItem).T9 %&gt;&lt;/td&gt;
                                                &lt;td style=&quot;width: 100px; text-align: center; color: blue; font-weight: bold;&quot;&gt;&lt;%#((Portals.BCL.TongJi)Container.DataItem).T10 %&gt;&lt;/td&gt;
                                                &lt;td style=&quot;width: 100px; text-align: center; color: blue; font-weight: bold;&quot;&gt;&lt;%#((Portals.BCL.TongJi)Container.DataItem).T11 %&gt;&lt;/td&gt;
                                                &lt;td style=&quot;width: 100px; text-align: center; color: blue; font-weight: bold;&quot;&gt;&lt;%#((Portals.BCL.TongJi)Container.DataItem).T12 %&gt;&lt;/td&gt;
                                                &lt;td style=&quot;width: 100px; text-align: center; color: blue; font-weight: bold;&quot;&gt;&lt;%#((Portals.BCL.TongJi)Container.DataItem).T13 %&gt;&lt;/td&gt;
                                                &lt;td style=&quot;width: 100px; text-align: center; color: blue; font-weight: bold;&quot;&gt;&lt;%#((Portals.BCL.TongJi)Container.DataItem).T14 %&gt;&lt;/td&gt;
                                            &lt;/ItemTemplate&gt;
                                            &lt;FooterTemplate&gt;
                                                &lt;/tr&gt;
                                                &lt;/table&gt;
                                            &lt;/FooterTemplate&gt;
                                        &lt;/asp:Repeater&gt;
                                    &lt;/td&gt;
                                &lt;/tr&gt;
                                &lt;/table&gt;
                            &lt;/FooterTemplate&gt;
                        &lt;/asp:Repeater&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre><br /><pre name="code" class="csharp">using DAL;
using Portals.BCL;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace Portals.NewsManager
{
    public partial class InfoTJ : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                BindRegion();
                //时间框赋值
                this.tbStart.Text = DateTime.Now.AddMonths(-1).ToString(&quot;yyyy-MM-dd&quot;);
                this.tbEnd.Text = DateTime.Now.ToString(&quot;yyyy-MM-dd&quot;);
                BindRepeater();
            }
        }

        public void BindRepeater()
        {

            string strSQL = @&quot;select ID,loginid,username,tag2 from T_User&quot;;
            string dl = this.ddlAccount.SelectedItem.Value.ToString();// 地区
            if (dl != &quot;-1&quot;)
            {
                strSQL += &quot; where loginid='&quot; + this.ddlAccount.SelectedItem.Value.Trim() + &quot;'&quot;;
            }
            DataTable dt = SQLHelper.DB.Sql(strSQL).QuerySingle&lt;DataTable&gt;();
            rptRegion.DataSource = dt;
            rptRegion.DataBind();
        }

        protected void rptRegion_ItemDataBound(object sender, RepeaterItemEventArgs e)
        {
            string dl = this.ddlAccount.SelectedItem.Value.ToString();// 地区
            string st = this.tbStart.Text.Trim(); //开始时间
            string et = this.tbEnd.Text.Trim(); //结束时间
            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                //项模版
                Repeater rpt2 = (System.Web.UI.WebControls.Repeater)e.Item.FindControl(&quot;rptV&quot;);
                DataRowView rowv = (DataRowView)e.Item.DataItem;
                string strSQL = @&quot;select * from 
                (
                    select count(articleid) as '节能产品' from T_NEWSARTICLES where categoryid='01' and createduser='&quot; + rowv[&quot;loginid&quot;].ToString().Trim() + @&quot;' and createddate between '&quot; + st + @&quot;' and '&quot; + et + @&quot;'
                ) T1
                ,
                (
                    select count(articleid) as '节能案例' from T_NEWSARTICLES where categoryid='02' and createduser='&quot; + rowv[&quot;loginid&quot;].ToString().Trim() + @&quot;' and createddate between '&quot; + st + @&quot;' and '&quot; + et + @&quot;'
                ) T2
                ,
                (
                    select count(articleid) as '要闻聚焦' from T_NEWSARTICLES where categoryid='03' and createduser='&quot; + rowv[&quot;loginid&quot;].ToString().Trim() + @&quot;' and createddate between '&quot; + st + @&quot;' and '&quot; + et + @&quot;'
                ) T3
                ,
                (
                    select count(articleid) as '新产品新技术' from T_NEWSARTICLES where categoryid='04' and createduser='&quot; + rowv[&quot;loginid&quot;].ToString().Trim() + @&quot;' and createddate between '&quot; + st + @&quot;' and '&quot; + et + @&quot;'
                ) T4
                ,
                (
                    select count(articleid) as '标准规范' from T_NEWSARTICLES where categoryid='05' and createduser='&quot; + rowv[&quot;loginid&quot;].ToString().Trim() + @&quot;' and createddate between '&quot; + st + @&quot;' and '&quot; + et + @&quot;'
                ) T5
                ,
                (
                    select count(articleid) as '节能常识' from T_NEWSARTICLES where categoryid='06' and createduser='&quot; + rowv[&quot;loginid&quot;].ToString().Trim() + @&quot;' and createddate between '&quot; + st + @&quot;' and '&quot; + et + @&quot;'
                ) T6
                ,
                (
                    select count(articleid) as '本省动态' from T_NEWSARTICLES where categoryid='07' and createduser='&quot; + rowv[&quot;loginid&quot;].ToString().Trim() + @&quot;' and createddate between '&quot; + st + @&quot;' and '&quot; + et + @&quot;'
                ) T7
                ,
                (
                    select count(articleid) as '国内动态' from T_NEWSARTICLES where categoryid='08' and createduser='&quot; + rowv[&quot;loginid&quot;].ToString().Trim() + @&quot;' and createddate between '&quot; + st + @&quot;' and '&quot; + et + @&quot;'
                ) T8
                ,
                (
                    select count(articleid) as '通知公告' from T_NEWSARTICLES where categoryid='09' and createduser='&quot; + rowv[&quot;loginid&quot;].ToString().Trim() + @&quot;' and createddate between '&quot; + st + @&quot;' and '&quot; + et + @&quot;'
                ) T9
                ,
                (
                    select count(articleid) as '政策法规' from T_NEWSARTICLES where categoryid='10' and createduser='&quot; + rowv[&quot;loginid&quot;].ToString().Trim() + @&quot;' and createddate between '&quot; + st + @&quot;' and '&quot; + et + @&quot;'
                ) T10
                ,
                (
                    select count(articleid) as '资料下载' from T_NEWSARTICLES where categoryid='11' and createduser='&quot; + rowv[&quot;loginid&quot;].ToString().Trim() + @&quot;' and createddate between '&quot; + st + @&quot;' and '&quot; + et + @&quot;'
                ) T11
                ,
                (
                    select count(articleid) as '节能宣传' from T_NEWSARTICLES where categoryid='13' and createduser='&quot; + rowv[&quot;loginid&quot;].ToString().Trim() + @&quot;' and createddate between '&quot; + st + @&quot;' and '&quot; + et + @&quot;'
                ) T12
                ,
                (
                    select count(articleid) as '公共机构节能' from T_NEWSARTICLES where categoryid='14' and createduser='&quot; + rowv[&quot;loginid&quot;].ToString().Trim() + @&quot;' and createddate between '&quot; + st + @&quot;' and '&quot; + et + @&quot;'
                ) T13
                ,
                (
                    select count(checkuser) as '已审核' from T_NEWSARTICLES where categoryid in ('01','02','03','04','05','06','07','08','09','10','11','13','14') and checkuser is not null and createduser='&quot; + rowv[&quot;loginid&quot;].ToString().Trim() + @&quot;' and createddate between '&quot; + st + @&quot;' and '&quot; + et + @&quot;'
                ) T14
                ,
                (
                    select count(articleid) as '总计' from T_NEWSARTICLES where categoryid in ('01','02','03','04','05','06','07','08','09','10','11','13','14') and createduser='&quot; + rowv[&quot;loginid&quot;].ToString().Trim() + @&quot;' and createddate between '&quot; + st + @&quot;' and '&quot; + et + @&quot;'
                ) T15&quot;;
                DataTable dt = SQLHelper.DB.Sql(strSQL).QuerySingle&lt;DataTable&gt;();
                rpt2.DataSource = dt;
                rpt2.ItemDataBound += rpt2_ItemDataBound;
                rpt2.DataBind();
                
            }
            if (e.Item.ItemType == ListItemType.Footer)
            {
                //在脚模版中绑定统计值
                Repeater rpt3 = (System.Web.UI.WebControls.Repeater)e.Item.FindControl(&quot;rptS&quot;);
                TongJi item = new TongJi();
                item.T1 = sum1;
                item.T2 = sum2;
                item.T3 = sum3;
                item.T4 = sum4;
                item.T5 = sum5;
                item.T6 = sum6;
                item.T7 = sum7;
                item.T8 = sum8;
                item.T9 = sum9;
                item.T10 = sum10;
                item.T11 = sum11;
                item.T12 = sum12;
                item.T13 = sum13;
                item.T14 = sum14;
                SUM.Add(item);
                rpt3.DataSource = SUM;
                rpt3.DataBind();
            }
        }

        List&lt;TongJi&gt; SUM = new List&lt;TongJi&gt;();
        int sum1 = 0;
        int sum2 = 0;
        int sum3 = 0;
        int sum4 = 0;
        int sum5 = 0;
        int sum6 = 0;
        int sum7 = 0;
        int sum8 = 0;
        int sum9 = 0;
        int sum10 = 0;
        int sum11 = 0;
        int sum12 = 0;
        int sum13 = 0;
        int sum14 = 0;
        void rpt2_ItemDataBound(object sender, RepeaterItemEventArgs e)
        {
            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {

                DataRowView drv = (DataRowView)e.Item.DataItem;
                sum1 += int.Parse(drv[&quot;本省动态&quot;].ToString());
                sum2 += int.Parse(drv[&quot;国内动态&quot;].ToString());
                sum3 += int.Parse(drv[&quot;通知公告&quot;].ToString());
                sum4 += int.Parse(drv[&quot;政策法规&quot;].ToString());
                sum5 += int.Parse(drv[&quot;要闻聚焦&quot;].ToString());
                sum6 += int.Parse(drv[&quot;公共机构节能&quot;].ToString());
                sum7 += int.Parse(drv[&quot;标准规范&quot;].ToString());

                sum8 += int.Parse(drv[&quot;节能产品&quot;].ToString());
                sum9 += int.Parse(drv[&quot;节能案例&quot;].ToString());
                sum10 += int.Parse(drv[&quot;节能常识&quot;].ToString());
                sum11 += int.Parse(drv[&quot;节能宣传&quot;].ToString());
                sum12 += int.Parse(drv[&quot;新产品新技术&quot;].ToString());

                sum13 += int.Parse(drv[&quot;已审核&quot;].ToString());
                sum14 += int.Parse(drv[&quot;总计&quot;].ToString());
                
            }
        }

        public void BindRegion()
        {
            string strSQL = @&quot;select ID,loginid,username,tag2 from T_User&quot;;
            DataTable dt = SQLHelper.DB.Sql(strSQL).QuerySingle&lt;DataTable&gt;();
            ddlAccount.DataSource = dt;
            ddlAccount.DataTextField = &quot;username&quot;;
            ddlAccount.DataValueField = &quot;loginid&quot;;
            ddlAccount.DataBind();
            this.ddlAccount.Items.Insert(0, new ListItem(&quot;==全部==&quot;, &quot;-1&quot;));
        }

        /// &lt;summary&gt;
        /// 查询
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;sender&quot;&gt;&lt;/param&gt;
        /// &lt;param name=&quot;e&quot;&gt;&lt;/param&gt;
        protected void btnQuery_Click(object sender, ImageClickEventArgs e)
        {
            BindRepeater();
        }
    }
}</pre><p>附上一个半途而废的存储过程，使用了行转列：</p><p><pre name="code" class="sql">create proc [dbo].[proc_TJ]
(
@sql_where NVARCHAR(MAX)
)
as
DECLARE @sql_str NVARCHAR(MAX)
DECLARE @sql_col NVARCHAR(MAX)
DECLARE @tableName SYSNAME --行转列表
DECLARE @groupColumn SYSNAME --分组字段
DECLARE @row2column SYSNAME --行变列的字段
DECLARE @row2columnValue SYSNAME --行变列值的字段
DECLARE @alias NVARCHAR(20)
set @alias= '地区\类别'
SET @tableName = 'v_NewsArticles'
SET @groupColumn = 'username'
SET @row2column = 'name'
SET @row2columnValue = 'articleid'
--SET @sql_where = 'WHERE  createddate between ''2015-06-01'' and ''2015-08-01'''

--从行数据中获取可能存在的列
SET @sql_str = N'
SELECT @sql_col_out = ISNULL(@sql_col_out + '','','''') + QUOTENAME(['+@row2column+']) 
    FROM ['+@tableName+'] '+@sql_where+' GROUP BY ['+@row2column+']'
--PRINT @sql_str
EXEC sp_executesql @sql_str,N'@sql_col_out NVARCHAR(MAX) OUTPUT',@sql_col_out=@sql_col OUTPUT
--PRINT @sql_col

SET @sql_str = N'
SELECT pvt.['+@groupColumn+'] as [地区\类别],pvt.[本省动态],pvt.[国内动态],pvt.[通知公告],pvt.[政策法规],pvt.[要闻聚焦],pvt.[公共机构节能],pvt.[标准规范],pvt.[节能产品],pvt.[节能案例],pvt.[节能常识],pvt.[节能宣传],pvt.[新产品新技术] FROM (
    SELECT ['+@groupColumn+'],['+@row2column+'],['+@row2columnValue+'] FROM ['+@tableName+']'+@sql_where+') p PIVOT 
    (count(['+@row2columnValue+']) FOR ['+@row2column+'] IN ( '+ @sql_col +') ) AS pvt 
ORDER BY pvt.['+@groupColumn+']'
PRINT (@sql_str)
EXEC (@sql_str)
</pre><br />在不加where条件时正常，如果加条件，就存在问题，如下图所示：</p><p><img src="http://img.blog.csdn.net/20150708175759523?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" width="800" height="497" alt="" /><br /></p><br /><p></p><p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;"><br /></span></p><p></p><p><br /></p>
            <div>
                作者：taomanman 发表于2015/7/8 17:54:26 <a href="http://blog.csdn.net/zdw_wym/article/details/46806563">原文链接</a>
            </div>
            <div>
            阅读：180 评论：0 <a href="http://blog.csdn.net/zdw_wym/article/details/46806563#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]asp.net 利用jquery让登录页面垂直居中显示]]></title>
        <link>http://blog.csdn.net/zdw_wym/article/details/46793035</link>
        <guid>http://blog.csdn.net/zdw_wym/article/details/46793035</guid>
        <author>taomanman</author>
        <pubDate>2015/7/7 18:52:49</pubDate>
        <description><![CDATA[
            <p><span style="font-size:14px;">直接源码，有不懂的请留言。</span></p><p><span style="font-size:14px;"></span><pre name="code" class="csharp">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
&lt;title&gt;权限登录&lt;/title&gt;
&lt;link href=&quot;css/master.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot; /&gt;
&lt;script src=&quot;js/jquery-1.8.2.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
       $(function(){
           divresize();
       });
       /**自应高度**/
        function divresize() {
            resizeU();
            $(window).resize(resizeU);
            //这个方法是让无论，浏览者电脑屏幕如何。都能让div居中，垂直居中，div的id是AT
            function resizeU() {
                //css(&quot;width&quot;)这样获取的是 数字加px,
                var logindiv_width = $(&quot;#AT&quot;).css(&quot;width&quot;).replace(&quot;px&quot;, &quot;&quot;);
                //css(&quot;height&quot;)这样获取的是 数字加px
                var logindiv_height = $(&quot;#AT&quot;).css(&quot;height&quot;).replace(&quot;px&quot;, &quot;&quot;);
                $(&quot;#AT&quot;).css({
                    &quot;margin-left&quot;: ($(document).width() - logindiv_width) / 2,
                    &quot;margin-top&quot;: ($(document).height() - logindiv_height) / 2,

                });
            }
        }
&lt;/script&gt;
&lt;/head&gt;

&lt;body class=&quot;move&quot;&gt;
    &lt;div id=&quot;AT&quot;&gt;
	&lt;div class=&quot;header&quot;&gt;
	     &lt;div class=&quot;headerLogo&quot;&gt;&lt;img src=&quot;images/headerLogo.gif&quot; /&gt;&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class=&quot;main&quot;&gt;
		&lt;div class=&quot;login&quot;&gt;
			&lt;div class=&quot;loginTitle&quot;&gt;
				用户权限管理系统
			&lt;/div&gt;
			&lt;div class=&quot;loginForm&quot;&gt;
				&lt;form&gt;
					&lt;div class=&quot;prompt&quot;&gt;请输入正确的用户名或密码！&lt;/div&gt;
					&lt;input type=&quot;text&quot; value=&quot;请输入用户名&quot; class=&quot;loginUser&quot; /&gt;
					&lt;input type=&quot;text&quot;  value=&quot;请输入密码&quot; class=&quot;loginPassword&quot;/&gt;
					&lt;div class=&quot;rememberPs&quot;&gt;
						&lt;input type=&quot;checkbox&quot;  class=&quot;mr10&quot; /&gt;记住密码
					&lt;/div&gt;
					&lt;input type=&quot;button&quot; class=&quot;loginBtn&quot;&gt;
				&lt;/form&gt;
			
			&lt;/div&gt;
		&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class=&quot;footer&quot;&gt;技术支持：安徽省XXX有限公司&lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>&nbsp;如下图所示：</p><p><span style="font-size:14px;"><img src="http://img.blog.csdn.net/20150707185217003?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" width="700" height="491" alt="" /><br /><br /></span></p><p><br /></p>
            <div>
                作者：taomanman 发表于2015/7/7 18:52:49 <a href="http://blog.csdn.net/zdw_wym/article/details/46793035">原文链接</a>
            </div>
            <div>
            阅读：131 评论：0 <a href="http://blog.csdn.net/zdw_wym/article/details/46793035#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]asp.net中Repeater中嵌套Repeater来显示跟外层Repeater数据相关的其他信息]]></title>
        <link>http://blog.csdn.net/zdw_wym/article/details/46743133</link>
        <guid>http://blog.csdn.net/zdw_wym/article/details/46743133</guid>
        <author>taomanman</author>
        <pubDate>2015/7/3 16:38:23</pubDate>
        <description><![CDATA[
            <p><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; &nbsp; 在实际开发中，比如在统一权限管理系统中，我们预先定义了一些列角色，我们点击每一个角色，进入一个应用系统列表，我们要知道每个应用系统中，该角色已经拥有多少菜单访问权限，我们就可以通过Repeater中嵌套Repeater来显示这些信息，如下图所示：</span></p><p style="text-align: center;"><span style="font-size:14px;"><img src="http://img.blog.csdn.net/20150703163650367?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" width="700" height="249" /><br /></span></p><p style="text-align: center;"><span style="font-size:14px;">||</span></p><p style="text-align: center;"><span style="font-size:14px;">||</span></p><p style="text-align: center;"><span style="font-size:14px;"><img src="http://img.blog.csdn.net/20150703163702792?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" width="700" height="175" /><br /></span></p><p style="text-align: center;"><span style="font-size:14px;">||</span></p><p style="text-align: center;"><span style="font-size:14px;">||</span></p><p style="text-align: center;"><span style="font-size:14px;"><img src="http://img.blog.csdn.net/20150703163720195?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" width="700" height="334" /><br /></span></p><p><span style="font-size:14px;">主要代码如下：</span></p><p><span style="font-size:14px;"></span></p><pre name="code" class="csharp"> &lt;table id=&quot;table1&quot; class=&quot;grid&quot; singleselect=&quot;true&quot;&gt;
                &lt;thead&gt;
                    &lt;tr&gt;
                        &lt;td style=&quot;width: 40px; text-align: left;&quot;&gt;
                            &lt;label id=&quot;checkAllOff&quot; onclick=&quot;CheckAllLine()&quot; title=&quot;全选&quot;&gt;
                                &nbsp;&lt;/label&gt;
                        &lt;/td&gt;
                        &lt;td style=&quot;text-align: center;&quot;&gt;应用系统名称
                        &lt;/td&gt;
                        &lt;td style=&quot;text-align: center;&quot;&gt;应用系统地址
                        &lt;/td&gt;
                        &lt;td style=&quot;text-align: center;&quot;&gt;角色权限分配情况
                        &lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tbody&gt;
                    &lt;asp:Repeater ID=&quot;rp_Item&quot; runat=&quot;server&quot; OnItemDataBound=&quot;rp_Item_ItemDataBound&quot;&gt;
                        &lt;ItemTemplate&gt;
                            &lt;tr&gt;
                                &lt;td style=&quot;width: 40px; text-align: left;&quot;&gt;
                                    &lt;input type=&quot;checkbox&quot; value=&quot;&lt;%#Eval(&quot;System_ID&quot;)%&gt;|&lt;%#Eval(&quot;System_Name&quot;)%&gt;&quot; name=&quot;checkbox&quot; /&gt;
                                &lt;/td&gt;
                                &lt;td style=&quot;text-align: center;&quot;&gt;
                                    &lt;%#Eval(&quot;System_Name&quot;)%&gt;
                                &lt;/td&gt;
                                &lt;td style=&quot;text-align: center;&quot;&gt;
                                    &lt;%#Eval(&quot;System_Url&quot;)%&gt;
                                &lt;/td&gt;
                                &lt;td style=&quot;text-align: center;&quot;&gt;
                                    &lt;asp:Repeater ID=&quot;rp_Use&quot; runat=&quot;server&quot;&gt;
                                        &lt;ItemTemplate&gt;
                                            &lt;%#((AT.Web.ATBase.SysRole.cMsg)Container.DataItem).msg %&gt;
                                        &lt;/ItemTemplate&gt;
                                    &lt;/asp:Repeater&gt;
                                &lt;/td&gt;
                            &lt;/tr&gt;
                        &lt;/ItemTemplate&gt;
                        &lt;FooterTemplate&gt;
                            &lt;% if (rp_Item != null)
                               {
                                   if (rp_Item.Items.Count == 0)
                                   {
                                       Response.Write(&quot;&lt;tr&gt;&lt;td colspan='4' style='color:red;text-align:center'&gt;没有找到您要的相关数据！&lt;/td&gt;&lt;/tr&gt;&quot;);
                                   }
                               } %&gt;
                        &lt;/FooterTemplate&gt;
                    &lt;/asp:Repeater&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;</pre><br /><pre name="code" class="csharp"> public string _Roles_Name;
        public string _key;
        private AT_System_IDAO system_idao = new AT_System_Dal();

        protected void Page_Load(object sender, EventArgs e)
        {
            if (!base.IsPostBack)
            {
                this._Roles_Name = base.Server.UrlDecode(base.Request[&quot;Roles_Name&quot;]);
                this._key = base.Request[&quot;key&quot;];
                this.InitData();
            }
        }

        /// &lt;summary&gt;
        /// 初始化绑定列表数据
        /// &lt;/summary&gt;
        private void InitData()
        {
            DataTable dt = this.system_idao.GetApplicationList();
            ControlBindHelper.BindRepeaterList(dt, this.rp_Item);
        }

        protected void rp_Item_ItemDataBound(object sender, RepeaterItemEventArgs e)
        {
            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                Repeater rpt2 = (System.Web.UI.WebControls.Repeater)e.Item.FindControl(&quot;rp_Use&quot;);
                DataRowView rowv = (DataRowView)e.Item.DataItem;//找到外层Repeater关联的数据项  
                string systemId = rowv[&quot;System_ID&quot;].ToString();
                DataTable dtList = this.system_idao.GetMenuBindBySystemId(systemId);
                DataTable dtRoleRight = this.system_idao.InitRoleRight(this._key, systemId);
                string msg = &quot;已分配&lt;font color='blue'&gt;&quot; + dtRoleRight.Rows.Count + &quot;&lt;/font&gt;/共&lt;font color='red'&gt;&quot; + dtList.Rows.Count + &quot;&lt;/font&gt;个菜单！&quot;;
                List&lt;cMsg&gt; result = new List&lt;cMsg&gt;();
                cMsg item = new cMsg();
                item.msg = msg;
                result.Add(item);

                if (result != null)
                {
                    rpt2.DataSource = result;
                    rpt2.DataBind();
                }
            }
        }</pre><br /><br /><p></p><p><span style="font-size:14px;"><br /></span></p>
            <div>
                作者：taomanman 发表于2015/7/3 16:38:23 <a href="http://blog.csdn.net/zdw_wym/article/details/46743133">原文链接</a>
            </div>
            <div>
            阅读：298 评论：0 <a href="http://blog.csdn.net/zdw_wym/article/details/46743133#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]asp.net中利用NPOI导出数据到excel中]]></title>
        <link>http://blog.csdn.net/zdw_wym/article/details/46741957</link>
        <guid>http://blog.csdn.net/zdw_wym/article/details/46741957</guid>
        <author>taomanman</author>
        <pubDate>2015/7/3 15:15:43</pubDate>
        <description><![CDATA[
            <p><span style="font-size:14px;">asp.net中利用NPOI实现导出DataSet到Excel中，首先下载对应的dll，下载地址：<a target=_blank href="http://download.csdn.net/detail/taomanman/8865699">http://download.csdn.net/detail/taomanman/8865699</a></span></p><p><span style="font-size:14px;">将其添加到项目引用中。</span></p><p><span style="font-size:14px;">下面给出一个方法NPOIHelper.cs，代码如下：</span></p><p><span style="font-size:14px;"></span></p><pre name="code" class="csharp">using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Configuration;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.IO;
using System.Reflection;
using System.Text;
using NPOI;
using NPOI.HPSF;
using NPOI.HSSF;
using NPOI.SS.UserModel;
using NPOI.HSSF.UserModel;
using NPOI.SS.Util;
using NPOI.POIFS;
using NPOI.Util;
using NPOI.HSSF.Util;
using NPOI.XSSF.UserModel;

/// &lt;summary&gt;
///NPOIHelper 的摘要说明
/// &lt;/summary&gt;
public class NPOIHelper
{
    #region 由DataSet、DataTable导出Excel
    /// &lt;summary&gt;
    /// 由DataSet导出Excel,被外界调用的方法
    /// &lt;/summary&gt;   
    /// &lt;param name=&quot;sourceTable&quot;&gt;要导出数据的DataTable&lt;/param&gt;
    /// &lt;param name=&quot;fileName&quot;&gt;指定Excel工作表名称&lt;/param&gt;
    /// &lt;param name=&quot;fileName&quot;&gt;strType=0:普通格式 1有格式化的形式&lt;/param&gt;
    /// &lt;returns&gt;Excel工作表&lt;/returns&gt;    
    public static void ExportDataSetToExcel(DataSet sourceDs, string fileName, string sheetName, string strType)
    {
        MemoryStream ms = null;
        if (strType == &quot;0&quot;)
        {
            ms = ExportDataSetToBasicExcel(sourceDs, sheetName) as MemoryStream;
        }
        else
        {
            ms = ExportDataSetToFormatExcel(sourceDs, sheetName) as MemoryStream;
        }
        HttpContext.Current.Response.AppendHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=&quot; + HttpUtility.UrlEncode(fileName, Encoding.UTF8) + &quot;.xls&quot;);
        HttpContext.Current.Response.BinaryWrite(ms.ToArray());
        HttpContext.Current.Response.End();
        ms.Close();
        ms = null;
    }

    /// &lt;summary&gt;
    /// 由DataSet导出Excel(基本形式)
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;sourceTable&quot;&gt;要导出数据的DataTable&lt;/param&gt;    
    /// &lt;param name=&quot;sheetName&quot;&gt;工作表名称&lt;/param&gt;
    /// &lt;returns&gt;Excel工作表&lt;/returns&gt;    
    private static Stream ExportDataSetToBasicExcel(DataSet sourceDs, string sheetName)
    {
        HSSFWorkbook workbook = new HSSFWorkbook();
        MemoryStream ms = new MemoryStream();
        string[] sheetNames = sheetName.Split(new string[] { &quot;;&quot; }, StringSplitOptions.RemoveEmptyEntries); //分割符
        for (int i = 0; i &lt; sheetNames.Length; i++)
        {
            HSSFSheet sheet = (HSSFSheet)workbook.CreateSheet(sheetNames[i]);

            // handling value.            
            int rowIndex = 0;
            int sheetnum = 1;
            foreach (DataRow row in sourceDs.Tables[i].Rows)
            {
                #region 创建表头
                if (rowIndex == 65535 || rowIndex == 0)
                {
                    if (rowIndex != 0)
                    {
                        sheetnum++;
                        sheet = (HSSFSheet)workbook.CreateSheet(sheetNames[i] + &quot;-&quot; + sheetnum.ToString());
                    }
                    var headerRow = sheet.CreateRow(0);
                    var headStyle = workbook.CreateCellStyle();
                    headStyle.Alignment = HorizontalAlignment.CENTER;
                    var font = workbook.CreateFont();
                    font.FontHeightInPoints = 10;
                    font.Boldweight = 700;
                    headStyle.SetFont(font);
                    foreach (DataColumn column in sourceDs.Tables[i].Columns)
                        headerRow.CreateCell(column.Ordinal).SetCellValue(column.ColumnName);
                    rowIndex = 1;
                }
                #endregion

                #region 创建内容
                HSSFRow dataRow = (HSSFRow)sheet.CreateRow(rowIndex);
                foreach (DataColumn column in sourceDs.Tables[i].Columns)
                {
                    dataRow.CreateCell(column.Ordinal).SetCellValue(row[column].ToString());
                }
                rowIndex++;
                #endregion
            }
        }
        workbook.Write(ms);
        ms.Flush();
        ms.Position = 0;
        workbook = null;
        return ms;
    }

    /// &lt;summary&gt;
    /// 由DataSet导出Excel(带有格式)
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;sourceTable&quot;&gt;要导出数据的DataTable&lt;/param&gt;    
    /// &lt;param name=&quot;sheetName&quot;&gt;工作表名称&lt;/param&gt;
    /// &lt;returns&gt;Excel工作表&lt;/returns&gt;
    private static Stream ExportDataSetToFormatExcel(DataSet sourceDs, string sheetName)
    {
        HSSFWorkbook workbook = new HSSFWorkbook();
        MemoryStream ms = new MemoryStream();
        string[] sheetNames = sheetName.Split(new string[] { &quot;;&quot; }, StringSplitOptions.RemoveEmptyEntries); //分割符
        for (int i = 0; i &lt; sheetNames.Length; i++)
        {
            HSSFSheet sheet = (HSSFSheet)workbook.CreateSheet(sheetNames[i]);


            var dateStyle = workbook.CreateCellStyle();
            var format = workbook.CreateDataFormat();
            dateStyle.DataFormat = format.GetFormat(&quot;yyyy-mm-dd&quot;);

            //取得列宽  
            int[] arrColWidth = new int[sourceDs.Tables[i].Columns.Count];
            foreach (DataColumn item in sourceDs.Tables[i].Columns)
            {
                arrColWidth[item.Ordinal] = Encoding.GetEncoding(936).GetBytes(item.ColumnName.ToString()).Length;
            }
            for (int k = 0; k &lt; sourceDs.Tables[i].Rows.Count; k++)
            {
                for (int j = 0; j &lt; sourceDs.Tables[i].Columns.Count; j++)
                {
                    int intTemp = Encoding.GetEncoding(936).GetBytes(sourceDs.Tables[i].Rows[k][j].ToString()).Length;
                    if (intTemp &gt; arrColWidth[j])
                    {
                        arrColWidth[j] = intTemp;
                    }
                }
            }

            int rowIndex = 0;
            int sheetnum = 1;
            foreach (DataRow row in sourceDs.Tables[i].Rows)
            {
                #region 创建表头
                if (rowIndex == 65535 || rowIndex == 0)
                {
                    if (rowIndex != 0)
                    {
                        sheetnum++;
                        sheet = (HSSFSheet)workbook.CreateSheet(sheetNames[i] + &quot;-&quot; + sheetnum.ToString());
                    }
                    var headerRow = sheet.CreateRow(0);
                    var headStyle = workbook.CreateCellStyle();
                    headStyle.Alignment = HorizontalAlignment.CENTER;
                    var font = workbook.CreateFont();
                    font.FontHeightInPoints = 10;
                    font.Boldweight = 700;
                    headStyle.SetFont(font);

                    //设置边框
                    headStyle.BorderBottom = NPOI.SS.UserModel.BorderStyle.THIN;
                    headStyle.BottomBorderColor = HSSFColor.BLACK.index;
                    headStyle.BorderLeft = NPOI.SS.UserModel.BorderStyle.THIN;
                    headStyle.LeftBorderColor = HSSFColor.GREEN.index;
                    headStyle.BorderRight = NPOI.SS.UserModel.BorderStyle.THIN;
                    headStyle.RightBorderColor = HSSFColor.BLUE.index;
                    headStyle.BorderTop = NPOI.SS.UserModel.BorderStyle.THIN;
                    headStyle.TopBorderColor = HSSFColor.ORANGE.index;
                   //设置背景色
                    headStyle.FillForegroundColor = NPOI.HSSF.Util.HSSFColor.LIME.index;
                    headStyle.FillPattern = NPOI.SS.UserModel.FillPatternType.BIG_SPOTS;
                    headStyle.FillBackgroundColor = NPOI.HSSF.Util.HSSFColor.LIGHT_GREEN.index;

                    foreach (DataColumn column in sourceDs.Tables[i].Columns)
                    {
                        headerRow.CreateCell(column.Ordinal).SetCellValue(column.ColumnName);
                        headerRow.GetCell(column.Ordinal).CellStyle = headStyle;
                        //设置列宽  
                        sheet.SetColumnWidth(column.Ordinal, (arrColWidth[column.Ordinal] + 1) * 256);
                    }
                    rowIndex = 1;
                }
                #endregion

                #region 创建内容
                var dataRow = sheet.CreateRow(rowIndex);
                foreach (DataColumn column in sourceDs.Tables[i].Columns)
                {
                    var newCell = dataRow.CreateCell(column.Ordinal);

                    string drValue = row[column].ToString();

                    switch (column.DataType.ToString())
                    {
                        case &quot;System.String&quot;://字符串类型  
                            newCell.SetCellValue(drValue);
                            break;
                        case &quot;System.DateTime&quot;://日期类型  
                        case &quot;MySql.Data.Types.MySqlDateTime&quot;: //MySql类型
                            if (drValue == &quot;0000/0/0 0:00:00&quot; || String.IsNullOrEmpty(drValue))
                            {
                                //当时间为空，防止生成的execl 中是一串“#######”号，所有赋值为空字符串
                                newCell.SetCellValue(&quot;&quot;);
                            }
                            else
                            {
                                DateTime dateV;
                                DateTime.TryParse(drValue, out dateV);
                                newCell.SetCellValue(dateV);
                                newCell.CellStyle = dateStyle;//格式化显示  
                            }
                            break;
                        case &quot;System.Boolean&quot;://布尔型  
                            bool boolV = false;
                            bool.TryParse(drValue, out boolV);
                            newCell.SetCellValue(boolV);
                            break;
                        case &quot;System.Int16&quot;://整型  
                        case &quot;System.Int32&quot;:
                        case &quot;System.Int64&quot;:
                        case &quot;System.Byte&quot;:
                            int intV = 0;
                            int.TryParse(drValue, out intV);
                            newCell.SetCellValue(intV);
                            break;
                        case &quot;System.Decimal&quot;://浮点型  
                        case &quot;System.Double&quot;:
                            double doubV = 0;
                            double.TryParse(drValue, out doubV);
                            newCell.SetCellValue(doubV);
                            break;
                        case &quot;System.DBNull&quot;://空值处理  
                            newCell.SetCellValue(&quot;&quot;);
                            break;
                        default:
                            newCell.SetCellValue(&quot;&quot;);
                            break;
                    }
                }
                #endregion
                rowIndex++;
            }
            //设置首行首列冻结
            //第一个参数表示要冻结的列数
            //第二个参数表示要冻结的行数
            //第三个参数表示右边区域可见的首列序号，从1开始计算
            //第四个参数表示下边区域可见的首行序号，也是从1开始计算
            sheet.CreateFreezePane(1, 1, 0, 10);
        }
        workbook.Write(ms);
        ms.Flush();
        ms.Position = 0;
        workbook = null;
        return ms;
    }
    /// &lt;summary&gt;
    /// 由DataTable导出Excel,基本方法
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;sourceTable&quot;&gt;要导出数据的DataTable&lt;/param&gt; 
    /// &lt;returns&gt;Excel工作表&lt;/returns&gt;    
    private static Stream ExportDataTableToBasicExcel(DataTable sourceTable, string sheetName)
    {
        HSSFWorkbook workbook = new HSSFWorkbook();
        MemoryStream ms = new MemoryStream();
        var sheet = workbook.CreateSheet(sheetName);

        int rowIndex = 0;
        int sheetnum = 1;
        foreach (DataRow row in sourceTable.Rows)
        {
            #region 创建表头
            if (rowIndex == 65535 || rowIndex == 0)
            {
                if (rowIndex != 0)
                {
                    sheetnum++;
                    sheet = workbook.CreateSheet(sheetName + &quot;-&quot; + sheetnum.ToString());
                }
                var headerRow = sheet.CreateRow(0);
                var headStyle = workbook.CreateCellStyle();
                headStyle.Alignment = HorizontalAlignment.CENTER;
                var font = workbook.CreateFont();
                font.FontHeightInPoints = 10;
                font.Boldweight = 700;
                headStyle.SetFont(font);
                foreach (DataColumn column in sourceTable.Columns)
                    headerRow.CreateCell(column.Ordinal).SetCellValue(column.ColumnName);
                rowIndex = 1;
            }
            #endregion

            HSSFRow dataRow = (HSSFRow)sheet.CreateRow(rowIndex);
            foreach (DataColumn column in sourceTable.Columns)
            {
                dataRow.CreateCell(column.Ordinal).SetCellValue(row[column].ToString());
            }
            rowIndex++;
        }
        workbook.Write(ms);
        ms.Flush();
        ms.Position = 0;
        sheet = null;
        workbook = null;
        return ms;
    }


    /// &lt;summary&gt;
    /// 带格式化的
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;dtSource&quot;&gt;数据源&lt;/param&gt;
    /// &lt;param name=&quot;sheetName&quot;&gt;创建的Sheet名称&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    private static Stream ExportDataTableToFormatExcel(DataTable dtSource, string sheetName)
    {
        HSSFWorkbook workbook = new HSSFWorkbook();
        var sheet = workbook.CreateSheet(sheetName);

        var dateStyle = workbook.CreateCellStyle();
        var format = workbook.CreateDataFormat();
        dateStyle.DataFormat = format.GetFormat(&quot;yyyy-mm-dd&quot;);

        //取得列宽  
        int[] arrColWidth = new int[dtSource.Columns.Count];
        foreach (DataColumn item in dtSource.Columns)
        {
            arrColWidth[item.Ordinal] = Encoding.GetEncoding(936).GetBytes(item.ColumnName.ToString()).Length;
        }
        for (int i = 0; i &lt; dtSource.Rows.Count; i++)
        {
            for (int j = 0; j &lt; dtSource.Columns.Count; j++)
            {
                int intTemp = Encoding.GetEncoding(936).GetBytes(dtSource.Rows[i][j].ToString()).Length;
                if (intTemp &gt; arrColWidth[j])
                {
                    arrColWidth[j] = intTemp;
                }
            }
        }

        int rowIndex = 0;

        int sheetnum = 1;

        foreach (DataRow row in dtSource.Rows)
        {
            #region 新建表，填充表头，填充列头，样式
            if (rowIndex == 65535 || rowIndex == 0)
            {
                if (rowIndex != 0)
                {
                    sheetnum++;
                    sheet = workbook.CreateSheet(sheetName + &quot;-&quot; + sheetnum.ToString());
                }

                #region 列头及样式
                {
                    var headerRow = sheet.CreateRow(0);
                    var headStyle = workbook.CreateCellStyle();
                    headStyle.Alignment = HorizontalAlignment.CENTER;
                    var font = workbook.CreateFont();
                    font.FontHeightInPoints = 10;
                    font.Boldweight = 700;
                    headStyle.SetFont(font);
                    //设置背景色
                    headStyle.FillForegroundColor = NPOI.HSSF.Util.HSSFColor.WHITE.index;
                    headStyle.FillBackgroundColor = NPOI.HSSF.Util.HSSFColor.RED.index;


                    foreach (DataColumn column in dtSource.Columns)
                    {
                        headerRow.CreateCell(column.Ordinal).SetCellValue(column.ColumnName);
                        headerRow.GetCell(column.Ordinal).CellStyle = headStyle;
                        //设置列宽  
                        sheet.SetColumnWidth(column.Ordinal, (arrColWidth[column.Ordinal] + 1) * 256);
                    }
                }
                #endregion
                rowIndex = 1;
            }
            #endregion


            #region 填充内容
            var dataRow = sheet.CreateRow(rowIndex);
            foreach (DataColumn column in dtSource.Columns)
            {
                var newCell = dataRow.CreateCell(column.Ordinal);

                string drValue = row[column].ToString();

                switch (column.DataType.ToString())
                {
                    case &quot;System.String&quot;://字符串类型  
                        newCell.SetCellValue(drValue);
                        break;
                    case &quot;System.DateTime&quot;://日期类型  
                    case &quot;MySql.Data.Types.MySqlDateTime&quot;: //MySql类型
                        if (drValue == &quot;0000/0/0 0:00:00&quot; || String.IsNullOrEmpty(drValue))
                        {
                            //当时间为空，防止生成的execl 中是一串“#######”号，所有赋值为空字符串
                            newCell.SetCellValue(&quot;&quot;);
                        }
                        else
                        {
                            DateTime dateV;
                            DateTime.TryParse(drValue, out dateV);
                            newCell.SetCellValue(dateV);

                            newCell.CellStyle = dateStyle;//格式化显示  
                        }
                        break;
                    case &quot;System.Boolean&quot;://布尔型  
                        bool boolV = false;
                        bool.TryParse(drValue, out boolV);
                        newCell.SetCellValue(boolV);
                        break;
                    case &quot;System.Int16&quot;://整型  
                    case &quot;System.Int32&quot;:
                    case &quot;System.Int64&quot;:
                    case &quot;System.Byte&quot;:
                        int intV = 0;
                        int.TryParse(drValue, out intV);
                        newCell.SetCellValue(intV);
                        break;
                    case &quot;System.Decimal&quot;://浮点型  
                    case &quot;System.Double&quot;:
                        double doubV = 0;
                        double.TryParse(drValue, out doubV);
                        newCell.SetCellValue(doubV);
                        break;
                    case &quot;System.DBNull&quot;://空值处理  
                        newCell.SetCellValue(&quot;&quot;);
                        break;
                    default:
                        newCell.SetCellValue(&quot;&quot;);
                        break;
                }

            }
            #endregion

            rowIndex++;
        }     
        using (MemoryStream ms = new MemoryStream())
        {
            workbook.Write(ms);
            ms.Flush();
            ms.Position = 0;
            return ms;
        }
    }

    /// &lt;summary&gt;
    /// 由DataTable导出Excel
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;sourceTable&quot;&gt;要导出数据的DataTable&lt;/param&gt;
    /// &lt;param name=&quot;fileName&quot;&gt;指定Excel工作表名称&lt;/param&gt;
    /// &lt;param name=&quot;sheetName&quot;&gt;指定Sheet名称&lt;/param&gt;
    /// &lt;param name=&quot;strType&quot;&gt;strType=0:基本的，1：带有格式的&lt;/param&gt;
    /// &lt;returns&gt;Excel工作表&lt;/returns&gt;
    public static void ExportDataTableToExcel(DataTable sourceTable, string fileName, string sheetName, string strType)
    {
        MemoryStream ms = null;
        if (strType == &quot;0&quot;)
        {
            ms = ExportDataTableToBasicExcel(sourceTable, sheetName) as MemoryStream;
        }
        else
        {
            ms = ExportDataTableToFormatExcel(sourceTable, sheetName) as MemoryStream;
        }

        HttpContext.Current.Response.AppendHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=&quot; + HttpUtility.UrlEncode(fileName, Encoding.UTF8) + &quot;.xls&quot;);
        HttpContext.Current.Response.BinaryWrite(ms.ToArray());
        HttpContext.Current.Response.End();
        ms.Close();
        ms = null;
    }

    /// &lt;summary&gt;
    /// 由DataTable导出Excel(适应于基本的模版导出，且不超过65535条)
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;sourceTable&quot;&gt;要导出数据的DataTable&lt;/param&gt;
    /// &lt;param name=&quot;modelpath&quot;&gt;模版文件实体路径&lt;/param&gt;
    /// &lt;param name=&quot;modelName&quot;&gt;模版文件名称&lt;/param&gt;
    /// &lt;param name=&quot;fileName&quot;&gt;指定Excel工作表名称&lt;/param&gt;
    /// &lt;param name=&quot;sheetName&quot;&gt;作为模型的Excel&lt;/param&gt;
    /// &lt;param name=&quot;rowindex&quot;&gt;从第几行开始写入数据(此为行索引，若为1则从第2行开始写入数据)&lt;/param&gt;
    /// &lt;returns&gt;Excel工作表&lt;/returns&gt;
    public static void ExportDataTableToExcelModel(DataTable sourceTable, string modelpath, string modelName, string fileName, string sheetName, int rowIndex)
    {
        int colIndex = 0;
        FileStream file = new FileStream(modelpath + &quot;/&quot; + modelName, FileMode.Open, FileAccess.Read);//读入excel模板
        HSSFWorkbook hssfworkbook = new HSSFWorkbook(file);
        HSSFSheet sheet1 = (HSSFSheet)hssfworkbook.GetSheet(sheetName);
        if (sourceTable.Rows.Count + rowIndex &gt; 65535)
        {
            throw new ArgumentException(&quot;数据太多，系统尚不支持，请缩小查询范围!&quot;);
        }

        foreach (DataRow row in sourceTable.Rows)
        {   //双循环写入sourceTable中的数据
            colIndex = 0;
            HSSFRow xlsrow = (HSSFRow)sheet1.CreateRow(rowIndex);
            foreach (DataColumn col in sourceTable.Columns)
            {
                xlsrow.CreateCell(colIndex).SetCellValue(row[col.ColumnName].ToString());
                colIndex++;
            }
            rowIndex++;
        }
        sheet1.ForceFormulaRecalculation = true;

        //CS项目适用胡方法
        //FileStream fileS = new FileStream(modelpath + fileName + &quot;.xls&quot;, FileMode.Create);//保存
        //hssfworkbook.Write(fileS);
        //fileS.Close();
        MemoryStream ms = new MemoryStream();
        hssfworkbook.Write(ms);

        HttpContext.Current.Response.AppendHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=&quot; + HttpUtility.UrlEncode(fileName, Encoding.UTF8) + &quot;.xls&quot;);
        HttpContext.Current.Response.BinaryWrite(ms.ToArray());
        HttpContext.Current.Response.End();
        ms.Close();
        ms = null;
    } 
    #endregion

    #region 从Excel中读数据到DataTable
    /// &lt;summary&gt;
    /// 从Excel中获取数据到DataTable
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;strFileName&quot;&gt;Excel文件全路径(服务器路径)&lt;/param&gt;
    /// &lt;param name=&quot;extension&quot;&gt;Excel文件的扩展名&lt;/param&gt;
    /// &lt;param name=&quot;SheetName&quot;&gt;要获取数据的工作表名称&lt;/param&gt;
    /// &lt;param name=&quot;HeaderRowIndex&quot;&gt;工作表标题行所在行号(从0开始)&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static DataTable RenderDataTableFromExcel(string strFileName, string extension, string SheetName, int HeaderRowIndex)
    {
        using (FileStream file = new FileStream(strFileName, FileMode.Open, FileAccess.Read))
        {
            IWorkbook workbook = null;
            if (extension.Equals(&quot;.xls&quot;) || extension.Equals(&quot;.XLS&quot;))
            {
                workbook = new HSSFWorkbook(file);
            }
            else
            {
                workbook = new XSSFWorkbook(file);
            }
            return RenderDataTableFromExcel(workbook, SheetName, HeaderRowIndex);
        }
    }

    /// &lt;summary&gt;
    /// 从Excel中获取数据到DataTable
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;strFileName&quot;&gt;Excel文件全路径(服务器路径)&lt;/param&gt;
    /// &lt;param name=&quot;extension&quot;&gt;Excel文件的扩展名&lt;/param&gt;
    /// &lt;param name=&quot;SheetIndex&quot;&gt;要获取数据的工作表序号(从0开始)&lt;/param&gt;
    /// &lt;param name=&quot;HeaderRowIndex&quot;&gt;工作表标题行所在行号(从0开始)&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static DataTable RenderDataTableFromExcel(string strFileName, string extension, int SheetIndex, int HeaderRowIndex)
    {
        using (FileStream file = new FileStream(strFileName, FileMode.Open, FileAccess.Read))
        {
            IWorkbook workbook = null;
            if (extension.Equals(&quot;.xls&quot;) || extension.Equals(&quot;.XLS&quot;))
            {
                workbook = new HSSFWorkbook(file);
            }
            else
            {
                workbook = new XSSFWorkbook(file);
            }

            string SheetName = workbook.GetSheetName(SheetIndex);
            return RenderDataTableFromExcel(workbook, SheetName, HeaderRowIndex);
        }
    }

    /// &lt;summary&gt;
    /// 从Excel中获取数据到DataTable
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;ExcelFileStream&quot;&gt;Excel文件流&lt;/param&gt;
    /// &lt;param name=&quot;SheetName&quot;&gt;要获取数据的工作表名称&lt;/param&gt;
    /// &lt;param name=&quot;HeaderRowIndex&quot;&gt;工作表标题行所在行号(从0开始)&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static DataTable RenderDataTableFromExcel(Stream ExcelFileStream, string SheetName, int HeaderRowIndex)
    {
        IWorkbook workbook = new HSSFWorkbook(ExcelFileStream);
        ExcelFileStream.Close();
        return RenderDataTableFromExcel(workbook, SheetName, HeaderRowIndex);
    }

    /// &lt;summary&gt;
    /// 从Excel中获取数据到DataTable
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;ExcelFileStream&quot;&gt;Excel文件流&lt;/param&gt;
    /// &lt;param name=&quot;SheetIndex&quot;&gt;要获取数据的工作表序号(从0开始)&lt;/param&gt;
    /// &lt;param name=&quot;HeaderRowIndex&quot;&gt;工作表标题行所在行号(从0开始)&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static DataTable RenderDataTableFromExcel(Stream ExcelFileStream, int SheetIndex, int HeaderRowIndex)
    {
        IWorkbook workbook = new HSSFWorkbook(ExcelFileStream);
        ExcelFileStream.Close();
        string SheetName = workbook.GetSheetName(SheetIndex);
        return RenderDataTableFromExcel(workbook, SheetName, HeaderRowIndex);
    }

    /// &lt;summary&gt;
    /// 从Excel中获取数据到DataTable
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;workbook&quot;&gt;要处理的工作薄&lt;/param&gt;
    /// &lt;param name=&quot;SheetName&quot;&gt;要获取数据的工作表名称&lt;/param&gt;
    /// &lt;param name=&quot;HeaderRowIndex&quot;&gt;工作表标题行所在行号(从0开始)&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static DataTable RenderDataTableFromExcel(IWorkbook workbook, string SheetName, int HeaderRowIndex)
    {
        ISheet sheet = workbook.GetSheet(SheetName);
        DataTable table = new DataTable();
        try
        {
            IRow headerRow = sheet.GetRow(HeaderRowIndex);
            int cellCount = headerRow.LastCellNum;

            for (int i = headerRow.FirstCellNum; i &lt; cellCount; i++)
            {
                DataColumn column = new DataColumn(headerRow.GetCell(i).StringCellValue);
                table.Columns.Add(column);
            }

            int rowCount = sheet.LastRowNum;

            #region 循环各行各列,写入数据到DataTable
            for (int i = (sheet.FirstRowNum + 1); i &lt; sheet.LastRowNum; i++)
            {
                IRow row = sheet.GetRow(i);
                DataRow dataRow = table.NewRow();
                for (int j = row.FirstCellNum; j &lt; cellCount; j++)
                {
                    ICell cell = row.GetCell(j);
                    if (cell == null)
                    {
                        dataRow[j] = null;
                    }
                    else
                    {
                        switch (cell.CellType)
                        {
                            case CellType.BLANK:
                                dataRow[j] = null;
                                break;
                            case CellType.BOOLEAN:
                                dataRow[j] = cell.BooleanCellValue;
                                break;
                            case CellType.NUMERIC:
                                dataRow[j] = cell.ToString();
                                break;
                            case CellType.STRING:
                                dataRow[j] = cell.StringCellValue;
                                break;
                            case CellType.ERROR:
                                dataRow[j] = cell.ErrorCellValue;
                                break;
                            case CellType.FORMULA:
                            default:
                                dataRow[j] = &quot;=&quot; + cell.CellFormula;
                                break;
                        }
                    }
                }
                table.Rows.Add(dataRow);
                //dataRow[j] = row.GetCell(j).ToString();
            }
            #endregion
        }
        catch (System.Exception ex)
        {
            table.Clear();
            table.Columns.Clear();
            table.Columns.Add(&quot;出错了&quot;);
            DataRow dr = table.NewRow();
            dr[0] = ex.Message;
            table.Rows.Add(dr);
            return table;
        }
        finally
        {
            //sheet.Dispose();
            workbook = null;
            sheet = null;
        }
        #region 清除最后的空行
        for (int i = table.Rows.Count - 1; i &gt; 0; i--)
        {
            bool isnull = true;
            for (int j = 0; j &lt; table.Columns.Count; j++)
            {
                if (table.Rows[i][j] != null)
                {
                    if (table.Rows[i][j].ToString() != &quot;&quot;)
                    {
                        isnull = false;
                        break;
                    }
                }
            }
            if (isnull)
            {
                table.Rows[i].Delete();
            }
        }
        #endregion
        return table;
    }
    #endregion
}</pre><br />aspx页面中某个按钮的点击事件代码如下调用：<p></p><p><span style="font-size:14px;">DataSet <span style="color:#ff0000;">ds </span>= XXXX(); //用于获取数据库数据<br /><span style="color:#ff0000;">NPOIHelper.ExportDataSetToExcel</span>(<span style="color:#ff0000;">ds</span>, <span style="color:#3366ff;">&quot;统计报表&quot; + DateTime.Now.ToString(&quot;yyyyMMddHHmmss&quot;)</span>, &quot;<span style="color:#006600;">统计表</span>&quot;, &quot;0&quot;);<br /></span></p><p><span style="font-size:14px;"><img src="http://img.blog.csdn.net/20150703151458217?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemR3X3d5bQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" width="700" height="485" /><br /></span></p><p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;"><img src="http://img.blog.csdn.net/20150703151516962?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemR3X3d5bQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" /><br /></span></p><p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;"><br /></span></p>
            <div>
                作者：taomanman 发表于2015/7/3 15:15:43 <a href="http://blog.csdn.net/zdw_wym/article/details/46741957">原文链接</a>
            </div>
            <div>
            阅读：333 评论：0 <a href="http://blog.csdn.net/zdw_wym/article/details/46741957#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]asp.net中DataTable和List&lt;T&gt;之间相互转换]]></title>
        <link>http://blog.csdn.net/zdw_wym/article/details/46741875</link>
        <guid>http://blog.csdn.net/zdw_wym/article/details/46741875</guid>
        <author>taomanman</author>
        <pubDate>2015/7/3 15:04:42</pubDate>
        <description><![CDATA[
            <p><span style="font-size:14px;">在asp.net开发中常会遇到这样的问题，这里跟大家分享一个其之间相互转换的方法：</span></p><p><span style="font-size:14px;"></span><pre name="code" class="csharp">using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Reflection;
using System.Web;

namespace ContourWebs.BaseClass
{
    public class DTList
    {
        /// &lt;summary&gt;
        /// DataTable转换成List&lt;T&gt;
        /// &lt;/summary&gt;
        /// &lt;typeparam name=&quot;T&quot;&gt;&lt;/typeparam&gt;
        /// &lt;param name=&quot;table&quot;&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static List&lt;T&gt; GetList&lt;T&gt;(DataTable table)
        {
            List&lt;T&gt; list = new List&lt;T&gt;();
            T t = default(T);
            PropertyInfo[] propertypes = null;
            string tempName = string.Empty;
            foreach (DataRow row in table.Rows)
            {
                t = Activator.CreateInstance&lt;T&gt;();
                propertypes = t.GetType().GetProperties();
                foreach (PropertyInfo pro in propertypes)
                {
                    tempName = pro.Name;
                    if (table.Columns.Contains(tempName))
                    {
                        object value = row[tempName];
                        if (!value.ToString().Equals(&quot;&quot;))
                        {
                            pro.SetValue(t, value, null);
                        }
                    }
                }
                list.Add(t);
            }
            return list.Count == 0 ? null : list;
        }

        /// &lt;summary&gt;
        /// List&lt;T&gt;转换成DataTable
        /// &lt;/summary&gt;
        /// &lt;typeparam name=&quot;T&quot;&gt;&lt;/typeparam&gt;
        /// &lt;param name=&quot;list&quot;&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static DataSet ConvertToDataSet&lt;T&gt;(IList&lt;T&gt; list)
        {
            if (list == null || list.Count &lt;= 0)
            {
                return null;
            }

            DataSet ds = new DataSet();
            DataTable dt = new DataTable(typeof(T).Name);
            DataColumn column;
            DataRow row;

            System.Reflection.PropertyInfo[] myPropertyInfo = typeof(T).GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);

            foreach (T t in list)
            {
                if (t == null)
                {
                    continue;
                }

                row = dt.NewRow();

                for (int i = 0, j = myPropertyInfo.Length; i &lt; j; i++)
                {
                    System.Reflection.PropertyInfo pi = myPropertyInfo[i];

                    string name = pi.Name;

                    if (dt.Columns[name] == null)
                    {
                        column = new DataColumn(name, pi.PropertyType);
                        dt.Columns.Add(column);
                    }

                    row[name] = pi.GetValue(t, null);
                }

                dt.Rows.Add(row);
            }

            ds.Tables.Add(dt);

            return ds;
        }
    }
}</pre><br /><br /></p>
            <div>
                作者：taomanman 发表于2015/7/3 15:04:42 <a href="http://blog.csdn.net/zdw_wym/article/details/46741875">原文链接</a>
            </div>
            <div>
            阅读：336 评论：0 <a href="http://blog.csdn.net/zdw_wym/article/details/46741875#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]asp.net中利用jquery zTree异步加载数据]]></title>
        <link>http://blog.csdn.net/zdw_wym/article/details/46741487</link>
        <guid>http://blog.csdn.net/zdw_wym/article/details/46741487</guid>
        <author>taomanman</author>
        <pubDate>2015/7/3 14:49:10</pubDate>
        <description><![CDATA[
            <p><span style="font-size:14px;">jquery zTree需要使用的js和css，可以从下列地址获取：<a target=_blank target="_blank" href="http://download.csdn.net/detail/taomanman/8865543">http://download.csdn.net/detail/taomanman/8865543</a></span></p><p><span style="font-size:14px;"></span></p><p><span style="font-size: 14px;">运行效果如下图所示：</span></p><p><span style="font-size: 14px;"><img src="http://img.blog.csdn.net/20150703144721931?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemR3X3d5bQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" /></span></p><br /><p><span style="font-size:14px;">1、用于获取JSON数据的代码：</span></p><p><span style="font-size:14px;"></span></p><pre name="code" class="csharp">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeBehind=&quot;RegionData.aspx.cs&quot; Inherits=&quot;AT.Web.Ajax.RegionData&quot; %&gt;</pre><br /><pre name="code" class="csharp">using AT.Business.DAL;
using AT.Business.IDAO;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace AT.Web.Ajax
{
    public partial class RegionData : System.Web.UI.Page
    {
        private AT_System_IDAO systemidao = new AT_System_Dal();

        protected void Page_Load(object sender, EventArgs e)
        {
            try
            {
                //取得前台ajax请求的方法名称
                string ajaxMethod = Request[&quot;ajaxMethod&quot;].ToString();
                System.Reflection.MethodInfo method = this.GetType().GetMethod(ajaxMethod);
                if (method != null)
                {
                    //通过方法名称指向对应的方法
                    method.Invoke(this, new object[] { });
                }
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                Response.End();
            }

        }

        /// &lt;summary&gt;
        /// 异步加载当前节点的子节点
        /// &lt;/summary&gt;
        public void AnsyData()
        {
            List&lt;object&gt; lsNode = new List&lt;object&gt;();
            try
            {
                string parentId = Request.Params[&quot;id&quot;];
                DataTable dtRegion = this.systemidao.GetRegionList();
                DataView dv = new DataView(dtRegion);
                dv.RowFilter = &quot;PRegion_ID = '&quot; + parentId + &quot;'&quot;;
                lsNode = getList(dv);
                Response.Write(JsonConvert.SerializeObject(lsNode));
            }
            catch (Exception)
            {

                throw;
            }
        }

        /// &lt;summary&gt;
        /// 判断当前节点是否还有子节点
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;ParentId&quot;&gt;父节点Id&lt;/param&gt;
        /// &lt;returns&gt;bool类型&lt;/returns&gt;
        public bool isParentTrue(string ParentId)
        {
            try
            {
                DataTable dtRegion = this.systemidao.GetRegionList();
                DataView dv = new DataView(dtRegion);
                dv.RowFilter = &quot;PRegion_ID = '&quot; + ParentId + &quot;'&quot;;
                return dv.Count &gt;= 1 ? true : false;
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// &lt;summary&gt;
        /// 初始化第一次节点加载
        /// &lt;/summary&gt;
        public void FirstAnsyData()
        {
            try
            {
                DataTable dtRegion = this.systemidao.GetRegionList();
                DataView dv = new DataView(dtRegion);
                dv.RowFilter = &quot; PRegion_ID = '0' &quot;;
                List&lt;object&gt; lsNode = new List&lt;object&gt;();
                lsNode = getList(dv);
                //用到了Newtonsoft.dll 转化成Json格式
                Response.Write(JsonConvert.SerializeObject(lsNode));
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// &lt;summary&gt;
        /// 把数据形式转换成zTree的json数据格式
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;table&quot;&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public List&lt;object&gt; getList(DataView table)
        {
            try
            {
                List&lt;object&gt; lsNode = new List&lt;object&gt;();
                bool isParent = true;
                foreach (DataRowView drv in table)
                {
                    var ParentId = string.IsNullOrEmpty(drv[&quot;PRegion_ID&quot;].ToString()) ? &quot;0&quot; : drv[&quot;PRegion_ID&quot;].ToString();
                    if (isParentTrue(drv[&quot;Region_ID&quot;].ToString()))
                    {
                        isParent = true;
                    }
                    else
                    {
                        isParent = false;
                    }
                    var zTreeData = new
                    {
                        id = drv[&quot;Region_ID&quot;],
                        pId = string.IsNullOrEmpty(ParentId) ? &quot;0&quot; : ParentId,
                        name = drv[&quot;Region_Name&quot;],
                        isParent = isParent
                    };
                    lsNode.Add(zTreeData);
                }
                return lsNode;
            }
            catch (Exception)
            {
                throw;
            }
        }
    }
}</pre><br />2、用于展示zTree目录树的页面代码：<p></p><p><span style="font-size:14px;"></span></p><pre name="code" class="csharp">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeBehind=&quot;WebForm1.aspx.cs&quot; Inherits=&quot;AT.Web.WebForm1&quot; %&gt;

&lt;!DOCTYPE html&gt;

&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head runat=&quot;server&quot;&gt;
    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
    &lt;title&gt;zTree树形示例&lt;/title&gt;
    &lt;link href=&quot;Themes/Styles/zTreeStyle/zTreeStyle.css&quot; rel=&quot;stylesheet&quot; /&gt;
    &lt;script src=&quot;Themes/Scripts/jquery-1.8.2.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;Themes/Scripts/artDialog/artDialog.source.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;Themes/Scripts/artDialog/iframeTools.source.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;Themes/Scripts/FunctionJS.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
    &lt;/script&gt;
    &lt;script src=&quot;Themes/Scripts/jquery.ztree.core-3.5.min.js&quot;&gt;&lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        var zNodes;
        var zTree;
        //setting异步加载的设置
        var setting = {
            async: {
                enable: true, //表示异步加载生效
                url: &quot;Ajax/RegionData.aspx&quot;, // 异步加载时访问的页面
                autoParam: [&quot;id&quot;], // 异步加载时自动提交的父节点属性的参数
                otherParam: [&quot;ajaxMethod&quot;, 'AnsyData'], //ajax请求时提交的参数
                type: 'post',
                dataType: 'json'
            },
            checkable: true,
            showIcon: true,
            showLine: true, // zTree显示连接线
            data: {  //用pId来标识父子节点的关系
                simpleData: {
                    enable: true
                }
            },
            expandSpeed: &quot;&quot;, // 设置 zTree 节点展开、折叠的动画速度，默认为&quot;fast&quot;，&quot;&quot;表示无动画
            callback: { // 回调函数
                onClick: zTreeOnClick, // 单击鼠标事件
                asyncSuccess: zTreeOnAsyncSuccess //异步加载成功事件
            }
        };

        $(document).ready(function () {
            InitRegion();
            $.fn.zTree.init($(&quot;#treeDemo&quot;), setting, zNodes);
        });

        //初始化加载节点
        function InitRegion() {
            $.ajax({
                url: 'Ajax/RegionData.aspx',
                type: 'post',
                dataType: 'json',
                async: false,
                data: { 'ajaxMethod': 'FirstAnsyData' },
                success: function (data) {
                    zNodes = data;
                }
            });
        };

        //单击时获取zTree节点的Id,和value的值
        function zTreeOnClick(event, treeId, treeNode, clickFlag) {
            var treeValue = treeNode.id + &quot;,&quot; + treeNode.name;
            //单击给文本框赋值
            var Id = treeNode.pId;
            var v = &quot;&quot;;
            if (Id == '' || Id == undefined || Id == null) {
                v = treeNode.name + &quot; - 父节&quot;;
            }
            else {
                v = treeNode.name + &quot; - 子节&quot;;
            }
            top.Role_Form.Get_Region_ID(treeNode.id, v);
            //双击的话关闭弹出框
            //OpenClose();
            alert(v + &quot;,&quot; + treeNode.name);
        };

        function zTreeOnAsyncSuccess(event, treeId, treeNode, msg) {
        }
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;
        &lt;ul id=&quot;treeDemo&quot; class=&quot;ztree&quot;&gt;&lt;/ul&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre><br /><pre name="code" class="csharp">using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace AT.Web
{
    public partial class WebForm1 : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {

        }
    }
}</pre><br /><br /><p></p><p><br /></p><p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;"><br /></span></p><p><br /></p>
            <div>
                作者：taomanman 发表于2015/7/3 14:49:10 <a href="http://blog.csdn.net/zdw_wym/article/details/46741487">原文链接</a>
            </div>
            <div>
            阅读：313 评论：0 <a href="http://blog.csdn.net/zdw_wym/article/details/46741487#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]asp.net使用echarts展示图表数据]]></title>
        <link>http://blog.csdn.net/zdw_wym/article/details/46683367</link>
        <guid>http://blog.csdn.net/zdw_wym/article/details/46683367</guid>
        <author>taomanman</author>
        <pubDate>2015/6/29 15:58:49</pubDate>
        <description><![CDATA[
            <p><span style="font-size:14px;">百度echarts开发插件包下载地址：</span><a target=_blank target="_blank" href="http://download.csdn.net/detail/taomanman/8850699" style="font-size:14px;">http://download.csdn.net/detail/taomanman/8850699</a></p><p><br /></p><p><img src="http://img.blog.csdn.net/20150629155827872?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemR3X3d5bQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" /><br /></p><p><br /></p><p><img src="http://img.blog.csdn.net/20150629155837663?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemR3X3d5bQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" /><br /></p><pre name="code" class="csharp">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeBehind=&quot;EchartDemo.aspx.cs&quot; Inherits=&quot;AT.Web.Demo.EchartDemo&quot; %&gt;

&lt;!DOCTYPE html&gt;

&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head runat=&quot;server&quot;&gt;
    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
    &lt;title&gt;Echart图表示例&lt;/title&gt;
    &lt;script src=&quot;../Themes/Scripts/jquery-1.8.2.min.js&quot;&gt;&lt;/script&gt;
    &lt;link href=&quot;../Themes/Styles/Site.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;
    &lt;script src=&quot;../Themes/Scripts/FunctionJS.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        //初始化
        $(function () {
            $('#table2').hide();
        })
        //点击切换面板
        var IsFixedTableLoad = 1;
        function panel(obj) {
            if (obj == 1) {
                $('#table1').show();
                $('#table2').hide();
            } else if (obj == 2) {
                $('#table1').hide();
                $(&quot;#table2&quot;).show();
            }
        }
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;
        &lt;div class=&quot;frmtop&quot;&gt;
            &lt;table style=&quot;padding: 0px; margin: 0px; height: 100%;&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;
                &lt;tr&gt;
                    &lt;td id=&quot;menutab&quot; style=&quot;vertical-align: bottom;&quot;&gt;
                        &lt;div id=&quot;tab0&quot; class=&quot;Tabsel&quot; onclick=&quot;GetTabClick(this);panel(1)&quot;&gt;
                            能耗动态
                        &lt;/div&gt;
                        &lt;div id=&quot;tab1&quot; class=&quot;Tabremovesel&quot; onclick=&quot;GetTabClick(this);panel(2);&quot;&gt;
                            填报动态
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;
        &lt;div class=&quot;div-frm&quot; style=&quot;height: 275px;&quot;&gt;
            &lt;%--能耗动态--%&gt;
            &lt;div id=&quot;table1&quot;&gt;
                &lt;div id=&quot;divEnergy&quot; style=&quot;width: 610px; height: 220px;&quot;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;%--填报动态--%&gt;
            &lt;div id=&quot;table2&quot;&gt;
                &lt;div id=&quot;divReport&quot; style=&quot;width: 750px; height: 250px;&quot;&gt;&lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
&lt;script src=&quot;../Themes/Scripts/echarts/echarts.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;../Themes/Scripts/echarts/theme/macarons.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var cityClick = '';
    function GetUnitEnergy(unitName) {
        GetCityEnergy(unitName, 2);
    }
    require.config({
        paths: {
            echarts: '../Themes/Scripts/echarts'
        }
    });
    require(
        [
            'echarts',
            'echarts/chart/bar',
            'echarts/chart/line',
            'echarts/chart/pie',
            'echarts/chart/funnel'
        ],
        DrawEChart //异步加载的回调函数绘制图表
    );
    var myEnergyChart;

    var myReportChart;

    //创建ECharts图表方法
    function DrawEChart(ec) {
        //--- 折柱 ---
        myEnergyChart = ec.init(document.getElementById('divEnergy'), macarons);
        //定义图表options
        var options = {
            title: {
                text: &quot;&quot;,
                subtext: &quot;&quot;
            },
            /*color: ['#0099FF', '#00CC00', '#008080', '#CC6600', '#CC00CC', '#0033CC','#003300', '#FF0000'],*/
            tooltip: {
                trigger: 'axis'
            },
            legend: {
                data: [&quot; &quot;]
            },
            toolbox: {
                show: true,
                feature: {
                    mark: { show: false },
                    dataView: { show: false, readOnly: false },
                    magicType: { show: true, type: ['line', 'bar'] },
                    restore: { show: true },
                    saveAsImage: { show: false }
                }
            },
            grid: {
                x: 60,
                y: 30,
                x2: 5,
                y2: 30
            },
            calculable: true,
            xAxis: [
                {
                    type: 'category',
                    data: [&quot; &quot;]
                }
            ],
            yAxis: [
                {
                    type: 'value',
                    axisLabel: {
                        fomatter: &quot;.&quot;
                    },
                    splitArea: { show: true }
                }
            ],
            series: [{
                name: &quot; &quot;,
                type: &quot;line&quot;,
                data: [0]
            }]
        };
        //选择一个空图表
        myEnergyChart.setOption(options);
        myReportChart = ec.init(document.getElementById('divReport'), macarons);
        //选择一个空图表
        myReportChart.setOption(options);

        // 默认加载填报
        GetReport(&quot;1&quot;);
        // 默认加载省直
        GetUnitEnergy('34');
    }


    ///点击按钮获取图表数据采用ajax方式
    function GetCityEnergy(cityCode, level) {
        //获得图表的options对象
        var options = myEnergyChart.getOption();
        //通过Ajax获取数据
        $.ajax({
            type: &quot;post&quot;,
            async: false, //同步执行
            url: &quot;GetChartData.aspx?type=energyData&quot;,
            dataType: &quot;json&quot;, //返回数据形式为json
            success: function (result) {
                if (result) {
                    //将返回的category和series对象赋值给options对象内的category和series
                    //因为xAxis是一个数组 这里需要是xAxis[i]的形式
                    options.xAxis[0].data = result.category;
                    options.series = result.series;
                    options.legend.data = result.legend;
                    myEnergyChart.setOption(options);
                    myEnergyChart.refresh();
                }
            },
            error: function (errorMsg) {
                alert(&quot;图表数据加载失败！&quot;);
            }
        });
    }

    ///点击按钮获取图表数据采用ajax方式
    function GetReport(code) {
        //获得图表的options对象
        var options = myReportChart.getOption();
        //通过Ajax获取数据
        $.ajax({
            type: &quot;post&quot;,
            async: false, //同步执行
            url: &quot;GetChartData.aspx?type=reportData&quot;,
            dataType: &quot;json&quot;, //返回数据形式为json
            success: function (result) {
                if (result) {
                    //将返回的category和series对象赋值给options对象内的category和series
                    //因为xAxis是一个数组 这里需要是xAxis[i]的形式
                    //myReportChart.clear();
                    options.xAxis[0].data = result.category;
                    options.series = result.series;
                    options.legend.data = result.legend;
                    myReportChart.setOption(options);
                }
            },
            error: function (errorMsg) {
                alert(&quot;图表数据加载失败！&quot;);
            }
        });
    }

    //初始加载图表数据
    $(function () {
        GetCityEnergy(&quot;&quot;, &quot;&quot;);
        GetUnitEnergy(&quot;&quot;);
    });
&lt;/script&gt;</pre><p></p><p><br /></p><p></p><pre name="code" class="csharp">using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace AT.Web.Demo
{
    public partial class EchartDemo : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {

        }
    }
}</pre><br /><br /><p></p><p></p><pre name="code" class="csharp">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeBehind=&quot;GetChartData.aspx.cs&quot; Inherits=&quot;AT.Web.Demo.GetChartData&quot; %&gt;
</pre><br /><pre name="code" class="csharp">using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace AT.Web.Demo
{
    public partial class GetChartData : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            string type = Request[&quot;type&quot;];
            if (!string.IsNullOrEmpty(type))
            {
                switch (type)
                {
                    case &quot;energyData&quot;:
                        GetEnergyDataAjaxData(&quot;&quot;, &quot;&quot;);
                        break;
                    case &quot;reportData&quot;:
                        GetReportDataAjaxData(&quot;&quot;);
                        break;
                }
            }
        }

        /// &lt;summary&gt;
        /// 获得数据且用Json格式数据返回
        /// &lt;/summary&gt;
        private void GetEnergyDataAjaxData(string level, string code)
        {
            //考虑到图表的category是字符串数组 这里定义一个string的List
            List&lt;string&gt; categoryList = new List&lt;string&gt;();
            //考虑到图表的series数据为一个对象数组 这里额外定义一个series的类
            List&lt;Series&gt; seriesList = new List&lt;Series&gt;();

            //考虑到Echarts图表需要设置legend内的data数组为series的name集合这里需要定义一个legend数组
            List&lt;string&gt; legendList = new List&lt;string&gt;();

            DataTable dt = null;
            using (SqlConnection con = new SqlConnection(&quot;Data Source=.;User ID=sa;Password=111111;Database=AT_DB;&quot;))
            {
                string strSQL = &quot;select top 12 * from T_EchartData1&quot;;
                using (SqlDataAdapter adapter = new SqlDataAdapter(strSQL, con))
                {
                    DataSet ds = new DataSet();
                    adapter.Fill(ds);
                    dt = ds.Tables[0];
                }
            }
            //Response.Write(dt.Rows.Count+&quot;条数据！&quot;);
            //设置legend数组
            legendList.Add(&quot;今年能耗&quot;); //这里的名称必须和series的每一组series的name保持一致
            legendList.Add(&quot;去年能耗&quot;); //这里的名称必须和series的每一组series的name保持一致


            Series thisSeriesObj = new Series();
            thisSeriesObj.id = 0;
            thisSeriesObj.name = &quot;今年能耗&quot;;
            thisSeriesObj.type = &quot;line&quot;; //线性图呈现
            thisSeriesObj.data = new List&lt;object&gt;();
            thisSeriesObj.itemStyle = new itemStyle { normal = new normal { color = &quot;#0099FF&quot; } };
            Series lastSeriesObj = new Series();
            lastSeriesObj.id = 1;
            lastSeriesObj.name = &quot;去年能耗&quot;;
            lastSeriesObj.type = &quot;line&quot;; //线性图呈现
            lastSeriesObj.data = new List&lt;object&gt;();
            lastSeriesObj.itemStyle = new itemStyle { normal = new normal { color = &quot;#00CC00&quot; } };
            foreach (DataRow dr in dt.Rows)
            {
                categoryList.Add(dr[0].ToString() + &quot;月&quot;);
                thisSeriesObj.data.Add(dr[1]);
                lastSeriesObj.data.Add(dr[2]);
            }
            //将sereis对象压入sereis数组列表内
            seriesList.Add(thisSeriesObj);
            seriesList.Add(lastSeriesObj);

            //最后调用相关函数将List转换为Json
            //因为我们需要返回category和series、legend多个对象 这里我们自己在new一个新的对象来封装这两个对象
            var newObj = new
            {
                category = categoryList,
                series = seriesList,
                legend = legendList
            };
            //Response返回新对象的json数据
            Response.Write(JsonConvert.SerializeObject(newObj, Formatting.None));
            Response.End();
        }

        /// &lt;summary&gt;
        /// 获得数据且用Json格式数据返回
        /// &lt;/summary&gt;
        private void GetReportDataAjaxData(string code)
        {
            //考虑到图表的category是字符串数组 这里定义一个string的List
            List&lt;string&gt; categoryList = new List&lt;string&gt;();
            //考虑到图表的series数据为一个对象数组 这里额外定义一个series的类
            List&lt;Series&gt; seriesList = new List&lt;Series&gt;();

            //考虑到Echarts图表需要设置legend内的data数组为series的name集合这里需要定义一个legend数组
            List&lt;string&gt; legendList = new List&lt;string&gt;();

            DataTable dt = null;
            using (SqlConnection con = new SqlConnection(&quot;Data Source=.;User ID=sa;Password=111111;Database=AT_DB;&quot;))
            {
                string strSQL = &quot;select * from T_EchartData2&quot;;
                using (SqlDataAdapter adapter = new SqlDataAdapter(strSQL, con))
                {
                    DataSet ds = new DataSet();
                    adapter.Fill(ds);
                    dt = ds.Tables[0];
                }
            }
            //Response.Write(dt.Rows.Count + &quot;条数据！&quot;);
            //设置legend数组
            legendList.Add(&quot;电&quot;); //这里的名称必须和series的每一组series的name保持一致
            legendList.Add(&quot;水&quot;); //这里的名称必须和series的每一组series的name保持一致
            legendList.Add(&quot;燃煤&quot;); //这里的名称必须和series的每一组series的name保持一致
            legendList.Add(&quot;天然气&quot;); //这里的名称必须和series的每一组series的name保持一致
            legendList.Add(&quot;汽油&quot;); //这里的名称必须和series的每一组series的name保持一致
            legendList.Add(&quot;柴油&quot;); //这里的名称必须和series的每一组series的name保持一致
            legendList.Add(&quot;热力&quot;); //这里的名称必须和series的每一组series的name保持一致
            legendList.Add(&quot;其他&quot;); //这里的名称必须和series的每一组series的name保持一致


            Series dianSeries = new Series();
            dianSeries.id = 0;
            dianSeries.name = &quot;电&quot;;
            dianSeries.type = &quot;line&quot;; //线性图呈现
            dianSeries.data = new List&lt;object&gt;();
            dianSeries.itemStyle = new itemStyle { normal = new normal { color = &quot;#0099FF&quot; } };
            Series shuiSeries = new Series();
            shuiSeries.id = 1;
            shuiSeries.name = &quot;水&quot;;
            shuiSeries.type = &quot;line&quot;; //线性图呈现
            shuiSeries.data = new List&lt;object&gt;();
            shuiSeries.itemStyle = new itemStyle { normal = new normal { color = &quot;#00CC00&quot; } };
            Series yuanmeiSeries = new Series();
            yuanmeiSeries.id = 2;
            yuanmeiSeries.name = &quot;燃煤&quot;;
            yuanmeiSeries.type = &quot;line&quot;; //线性图呈现
            yuanmeiSeries.data = new List&lt;object&gt;();
            yuanmeiSeries.itemStyle = new itemStyle { normal = new normal { color = &quot;#008080&quot; } };
            Series tianranqiSeries = new Series();
            tianranqiSeries.id = 3;
            tianranqiSeries.name = &quot;天然气&quot;;
            tianranqiSeries.type = &quot;line&quot;; //线性图呈现
            tianranqiSeries.data = new List&lt;object&gt;();
            tianranqiSeries.itemStyle = new itemStyle { normal = new normal { color = &quot;#CC6600&quot; } };
            Series qiyouSeries = new Series();
            qiyouSeries.id = 4;
            qiyouSeries.name = &quot;汽油&quot;;
            qiyouSeries.type = &quot;line&quot;; //线性图呈现
            qiyouSeries.data = new List&lt;object&gt;();
            qiyouSeries.itemStyle = new itemStyle { normal = new normal { color = &quot;#CC00CC&quot; } };
            Series chaiyouSeries = new Series();
            chaiyouSeries.id = 5;
            chaiyouSeries.name = &quot;柴油&quot;;
            chaiyouSeries.type = &quot;line&quot;; //线性图呈现
            chaiyouSeries.data = new List&lt;object&gt;();
            chaiyouSeries.itemStyle = new itemStyle { normal = new normal { color = &quot;#0033CC&quot; } };
            Series reliSeries = new Series();
            reliSeries.id = 6;
            reliSeries.name = &quot;热力&quot;;
            reliSeries.type = &quot;line&quot;; //线性图呈现
            reliSeries.data = new List&lt;object&gt;();
            reliSeries.itemStyle = new itemStyle { normal = new normal { color = &quot;#003300&quot; } };
            Series qitaSeries = new Series();
            qitaSeries.id = 7;
            qitaSeries.name = &quot;其他&quot;;
            qitaSeries.type = &quot;line&quot;; //线性图呈现
            qitaSeries.data = new List&lt;object&gt;();
            qitaSeries.itemStyle = new itemStyle { normal = new normal { color = &quot;#FF0000&quot; } };
            foreach (DataRow dr in dt.Rows)
            {
                categoryList.Add(string.Format(&quot;{0}年{1}月&quot;, dr[&quot;ReportYear&quot;], dr[&quot;ReportMonth&quot;]));
                dianSeries.data.Add(string.IsNullOrEmpty(dr[&quot;DIAN&quot;].ToString()) ? 0 : dr[&quot;DIAN&quot;]);
                shuiSeries.data.Add(string.IsNullOrEmpty(dr[&quot;SHUI&quot;].ToString()) ? 0 : dr[&quot;SHUI&quot;]);
                yuanmeiSeries.data.Add(string.IsNullOrEmpty(dr[&quot;YUANMEI&quot;].ToString()) ? 0 : dr[&quot;YUANMEI&quot;]);
                tianranqiSeries.data.Add(string.IsNullOrEmpty(dr[&quot;TIANRQ&quot;].ToString()) ? 0 : dr[&quot;TIANRQ&quot;]);
                qiyouSeries.data.Add(string.IsNullOrEmpty(dr[&quot;QIYOU&quot;].ToString()) ? 0 : dr[&quot;QIYOU&quot;]);
                chaiyouSeries.data.Add(string.IsNullOrEmpty(dr[&quot;CHAIYOU&quot;].ToString()) ? 0 : dr[&quot;CHAIYOU&quot;]);
                reliSeries.data.Add(string.IsNullOrEmpty(dr[&quot;RELI&quot;].ToString()) ? 0 : dr[&quot;RELI&quot;]);
                qitaSeries.data.Add(string.IsNullOrEmpty(dr[&quot;QTNY&quot;].ToString()) ? 0 : dr[&quot;QTNY&quot;]);
            }
            //将sereis对象压入sereis数组列表内
            seriesList.Add(dianSeries);
            seriesList.Add(shuiSeries);
            seriesList.Add(yuanmeiSeries);
            seriesList.Add(tianranqiSeries);
            seriesList.Add(qiyouSeries);
            seriesList.Add(chaiyouSeries);
            seriesList.Add(reliSeries);
            seriesList.Add(qitaSeries);

            //最后调用相关函数将List转换为Json
            //因为我们需要返回category和series、legend多个对象 这里我们自己在new一个新的对象来封装这两个对象
            var newObj = new
            {
                category = categoryList,
                series = seriesList,
                legend = legendList
            };
            //Response返回新对象的json数据
            Response.Write(JsonConvert.SerializeObject(newObj, Formatting.None));
            Response.End();
        }
    }
    /// &lt;summary&gt;
    /// 定义一个Series类 设置其每一组sereis的一些基本属性
    /// &lt;/summary&gt;
    class Series
    {
        /// &lt;summary&gt;
        /// sereis序列组id
        /// &lt;/summary&gt;
        public int id
        {
            get;
            set;
        }

        /// &lt;summary&gt;
        /// series序列组名称
        /// &lt;/summary&gt;
        public string name
        {
            get;
            set;
        }

        /// &lt;summary&gt;
        /// series序列组呈现图表类型(line、column、bar等)
        /// &lt;/summary&gt;
        public string type
        {
            get;
            set;
        }

        /// &lt;summary&gt;
        /// series序列组的itemstyle
        /// &lt;/summary&gt;
        public object itemStyle
        {
            get;
            set;
        }
        /// &lt;summary&gt;
        /// series序列组的数据为数据类型数组
        /// &lt;/summary&gt;
        public List&lt;object&gt; data
        {
            get;
            set;
        }
    }

    class normal
    {
        /// &lt;summary&gt;
        /// color
        /// &lt;/summary&gt;
        public string color
        {
            get;
            set;
        }
    }

    class itemStyle
    {
        /// &lt;summary&gt;
        /// normal
        /// &lt;/summary&gt;
        public object normal
        {
            get;
            set;
        }
    }
}</pre><br /><br /><p></p><p><br /></p>
            <div>
                作者：taomanman 发表于2015/6/29 15:58:49 <a href="http://blog.csdn.net/zdw_wym/article/details/46683367">原文链接</a>
            </div>
            <div>
            阅读：231 评论：0 <a href="http://blog.csdn.net/zdw_wym/article/details/46683367#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]VS2013 SN可用序列号]]></title>
        <link>http://blog.csdn.net/zdw_wym/article/details/46645751</link>
        <guid>http://blog.csdn.net/zdw_wym/article/details/46645751</guid>
        <author>taomanman</author>
        <pubDate>2015/6/26 9:11:32</pubDate>
        <description><![CDATA[
            <p><span style="font-size:14px;">VS2013 SN可用序列号：<br /></span></p><p><span style="font-size:14px;"><strong><em>BWG7X-J98B3-W34RT-33B3R-JVYW9</em></strong></span></p><p><span style="font-size:14px;color:#ff0000;">特别说明：<strong><em>仅供学习编程使用</em></strong>。</span></p>
            <div>
                作者：taomanman 发表于2015/6/26 9:11:32 <a href="http://blog.csdn.net/zdw_wym/article/details/46645751">原文链接</a>
            </div>
            <div>
            阅读：163 评论：1 <a href="http://blog.csdn.net/zdw_wym/article/details/46645751#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
    <item>
        <title><![CDATA[[原]Java Web开发相关连接]]></title>
        <link>http://blog.csdn.net/zdw_wym/article/details/46524231</link>
        <guid>http://blog.csdn.net/zdw_wym/article/details/46524231</guid>
        <author>taomanman</author>
        <pubDate>2015/6/16 22:08:39</pubDate>
        <description><![CDATA[
            <p><span style="font-size:14px;">1、Java Web开发环境搭建</span></p><p><span style="font-size:14px;"><a target=_blank href="http://blog.csdn.net/wangqiuyun/article/details/8953940">http://blog.csdn.net/wangqiuyun/article/details/8953940</a><br /></span></p><p><span style="font-size:14px;"><br /></span></p><p><span style="font-size:14px;">2、</span></p>
            <div>
                作者：taomanman 发表于2015/6/16 22:08:39 <a href="http://blog.csdn.net/zdw_wym/article/details/46524231">原文链接</a>
            </div>
            <div>
            阅读：136 评论：0 <a href="http://blog.csdn.net/zdw_wym/article/details/46524231#comments" target="_blank">查看评论</a>
            </div>
        ]]>
        </description>
        <category></category>
    </item>
</channel>
</rss>
