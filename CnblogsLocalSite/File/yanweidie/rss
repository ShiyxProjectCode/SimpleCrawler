<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">博客园_焰尾迭</title>
  <subtitle type="text">吾生也有涯，而知也无涯。以有涯随无涯，殆已。</subtitle>
  <id>uuid:283f8d56-61ca-49a6-8cba-78657ba4eeb7;id=2865</id>
  <updated>2015-09-15T15:05:17Z</updated>
  <author>
    <name>焰尾迭</name>
    <uri>http://www.cnblogs.com/yanweidie/</uri>
  </author>
  <generator>feed.cnblogs.com</generator>
  <entry>
    <id>http://www.cnblogs.com/yanweidie/p/3564062.html</id>
    <title type="text">开源任务管理平台TaskManager介绍 - 焰尾迭</title>
    <summary type="text">很早之前准备写Quartz系列文章，现在终于能够实现了。从本篇开始将带你实现一款自己的任务管理平台。在工作中你曾经需要应用执行一个任务吗？这个任务每天或每周星期二晚上11：30，或许仅仅每个月的最后一天执行。一个自动执行而无须干预的任务在执行过程中如果发生一个严重错误，应用能够知到其执行失败并尝...</summary>
    <published>2015-09-12T07:37:00Z</published>
    <updated>2015-09-12T07:37:00Z</updated>
    <author>
      <name>焰尾迭</name>
      <uri>http://www.cnblogs.com/yanweidie/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/yanweidie/p/3564062.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/yanweidie/p/3564062.html" />
    <content type="html">很早之前准备写Quartz系列文章，现在终于能够实现了。从本篇开始将带你实现一款自己的任务管理平台。在工作中你曾经需要应用执行一个任务吗？这个任务每天或每周星期二晚上11：30，或许仅仅每个月的最后一天执行。一个自动执行而无须干预的任务在执行过程中如果发生一个严重错误，应用能够知到其执行失败并尝...&lt;img src="http://counter.cnblogs.com/blog/rss/3564062" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/yanweidie/p/3564062.html" target="_blank"&gt;开源任务管理平台TaskManager介绍&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/yanweidie/p/4763556.html</id>
    <title type="text">分布式中Redis实现Session终结篇 - 焰尾迭</title>
    <summary type="text">上一篇使用Redis实现Session共享方式虽然可行,但是实际操作起来却很麻烦，现有代码已经是这个样子了,总不可能全部换掉吧！好吧,这是个很实际的问题,那么能不能实现无侵入式的分布式Session共享方案呢？mode="InProc"这是web.config里面使用iis进程保存Session...</summary>
    <published>2015-08-29T10:11:00Z</published>
    <updated>2015-08-29T10:11:00Z</updated>
    <author>
      <name>焰尾迭</name>
      <uri>http://www.cnblogs.com/yanweidie/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/yanweidie/p/4763556.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/yanweidie/p/4763556.html" />
    <content type="html">上一篇使用Redis实现Session共享方式虽然可行,但是实际操作起来却很麻烦，现有代码已经是这个样子了,总不可能全部换掉吧！好吧,这是个很实际的问题,那么能不能实现无侵入式的分布式Session共享方案呢？mode=&amp;quot;InProc&amp;quot;这是web.config里面使用iis进程保存Session...&lt;img src="http://counter.cnblogs.com/blog/rss/4763556" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/yanweidie/p/4763556.html" target="_blank"&gt;分布式中Redis实现Session终结篇&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/yanweidie/p/4678095.html</id>
    <title type="text">分布式中使用Redis实现Session共享(二) - 焰尾迭</title>
    <summary type="text">上一篇介绍了一些redis的安装及使用步骤，本篇开始将介绍redis的实际应用场景,先从最常见的session开始，刚好也重新学习一遍session的实现原理。在阅读之前假设你已经会使用nginx+iis实现负载均衡搭建负载均衡站点了，这里我们会搭建两个站点来验证redis实现的session是...</summary>
    <published>2015-08-17T00:46:00Z</published>
    <updated>2015-08-17T00:46:00Z</updated>
    <author>
      <name>焰尾迭</name>
      <uri>http://www.cnblogs.com/yanweidie/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/yanweidie/p/4678095.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/yanweidie/p/4678095.html" />
    <content type="html">上一篇介绍了一些redis的安装及使用步骤，本篇开始将介绍redis的实际应用场景,先从最常见的session开始，刚好也重新学习一遍session的实现原理。在阅读之前假设你已经会使用nginx+iis实现负载均衡搭建负载均衡站点了，这里我们会搭建两个站点来验证redis实现的session是...&lt;img src="http://counter.cnblogs.com/blog/rss/4678095" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/yanweidie/p/4678095.html" target="_blank"&gt;分布式中使用Redis实现Session共享(二)&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/yanweidie/p/4719692.html</id>
    <title type="text">分布式中使用Redis实现Session共享(一) - 焰尾迭</title>
    <summary type="text">上一篇介绍了如何使用nginx+iis部署一个简单的分布式系统，文章结尾留下了几个问题，其中一个是"如何解决多站点下Session共享"。这篇文章将会介绍如何使用Redis，下一篇在此基础上实现Session。 这里特别说明一下，其实没有必要使用Redis来解决Session共享。Asp.ne...</summary>
    <published>2015-08-11T14:17:00Z</published>
    <updated>2015-08-11T14:17:00Z</updated>
    <author>
      <name>焰尾迭</name>
      <uri>http://www.cnblogs.com/yanweidie/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/yanweidie/p/4719692.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/yanweidie/p/4719692.html" />
    <content type="html">上一篇介绍了如何使用nginx+iis部署一个简单的分布式系统，文章结尾留下了几个问题，其中一个是&amp;quot;如何解决多站点下Session共享&amp;quot;。这篇文章将会介绍如何使用Redis，下一篇在此基础上实现Session。 这里特别说明一下，其实没有必要使用Redis来解决Session共享。Asp.ne...&lt;img src="http://counter.cnblogs.com/blog/rss/4719692" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/yanweidie/p/4719692.html" target="_blank"&gt;分布式中使用Redis实现Session共享(一)&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/yanweidie/p/4658136.html</id>
    <title type="text">nginx+iis实现负载均衡 - 焰尾迭</title>
    <summary type="text">最近在研究分布式系统架构方面的知识，包括负载均衡，数据库读写分离，分布式缓存redis等。本篇先从负载均衡服务架构入手，关于负载均衡百度百科的定义如下：负载均衡，英文名称为Load Balance，其意思就是分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关...</summary>
    <published>2015-07-19T03:10:00Z</published>
    <updated>2015-07-19T03:10:00Z</updated>
    <author>
      <name>焰尾迭</name>
      <uri>http://www.cnblogs.com/yanweidie/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/yanweidie/p/4658136.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/yanweidie/p/4658136.html" />
    <content type="html">最近在研究分布式系统架构方面的知识，包括负载均衡，数据库读写分离，分布式缓存redis等。本篇先从负载均衡服务架构入手，关于负载均衡百度百科的定义如下：负载均衡，英文名称为Load Balance，其意思就是分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关...&lt;img src="http://counter.cnblogs.com/blog/rss/4658136" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/yanweidie/p/4658136.html" target="_blank"&gt;nginx+iis实现负载均衡&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/yanweidie/p/4605212.html</id>
    <title type="text">Newtonsoft.Json高级用法 - 焰尾迭</title>
    <summary type="text">手机端应用讲究速度快，体验好。刚好手头上的一个项目服务端接口有性能问题，需要进行优化。在接口多次修改中，实体添加了很多字段用于中间计算或者存储，然后最终用Newtonsoft.Json进行序列化返回数据，经过分析一个简单的列表接口每一行数据返回了16个字段，但是手机APP端只用到了其中7个字段，...</summary>
    <published>2015-06-28T23:58:00Z</published>
    <updated>2015-06-28T23:58:00Z</updated>
    <author>
      <name>焰尾迭</name>
      <uri>http://www.cnblogs.com/yanweidie/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/yanweidie/p/4605212.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/yanweidie/p/4605212.html" />
    <content type="html">手机端应用讲究速度快，体验好。刚好手头上的一个项目服务端接口有性能问题，需要进行优化。在接口多次修改中，实体添加了很多字段用于中间计算或者存储，然后最终用Newtonsoft.Json进行序列化返回数据，经过分析一个简单的列表接口每一行数据返回了16个字段，但是手机APP端只用到了其中7个字段，...&lt;img src="http://counter.cnblogs.com/blog/rss/4605212" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/yanweidie/p/4605212.html" target="_blank"&gt;Newtonsoft.Json高级用法&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/yanweidie/p/4516164.html</id>
    <title type="text">在线文档预览方案-office web apps - 焰尾迭</title>
    <summary type="text">最近在做项目时，要在手机端实现在线文档预览的功能。于是百度了一下实现方案，大致是将文档转换成pdf，然后在通过插件实现预览。这些方案没有具体实现代码，也没有在线预览的地址，再加上项目时间紧迫。只能考虑其它方案，这时微软的office web apps方案映入眼帘,于是和同事一起用一台PC机折腾了...</summary>
    <published>2015-05-20T00:06:00Z</published>
    <updated>2015-05-20T00:06:00Z</updated>
    <author>
      <name>焰尾迭</name>
      <uri>http://www.cnblogs.com/yanweidie/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/yanweidie/p/4516164.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/yanweidie/p/4516164.html" />
    <content type="html">最近在做项目时，要在手机端实现在线文档预览的功能。于是百度了一下实现方案，大致是将文档转换成pdf，然后在通过插件实现预览。这些方案没有具体实现代码，也没有在线预览的地址，再加上项目时间紧迫。只能考虑其它方案，这时微软的office web apps方案映入眼帘,于是和同事一起用一台PC机折腾了...&lt;img src="http://counter.cnblogs.com/blog/rss/4516164" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/yanweidie/p/4516164.html" target="_blank"&gt;在线文档预览方案-office web apps&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/yanweidie/p/4452526.html</id>
    <title type="text">我的前端学习历程 - 焰尾迭</title>
    <summary type="text">很难想象一个半年前还在做后台开发，对前端知之甚少的我，现在也可以从事前端开发了。这半年的学习过程将会是我人生一笔宝贵的财富，这让我想到一句话“在成长的道路上，我们不要给自己设定界限，只要拥有成长的力量，就能不断超越自己”。 下面以我自己的经历讲讲前端的学习过程。阅读目录Jquery基础知识准备C...</summary>
    <published>2015-05-17T09:25:00Z</published>
    <updated>2015-05-17T09:25:00Z</updated>
    <author>
      <name>焰尾迭</name>
      <uri>http://www.cnblogs.com/yanweidie/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/yanweidie/p/4452526.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/yanweidie/p/4452526.html" />
    <content type="html">很难想象一个半年前还在做后台开发，对前端知之甚少的我，现在也可以从事前端开发了。这半年的学习过程将会是我人生一笔宝贵的财富，这让我想到一句话“在成长的道路上，我们不要给自己设定界限，只要拥有成长的力量，就能不断超越自己”。 下面以我自己的经历讲讲前端的学习过程。阅读目录Jquery基础知识准备C...&lt;img src="http://counter.cnblogs.com/blog/rss/4452526" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/yanweidie/p/4452526.html" target="_blank"&gt;我的前端学习历程&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/yanweidie/p/4448671.html</id>
    <title type="text">我是怎么使用最短路径算法解决动态联动问题的 - 焰尾迭</title>
    <summary type="text">省市县三级联动问题相信大家都耳熟能详了,选择市下拉选项依赖于省，同样的选择县下拉选项依赖于市。把省市县抽象成三个节点A(省)，B(市)，C(县)，它们的关系如下图(1)。假如把这个联动问题复杂化一点如图(2)所示，现在随便改变一个节点的值，其余节点的值会发生什么变化，你还能直接说出来吗？这个问题...</summary>
    <published>2015-04-24T00:01:00Z</published>
    <updated>2015-04-24T00:01:00Z</updated>
    <author>
      <name>焰尾迭</name>
      <uri>http://www.cnblogs.com/yanweidie/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/yanweidie/p/4448671.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/yanweidie/p/4448671.html" />
    <content type="html">省市县三级联动问题相信大家都耳熟能详了,选择市下拉选项依赖于省，同样的选择县下拉选项依赖于市。把省市县抽象成三个节点A(省)，B(市)，C(县)，它们的关系如下图(1)。假如把这个联动问题复杂化一点如图(2)所示，现在随便改变一个节点的值，其余节点的值会发生什么变化，你还能直接说出来吗？这个问题...&lt;img src="http://counter.cnblogs.com/blog/rss/4448671" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/yanweidie/p/4448671.html" target="_blank"&gt;我是怎么使用最短路径算法解决动态联动问题的&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/yanweidie/p/4438222.html</id>
    <title type="text">拓扑排序及其实际应用 - 焰尾迭</title>
    <summary type="text">最近在做实际项目中遇到了一个问题，如何判断一个层级结构的图是否存在循环引用。刚开始想到了方法是用递归进行判断，后来想到大学学过的拓扑排序可以解决该问题，于是翻了下数据结构这本书，阅读了园友的文章，根据自己的理解写下了这篇随笔。阅读目录拓扑排序介绍问题引入及算法实现本章总结回到顶部拓扑排序介绍 ...</summary>
    <published>2015-04-18T16:58:00Z</published>
    <updated>2015-04-18T16:58:00Z</updated>
    <author>
      <name>焰尾迭</name>
      <uri>http://www.cnblogs.com/yanweidie/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/yanweidie/p/4438222.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/yanweidie/p/4438222.html" />
    <content type="html">最近在做实际项目中遇到了一个问题，如何判断一个层级结构的图是否存在循环引用。刚开始想到了方法是用递归进行判断，后来想到大学学过的拓扑排序可以解决该问题，于是翻了下数据结构这本书，阅读了园友的文章，根据自己的理解写下了这篇随笔。阅读目录拓扑排序介绍问题引入及算法实现本章总结回到顶部拓扑排序介绍 ...&lt;img src="http://counter.cnblogs.com/blog/rss/4438222" width="1" height="1" alt=""/&gt;&lt;br/&gt;&lt;p&gt;本文链接：&lt;a href="http://www.cnblogs.com/yanweidie/p/4438222.html" target="_blank"&gt;拓扑排序及其实际应用&lt;/a&gt;，转载请注明。&lt;/p&gt;</content>
  </entry>
</feed>